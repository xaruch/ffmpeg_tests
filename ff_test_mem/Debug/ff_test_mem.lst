
ff_test_mem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000013  00008134  00008134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00008148  00008148  00000148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA, LINK_ONCE_SAME_CONTENTS
  2 .hash         00000294  00008168  00008168  00000168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynsym       00000600  000083fc  000083fc  000003fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynstr       0000091d  000089fc  000089fc  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .gnu.version  000000c0  0000931a  0000931a  0000131a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version_r 000000f0  000093dc  000093dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rel.dyn      00000008  000094cc  000094cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.plt      000002d0  000094d4  000094d4  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .init         0000000c  000097a4  000097a4  000017a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .plt          0000044c  000097b0  000097b0  000017b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text         000039ec  00009c00  00009c00  00001c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .fini         00000008  0000d5ec  0000d5ec  000055ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       000007c0  0000d5f4  0000d5f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .ARM.extab    000003d8  0000ddb4  0000ddb4  00005db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000320  0000e18c  0000e18c  0000618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  0000e4ac  0000e4ac  000064ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   0000001c  000164b0  000164b0  000064b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  000164cc  000164cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  000164d0  000164d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000130  000164d4  000164d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000178  00016604  00016604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         00000048  0001677c  0001677c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000834  000167c8  000167c8  000067c4  2**3
                  ALLOC
 24 .ARM.attributes 00000034  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY
 25 .comment      00000102  00000000  00000000  000067f8  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000178  00000000  00000000  000068fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_pubnames 00000ff4  00000000  00000000  00006a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_info   0002ab30  00000000  00000000  00007a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_abbrev 000027b4  00000000  00000000  00032596  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_line   00006ed2  00000000  00000000  00034d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_frame  00000c5c  00000000  00000000  0003bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_str    0000a1a4  00000000  00000000  0003c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 33 .debug_loc    000013a7  00000000  00000000  00046a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 34 .debug_macinfo 0009179e  00000000  00000000  00047dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 35 .debug_ranges 00000220  00000000  00000000  000d9561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

000097a4 <_init>:
    97a4:	e92d4010 	push	{r4, lr}
    97a8:	eb000122 	bl	9c38 <call_gmon_start>
    97ac:	e8bd8010 	pop	{r4, pc}

Disassembly of section .plt:

000097b0 <.plt>:
    97b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    97b4:	e59fe004 	ldr	lr, [pc, #4]	; 97c0 <_init+0x1c>
    97b8:	e08fe00e 	add	lr, pc, lr
    97bc:	e5bef008 	ldr	pc, [lr, #8]!
    97c0:	0000ce44 	.word	0x0000ce44
    97c4:	e28fc600 	add	ip, pc, #0	; 0x0
    97c8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    97cc:	e5bcfe44 	ldr	pc, [ip, #3652]!
    97d0:	e28fc600 	add	ip, pc, #0	; 0x0
    97d4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    97d8:	e5bcfe3c 	ldr	pc, [ip, #3644]!
    97dc:	e28fc600 	add	ip, pc, #0	; 0x0
    97e0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    97e4:	e5bcfe34 	ldr	pc, [ip, #3636]!
    97e8:	e28fc600 	add	ip, pc, #0	; 0x0
    97ec:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    97f0:	e5bcfe2c 	ldr	pc, [ip, #3628]!
    97f4:	e28fc600 	add	ip, pc, #0	; 0x0
    97f8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    97fc:	e5bcfe24 	ldr	pc, [ip, #3620]!
    9800:	e28fc600 	add	ip, pc, #0	; 0x0
    9804:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9808:	e5bcfe1c 	ldr	pc, [ip, #3612]!
    980c:	e28fc600 	add	ip, pc, #0	; 0x0
    9810:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9814:	e5bcfe14 	ldr	pc, [ip, #3604]!
    9818:	e28fc600 	add	ip, pc, #0	; 0x0
    981c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9820:	e5bcfe0c 	ldr	pc, [ip, #3596]!
    9824:	e28fc600 	add	ip, pc, #0	; 0x0
    9828:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    982c:	e5bcfe04 	ldr	pc, [ip, #3588]!
    9830:	e28fc600 	add	ip, pc, #0	; 0x0
    9834:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9838:	e5bcfdfc 	ldr	pc, [ip, #3580]!
    983c:	e28fc600 	add	ip, pc, #0	; 0x0
    9840:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9844:	e5bcfdf4 	ldr	pc, [ip, #3572]!
    9848:	e28fc600 	add	ip, pc, #0	; 0x0
    984c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9850:	e5bcfdec 	ldr	pc, [ip, #3564]!
    9854:	e28fc600 	add	ip, pc, #0	; 0x0
    9858:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    985c:	e5bcfde4 	ldr	pc, [ip, #3556]!
    9860:	e28fc600 	add	ip, pc, #0	; 0x0
    9864:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9868:	e5bcfddc 	ldr	pc, [ip, #3548]!
    986c:	e28fc600 	add	ip, pc, #0	; 0x0
    9870:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9874:	e5bcfdd4 	ldr	pc, [ip, #3540]!
    9878:	e28fc600 	add	ip, pc, #0	; 0x0
    987c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9880:	e5bcfdcc 	ldr	pc, [ip, #3532]!
    9884:	e28fc600 	add	ip, pc, #0	; 0x0
    9888:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    988c:	e5bcfdc4 	ldr	pc, [ip, #3524]!
    9890:	e28fc600 	add	ip, pc, #0	; 0x0
    9894:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9898:	e5bcfdbc 	ldr	pc, [ip, #3516]!
    989c:	e28fc600 	add	ip, pc, #0	; 0x0
    98a0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98a4:	e5bcfdb4 	ldr	pc, [ip, #3508]!
    98a8:	e28fc600 	add	ip, pc, #0	; 0x0
    98ac:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98b0:	e5bcfdac 	ldr	pc, [ip, #3500]!
    98b4:	e28fc600 	add	ip, pc, #0	; 0x0
    98b8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98bc:	e5bcfda4 	ldr	pc, [ip, #3492]!
    98c0:	e28fc600 	add	ip, pc, #0	; 0x0
    98c4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98c8:	e5bcfd9c 	ldr	pc, [ip, #3484]!
    98cc:	e28fc600 	add	ip, pc, #0	; 0x0
    98d0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98d4:	e5bcfd94 	ldr	pc, [ip, #3476]!
    98d8:	e28fc600 	add	ip, pc, #0	; 0x0
    98dc:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98e0:	e5bcfd8c 	ldr	pc, [ip, #3468]!
    98e4:	e28fc600 	add	ip, pc, #0	; 0x0
    98e8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98ec:	e5bcfd84 	ldr	pc, [ip, #3460]!
    98f0:	e28fc600 	add	ip, pc, #0	; 0x0
    98f4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    98f8:	e5bcfd7c 	ldr	pc, [ip, #3452]!
    98fc:	e28fc600 	add	ip, pc, #0	; 0x0
    9900:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9904:	e5bcfd74 	ldr	pc, [ip, #3444]!
    9908:	e28fc600 	add	ip, pc, #0	; 0x0
    990c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9910:	e5bcfd6c 	ldr	pc, [ip, #3436]!
    9914:	e28fc600 	add	ip, pc, #0	; 0x0
    9918:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    991c:	e5bcfd64 	ldr	pc, [ip, #3428]!
    9920:	e28fc600 	add	ip, pc, #0	; 0x0
    9924:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9928:	e5bcfd5c 	ldr	pc, [ip, #3420]!
    992c:	e28fc600 	add	ip, pc, #0	; 0x0
    9930:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9934:	e5bcfd54 	ldr	pc, [ip, #3412]!
    9938:	e28fc600 	add	ip, pc, #0	; 0x0
    993c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9940:	e5bcfd4c 	ldr	pc, [ip, #3404]!
    9944:	e28fc600 	add	ip, pc, #0	; 0x0
    9948:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    994c:	e5bcfd44 	ldr	pc, [ip, #3396]!
    9950:	e28fc600 	add	ip, pc, #0	; 0x0
    9954:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9958:	e5bcfd3c 	ldr	pc, [ip, #3388]!
    995c:	e28fc600 	add	ip, pc, #0	; 0x0
    9960:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9964:	e5bcfd34 	ldr	pc, [ip, #3380]!
    9968:	e28fc600 	add	ip, pc, #0	; 0x0
    996c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9970:	e5bcfd2c 	ldr	pc, [ip, #3372]!
    9974:	e28fc600 	add	ip, pc, #0	; 0x0
    9978:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    997c:	e5bcfd24 	ldr	pc, [ip, #3364]!
    9980:	e28fc600 	add	ip, pc, #0	; 0x0
    9984:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9988:	e5bcfd1c 	ldr	pc, [ip, #3356]!
    998c:	e28fc600 	add	ip, pc, #0	; 0x0
    9990:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9994:	e5bcfd14 	ldr	pc, [ip, #3348]!
    9998:	e28fc600 	add	ip, pc, #0	; 0x0
    999c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99a0:	e5bcfd0c 	ldr	pc, [ip, #3340]!
    99a4:	e28fc600 	add	ip, pc, #0	; 0x0
    99a8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99ac:	e5bcfd04 	ldr	pc, [ip, #3332]!
    99b0:	e28fc600 	add	ip, pc, #0	; 0x0
    99b4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99b8:	e5bcfcfc 	ldr	pc, [ip, #3324]!
    99bc:	e28fc600 	add	ip, pc, #0	; 0x0
    99c0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99c4:	e5bcfcf4 	ldr	pc, [ip, #3316]!
    99c8:	e28fc600 	add	ip, pc, #0	; 0x0
    99cc:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99d0:	e5bcfcec 	ldr	pc, [ip, #3308]!
    99d4:	e28fc600 	add	ip, pc, #0	; 0x0
    99d8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99dc:	e5bcfce4 	ldr	pc, [ip, #3300]!
    99e0:	e28fc600 	add	ip, pc, #0	; 0x0
    99e4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99e8:	e5bcfcdc 	ldr	pc, [ip, #3292]!
    99ec:	e28fc600 	add	ip, pc, #0	; 0x0
    99f0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    99f4:	e5bcfcd4 	ldr	pc, [ip, #3284]!
    99f8:	e28fc600 	add	ip, pc, #0	; 0x0
    99fc:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a00:	e5bcfccc 	ldr	pc, [ip, #3276]!
    9a04:	e28fc600 	add	ip, pc, #0	; 0x0
    9a08:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a0c:	e5bcfcc4 	ldr	pc, [ip, #3268]!
    9a10:	e28fc600 	add	ip, pc, #0	; 0x0
    9a14:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a18:	e5bcfcbc 	ldr	pc, [ip, #3260]!
    9a1c:	e28fc600 	add	ip, pc, #0	; 0x0
    9a20:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a24:	e5bcfcb4 	ldr	pc, [ip, #3252]!
    9a28:	e28fc600 	add	ip, pc, #0	; 0x0
    9a2c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a30:	e5bcfcac 	ldr	pc, [ip, #3244]!
    9a34:	e28fc600 	add	ip, pc, #0	; 0x0
    9a38:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a3c:	e5bcfca4 	ldr	pc, [ip, #3236]!
    9a40:	e28fc600 	add	ip, pc, #0	; 0x0
    9a44:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a48:	e5bcfc9c 	ldr	pc, [ip, #3228]!
    9a4c:	e28fc600 	add	ip, pc, #0	; 0x0
    9a50:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a54:	e5bcfc94 	ldr	pc, [ip, #3220]!
    9a58:	e28fc600 	add	ip, pc, #0	; 0x0
    9a5c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a60:	e5bcfc8c 	ldr	pc, [ip, #3212]!
    9a64:	e28fc600 	add	ip, pc, #0	; 0x0
    9a68:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a6c:	e5bcfc84 	ldr	pc, [ip, #3204]!
    9a70:	e28fc600 	add	ip, pc, #0	; 0x0
    9a74:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a78:	e5bcfc7c 	ldr	pc, [ip, #3196]!
    9a7c:	e28fc600 	add	ip, pc, #0	; 0x0
    9a80:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a84:	e5bcfc74 	ldr	pc, [ip, #3188]!
    9a88:	e28fc600 	add	ip, pc, #0	; 0x0
    9a8c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a90:	e5bcfc6c 	ldr	pc, [ip, #3180]!
    9a94:	e28fc600 	add	ip, pc, #0	; 0x0
    9a98:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9a9c:	e5bcfc64 	ldr	pc, [ip, #3172]!
    9aa0:	e28fc600 	add	ip, pc, #0	; 0x0
    9aa4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9aa8:	e5bcfc5c 	ldr	pc, [ip, #3164]!
    9aac:	e28fc600 	add	ip, pc, #0	; 0x0
    9ab0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9ab4:	e5bcfc54 	ldr	pc, [ip, #3156]!
    9ab8:	e28fc600 	add	ip, pc, #0	; 0x0
    9abc:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9ac0:	e5bcfc4c 	ldr	pc, [ip, #3148]!
    9ac4:	e28fc600 	add	ip, pc, #0	; 0x0
    9ac8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9acc:	e5bcfc44 	ldr	pc, [ip, #3140]!
    9ad0:	e28fc600 	add	ip, pc, #0	; 0x0
    9ad4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9ad8:	e5bcfc3c 	ldr	pc, [ip, #3132]!
    9adc:	e28fc600 	add	ip, pc, #0	; 0x0
    9ae0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9ae4:	e5bcfc34 	ldr	pc, [ip, #3124]!
    9ae8:	e28fc600 	add	ip, pc, #0	; 0x0
    9aec:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9af0:	e5bcfc2c 	ldr	pc, [ip, #3116]!
    9af4:	e28fc600 	add	ip, pc, #0	; 0x0
    9af8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9afc:	e5bcfc24 	ldr	pc, [ip, #3108]!
    9b00:	e28fc600 	add	ip, pc, #0	; 0x0
    9b04:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b08:	e5bcfc1c 	ldr	pc, [ip, #3100]!
    9b0c:	e28fc600 	add	ip, pc, #0	; 0x0
    9b10:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b14:	e5bcfc14 	ldr	pc, [ip, #3092]!
    9b18:	e28fc600 	add	ip, pc, #0	; 0x0
    9b1c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b20:	e5bcfc0c 	ldr	pc, [ip, #3084]!
    9b24:	e28fc600 	add	ip, pc, #0	; 0x0
    9b28:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b2c:	e5bcfc04 	ldr	pc, [ip, #3076]!
    9b30:	e28fc600 	add	ip, pc, #0	; 0x0
    9b34:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b38:	e5bcfbfc 	ldr	pc, [ip, #3068]!
    9b3c:	e28fc600 	add	ip, pc, #0	; 0x0
    9b40:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b44:	e5bcfbf4 	ldr	pc, [ip, #3060]!
    9b48:	e28fc600 	add	ip, pc, #0	; 0x0
    9b4c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b50:	e5bcfbec 	ldr	pc, [ip, #3052]!
    9b54:	e28fc600 	add	ip, pc, #0	; 0x0
    9b58:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b5c:	e5bcfbe4 	ldr	pc, [ip, #3044]!
    9b60:	e28fc600 	add	ip, pc, #0	; 0x0
    9b64:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b68:	e5bcfbdc 	ldr	pc, [ip, #3036]!
    9b6c:	e28fc600 	add	ip, pc, #0	; 0x0
    9b70:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b74:	e5bcfbd4 	ldr	pc, [ip, #3028]!
    9b78:	e28fc600 	add	ip, pc, #0	; 0x0
    9b7c:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b80:	e5bcfbcc 	ldr	pc, [ip, #3020]!
    9b84:	e28fc600 	add	ip, pc, #0	; 0x0
    9b88:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b8c:	e5bcfbc4 	ldr	pc, [ip, #3012]!
    9b90:	e28fc600 	add	ip, pc, #0	; 0x0
    9b94:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9b98:	e5bcfbbc 	ldr	pc, [ip, #3004]!
    9b9c:	e28fc600 	add	ip, pc, #0	; 0x0
    9ba0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9ba4:	e5bcfbb4 	ldr	pc, [ip, #2996]!
    9ba8:	e28fc600 	add	ip, pc, #0	; 0x0
    9bac:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9bb0:	e5bcfbac 	ldr	pc, [ip, #2988]!
    9bb4:	e28fc600 	add	ip, pc, #0	; 0x0
    9bb8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9bbc:	e5bcfba4 	ldr	pc, [ip, #2980]!
    9bc0:	e28fc600 	add	ip, pc, #0	; 0x0
    9bc4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9bc8:	e5bcfb9c 	ldr	pc, [ip, #2972]!
    9bcc:	e28fc600 	add	ip, pc, #0	; 0x0
    9bd0:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9bd4:	e5bcfb94 	ldr	pc, [ip, #2964]!
    9bd8:	e28fc600 	add	ip, pc, #0	; 0x0
    9bdc:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9be0:	e5bcfb8c 	ldr	pc, [ip, #2956]!
    9be4:	e28fc600 	add	ip, pc, #0	; 0x0
    9be8:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9bec:	e5bcfb84 	ldr	pc, [ip, #2948]!
    9bf0:	e28fc600 	add	ip, pc, #0	; 0x0
    9bf4:	e28cca0c 	add	ip, ip, #49152	; 0xc000
    9bf8:	e5bcfb7c 	ldr	pc, [ip, #2940]!

Disassembly of section .text:

00009c00 <_start>:
    9c00:	e59fc024 	ldr	ip, [pc, #36]	; 9c2c <_start+0x2c>
    9c04:	e3a0b000 	mov	fp, #0	; 0x0
    9c08:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    9c0c:	e1a0200d 	mov	r2, sp
    9c10:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    9c14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9c18:	e59f0010 	ldr	r0, [pc, #16]	; 9c30 <_start+0x30>
    9c1c:	e59f3010 	ldr	r3, [pc, #16]	; 9c34 <_start+0x34>
    9c20:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    9c24:	ebffff0d 	bl	9860 <_init+0xbc>
    9c28:	ebfffefd 	bl	9824 <_init+0x80>
    9c2c:	0000d57c 	.word	0x0000d57c
    9c30:	0000c6ad 	.word	0x0000c6ad
    9c34:	0000d580 	.word	0x0000d580

00009c38 <call_gmon_start>:
    9c38:	e59f3014 	ldr	r3, [pc, #20]	; 9c54 <call_gmon_start+0x1c>
    9c3c:	e59f2014 	ldr	r2, [pc, #20]	; 9c58 <call_gmon_start+0x20>
    9c40:	e08f3003 	add	r3, pc, r3
    9c44:	e7931002 	ldr	r1, [r3, r2]
    9c48:	e3510000 	cmp	r1, #0	; 0x0
    9c4c:	012fff1e 	bxeq	lr
    9c50:	eaffff0e 	b	9890 <_init+0xec>
    9c54:	0000c9bc 	.word	0x0000c9bc
    9c58:	00000174 	.word	0x00000174

00009c5c <__do_global_dtors_aux>:
    9c5c:	e59f2010 	ldr	r2, [pc, #16]	; 9c74 <__do_global_dtors_aux+0x18>
    9c60:	e5d23000 	ldrb	r3, [r2]
    9c64:	e3530000 	cmp	r3, #0	; 0x0
    9c68:	03a03001 	moveq	r3, #1	; 0x1
    9c6c:	05c23000 	strbeq	r3, [r2]
    9c70:	e12fff1e 	bx	lr
    9c74:	000167c8 	.word	0x000167c8

00009c78 <frame_dummy>:
    9c78:	e59f0020 	ldr	r0, [pc, #32]	; 9ca0 <frame_dummy+0x28>
    9c7c:	e92d4010 	push	{r4, lr}
    9c80:	e5903000 	ldr	r3, [r0]
    9c84:	e3530000 	cmp	r3, #0	; 0x0
    9c88:	08bd8010 	popeq	{r4, pc}
    9c8c:	e59f3010 	ldr	r3, [pc, #16]	; 9ca4 <frame_dummy+0x2c>
    9c90:	e3530000 	cmp	r3, #0	; 0x0
    9c94:	08bd8010 	popeq	{r4, pc}
    9c98:	e12fff33 	blx	r3
    9c9c:	e8bd8010 	pop	{r4, pc}
    9ca0:	000164d0 	.word	0x000164d0
    9ca4:	00000000 	.word	0x00000000

00009ca8 <_Z41__static_initialization_and_destruction_0ii>:
}

int FfWriterEngine::AppendMemoryData(void)
{
  return SaveMemoryConsumption(GetMemoryConsumption());
}
    9ca8:	b580      	push	{r7, lr}
    9caa:	b082      	sub	sp, #8
    9cac:	af00      	add	r7, sp, #0
    9cae:	6078      	str	r0, [r7, #4]
    9cb0:	6039      	str	r1, [r7, #0]
    9cb2:	687b      	ldr	r3, [r7, #4]
    9cb4:	2b01      	cmp	r3, #1
    9cb6:	d10d      	bne.n	9cd4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    9cb8:	683a      	ldr	r2, [r7, #0]
    9cba:	4b08      	ldr	r3, [pc, #32]	(9cdc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    9cbc:	429a      	cmp	r2, r3
    9cbe:	d109      	bne.n	9cd4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
  extern wostream wclog;	///< Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    9cc0:	4b07      	ldr	r3, [pc, #28]	(9ce0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    9cc2:	1c18      	adds	r0, r3, #0
    9cc4:	f7ff ee08 	blx	98d8 <_init+0x134>
    9cc8:	4906      	ldr	r1, [pc, #24]	(9ce4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    9cca:	4b05      	ldr	r3, [pc, #20]	(9ce0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    9ccc:	4a06      	ldr	r2, [pc, #24]	(9ce8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    9cce:	1c18      	adds	r0, r3, #0
    9cd0:	f7ff eefe 	blx	9ad0 <_init+0x32c>
    9cd4:	46bd      	mov	sp, r7
    9cd6:	b002      	add	sp, #8
    9cd8:	bd80      	pop	{r7, pc}
    9cda:	46c0      	nop			(mov r8, r8)
    9cdc:	0000ffff 	.word	0x0000ffff
    9ce0:	000167c9 	.word	0x000167c9
    9ce4:	00009938 	.word	0x00009938
    9ce8:	00016780 	.word	0x00016780

00009cec <_GLOBAL__I__ZN14FfWriterEngineC2Ev>:
    9cec:	b580      	push	{r7, lr}
    9cee:	af00      	add	r7, sp, #0
    9cf0:	4b03      	ldr	r3, [pc, #12]	(9d00 <_GLOBAL__I__ZN14FfWriterEngineC2Ev+0x14>)
    9cf2:	2001      	movs	r0, #1
    9cf4:	1c19      	adds	r1, r3, #0
    9cf6:	f7ff ffd7 	bl	9ca8 <_Z41__static_initialization_and_destruction_0ii>
    9cfa:	46bd      	mov	sp, r7
    9cfc:	bd80      	pop	{r7, pc}
    9cfe:	46c0      	nop			(mov r8, r8)
    9d00:	0000ffff 	.word	0x0000ffff

00009d04 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi>:
    }

  return -1;
}

int FfWriterEngine::SaveMemoryConsumption(int data)
    9d04:	b5b0      	push	{r4, r5, r7, lr}
    9d06:	4c1b      	ldr	r4, [pc, #108]	(9d74 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x70>)
    9d08:	44a5      	add	sp, r4
    9d0a:	af00      	add	r7, sp, #0
    9d0c:	6078      	str	r0, [r7, #4]
    9d0e:	6039      	str	r1, [r7, #0]
{
  char ostr[BUF_SIZE];
  sprintf(ostr, "%d\n", data);
    9d10:	1c3b      	adds	r3, r7, #0
    9d12:	3308      	adds	r3, #8
    9d14:	4a18      	ldr	r2, [pc, #96]	(9d78 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x74>)
    9d16:	683c      	ldr	r4, [r7, #0]
    9d18:	1c18      	adds	r0, r3, #0
    9d1a:	1c11      	adds	r1, r2, #0
    9d1c:	1c22      	adds	r2, r4, #0
    9d1e:	f7ff ef62 	blx	9be4 <_init+0x440>

  OutMemData->AppendData(ostr);
    9d22:	687b      	ldr	r3, [r7, #4]
    9d24:	685d      	ldr	r5, [r3, #4]
    9d26:	4915      	ldr	r1, [pc, #84]	(9d7c <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x78>)
    9d28:	187b      	adds	r3, r7, r1
    9d2a:	1c18      	adds	r0, r3, #0
    9d2c:	f7ff ef2a 	blx	9b84 <_init+0x3e0>
    9d30:	4a13      	ldr	r2, [pc, #76]	(9d80 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x7c>)
    9d32:	18bb      	adds	r3, r7, r2
    9d34:	1c3a      	adds	r2, r7, #0
    9d36:	3208      	adds	r2, #8
    9d38:	4910      	ldr	r1, [pc, #64]	(9d7c <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x78>)
    9d3a:	187c      	adds	r4, r7, r1
    9d3c:	1c18      	adds	r0, r3, #0
    9d3e:	1c11      	adds	r1, r2, #0
    9d40:	1c22      	adds	r2, r4, #0
    9d42:	f7ff ee78 	blx	9a34 <_init+0x290>
    9d46:	4a0e      	ldr	r2, [pc, #56]	(9d80 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x7c>)
    9d48:	18bb      	adds	r3, r7, r2
    9d4a:	1c28      	adds	r0, r5, #0
    9d4c:	1c19      	adds	r1, r3, #0
    9d4e:	f002 fee3 	bl	cb18 <_ZN9arlogging7Logging10AppendDataESs>
    9d52:	490b      	ldr	r1, [pc, #44]	(9d80 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x7c>)
    9d54:	187b      	adds	r3, r7, r1
    9d56:	1c18      	adds	r0, r3, #0
    9d58:	f7ff ee00 	blx	995c <_init+0x1b8>
    9d5c:	4a07      	ldr	r2, [pc, #28]	(9d7c <_ZN14FfWriterEngine21SaveMemoryConsumptionEi+0x78>)
    9d5e:	18bb      	adds	r3, r7, r2
    9d60:	1c18      	adds	r0, r3, #0
    9d62:	f7ff eeaa 	blx	9ab8 <_init+0x314>

  return 0;
    9d66:	2300      	movs	r3, #0
}
    9d68:	1c18      	adds	r0, r3, #0
    9d6a:	46bd      	mov	sp, r7
    9d6c:	2381      	movs	r3, #129
    9d6e:	011b      	lsls	r3, r3, #4
    9d70:	449d      	add	sp, r3
    9d72:	bdb0      	pop	{r4, r5, r7, pc}
    9d74:	fffff7f0 	.word	0xfffff7f0
    9d78:	0000d5f8 	.word	0x0000d5f8
    9d7c:	0000080f 	.word	0x0000080f
    9d80:	00000808 	.word	0x00000808

00009d84 <_ZN14FfWriterEngine19RemoveNonDigitCharsESs>:
  avformat_network_init();

  return 0;
}

string FfWriterEngine::RemoveNonDigitChars(string inpus_str)
    9d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d86:	b085      	sub	sp, #20
    9d88:	af00      	add	r7, sp, #0
    9d8a:	1c05      	adds	r5, r0, #0
    9d8c:	6079      	str	r1, [r7, #4]
    9d8e:	603a      	str	r2, [r7, #0]
{
  inpus_str.erase(remove_if(inpus_str.begin(), inpus_str.end(), not1(ptr_fun(static_cast<int(*)(int)>(isdigit)))), inpus_str.end());
    9d90:	683b      	ldr	r3, [r7, #0]
    9d92:	1c18      	adds	r0, r3, #0
    9d94:	f7ff ef02 	blx	9b9c <_init+0x3f8>
    9d98:	1c03      	adds	r3, r0, #0
    9d9a:	1c1c      	adds	r4, r3, #0
    9d9c:	683b      	ldr	r3, [r7, #0]
    9d9e:	1c18      	adds	r0, r3, #0
    9da0:	f7ff ee18 	blx	99d4 <_init+0x230>
    9da4:	1c03      	adds	r3, r0, #0
    9da6:	1c1e      	adds	r6, r3, #0
    9da8:	4b14      	ldr	r3, [pc, #80]	(9dfc <_ZN14FfWriterEngine19RemoveNonDigitCharsESs+0x78>)
    9daa:	1c18      	adds	r0, r3, #0
    9dac:	f000 fdac 	bl	a908 <_ZSt7ptr_funIiiESt25pointer_to_unary_functionIT_T0_EPFS2_S1_E>
    9db0:	1c03      	adds	r3, r0, #0
    9db2:	60fb      	str	r3, [r7, #12]
    9db4:	1c3b      	adds	r3, r7, #0
    9db6:	330c      	adds	r3, #12
    9db8:	1c18      	adds	r0, r3, #0
    9dba:	f000 fdd1 	bl	a960 <_ZSt4not1ISt25pointer_to_unary_functionIiiEESt12unary_negateIT_ERKS3_>
    9dbe:	1c03      	adds	r3, r0, #0
    9dc0:	1c20      	adds	r0, r4, #0
    9dc2:	1c31      	adds	r1, r6, #0
    9dc4:	1c1a      	adds	r2, r3, #0
    9dc6:	f000 ff9b 	bl	ad00 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_>
    9dca:	1c03      	adds	r3, r0, #0
    9dcc:	1c1c      	adds	r4, r3, #0
    9dce:	683b      	ldr	r3, [r7, #0]
    9dd0:	1c18      	adds	r0, r3, #0
    9dd2:	f7ff ee00 	blx	99d4 <_init+0x230>
    9dd6:	1c03      	adds	r3, r0, #0
    9dd8:	1c1a      	adds	r2, r3, #0
    9dda:	683b      	ldr	r3, [r7, #0]
    9ddc:	1c18      	adds	r0, r3, #0
    9dde:	1c21      	adds	r1, r4, #0
    9de0:	f7ff ee88 	blx	9af4 <_init+0x350>

  return inpus_str;
    9de4:	1c2b      	adds	r3, r5, #0
    9de6:	683a      	ldr	r2, [r7, #0]
    9de8:	1c18      	adds	r0, r3, #0
    9dea:	1c11      	adds	r1, r2, #0
    9dec:	f7ff ed86 	blx	98fc <_init+0x158>
}
    9df0:	1c28      	adds	r0, r5, #0
    9df2:	1c28      	adds	r0, r5, #0
    9df4:	46bd      	mov	sp, r7
    9df6:	b005      	add	sp, #20
    9df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dfa:	46c0      	nop			(mov r8, r8)
    9dfc:	0000986c 	.word	0x0000986c

00009e00 <_ZN14FfWriterEngine20GetMemoryConsumptionEv>:

int FfWriterEngine::GetMemoryConsumption(void)
    9e00:	b590      	push	{r4, r7, lr}
    9e02:	4c7e      	ldr	r4, [pc, #504]	(9ffc <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x1fc>)
    9e04:	44a5      	add	sp, r4
    9e06:	af00      	add	r7, sp, #0
    9e08:	60f8      	str	r0, [r7, #12]
{
  const char *class_name = "ProcResource::GetMemoryConsumption";
    9e0a:	4b7d      	ldr	r3, [pc, #500]	(a000 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x200>)
    9e0c:	497d      	ldr	r1, [pc, #500]	(a004 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x204>)
    9e0e:	19c9      	adds	r1, r1, r7
    9e10:	600b      	str	r3, [r1, #0]
  pid_t ppid = getpid();
    9e12:	f7ff ee82 	blx	9b18 <_init+0x374>
    9e16:	1c03      	adds	r3, r0, #0
    9e18:	22a0      	movs	r2, #160
    9e1a:	0112      	lsls	r2, r2, #4
    9e1c:	19d2      	adds	r2, r2, r7
    9e1e:	6013      	str	r3, [r2, #0]
  ifstream proc_file;
    9e20:	2181      	movs	r1, #129
    9e22:	0109      	lsls	r1, r1, #4
    9e24:	187b      	adds	r3, r7, r1
    9e26:	1c18      	adds	r0, r3, #0
    9e28:	f7ff ede6 	blx	99f8 <_init+0x254>
  string line;
    9e2c:	4a76      	ldr	r2, [pc, #472]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9e2e:	18bb      	adds	r3, r7, r2
    9e30:	1c18      	adds	r0, r3, #0
    9e32:	f7ff ecd4 	blx	97dc <_init+0x38>
  char fpath[BUF_SIZE];
  size_t pos;
  int result;

  sprintf(fpath, "/proc/%d/status", (int) ppid);
    9e36:	1c3b      	adds	r3, r7, #0
    9e38:	3310      	adds	r3, #16
    9e3a:	4a74      	ldr	r2, [pc, #464]	(a00c <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x20c>)
    9e3c:	21a0      	movs	r1, #160
    9e3e:	0109      	lsls	r1, r1, #4
    9e40:	19c9      	adds	r1, r1, r7
    9e42:	680c      	ldr	r4, [r1, #0]
    9e44:	1c18      	adds	r0, r3, #0
    9e46:	1c11      	adds	r1, r2, #0
    9e48:	1c22      	adds	r2, r4, #0
    9e4a:	f7ff eecc 	blx	9be4 <_init+0x440>

  proc_file.open(fpath, ios::in);
    9e4e:	2281      	movs	r2, #129
    9e50:	0112      	lsls	r2, r2, #4
    9e52:	18bb      	adds	r3, r7, r2
    9e54:	1c3a      	adds	r2, r7, #0
    9e56:	3210      	adds	r2, #16
    9e58:	1c18      	adds	r0, r3, #0
    9e5a:	1c11      	adds	r1, r2, #0
    9e5c:	2208      	movs	r2, #8
    9e5e:	f7ff ee20 	blx	9aa0 <_init+0x2fc>

  if (proc_file.is_open())
    9e62:	2181      	movs	r1, #129
    9e64:	0109      	lsls	r1, r1, #4
    9e66:	187b      	adds	r3, r7, r1
    9e68:	1c18      	adds	r0, r3, #0
    9e6a:	f7ff eeb6 	blx	9bd8 <_init+0x434>
    9e6e:	1c03      	adds	r3, r0, #0
    9e70:	469c      	mov	ip, r3
    9e72:	4663      	mov	r3, ip
    9e74:	2b00      	cmp	r3, #0
    9e76:	d100      	bne.n	9e7a <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x7a>
    9e78:	e07e      	b.n	9f78 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x178>
    9e7a:	e05d      	b.n	9f38 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x138>
    {
      while (getline(proc_file, line))
        {
          if ((pos = line.find("VmRSS")) != string::npos)
    9e7c:	4a62      	ldr	r2, [pc, #392]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9e7e:	18bb      	adds	r3, r7, r2
    9e80:	4a63      	ldr	r2, [pc, #396]	(a010 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x210>)
    9e82:	1c18      	adds	r0, r3, #0
    9e84:	1c11      	adds	r1, r2, #0
    9e86:	2200      	movs	r2, #0
    9e88:	f7ff ed5c 	blx	9944 <_init+0x1a0>
    9e8c:	1c03      	adds	r3, r0, #0
    9e8e:	4961      	ldr	r1, [pc, #388]	(a014 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x214>)
    9e90:	19c9      	adds	r1, r1, r7
    9e92:	600b      	str	r3, [r1, #0]
    9e94:	4a5f      	ldr	r2, [pc, #380]	(a014 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x214>)
    9e96:	19d2      	adds	r2, r2, r7
    9e98:	6813      	ldr	r3, [r2, #0]
    9e9a:	3301      	adds	r3, #1
    9e9c:	1e59      	subs	r1, r3, #1
    9e9e:	418b      	sbcs	r3, r1
    9ea0:	061b      	lsls	r3, r3, #24
    9ea2:	0e1b      	lsrs	r3, r3, #24
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d047      	beq.n	9f38 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x138>
            {
              line = RemoveNonDigitChars(line);
    9ea8:	4a5b      	ldr	r2, [pc, #364]	(a018 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x218>)
    9eaa:	18bb      	adds	r3, r7, r2
    9eac:	4956      	ldr	r1, [pc, #344]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9eae:	187a      	adds	r2, r7, r1
    9eb0:	1c18      	adds	r0, r3, #0
    9eb2:	1c11      	adds	r1, r2, #0
    9eb4:	f7ff ed22 	blx	98fc <_init+0x158>
    9eb8:	2293      	movs	r2, #147
    9eba:	0112      	lsls	r2, r2, #4
    9ebc:	18bb      	adds	r3, r7, r2
    9ebe:	68fa      	ldr	r2, [r7, #12]
    9ec0:	4955      	ldr	r1, [pc, #340]	(a018 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x218>)
    9ec2:	187c      	adds	r4, r7, r1
    9ec4:	1c18      	adds	r0, r3, #0
    9ec6:	1c11      	adds	r1, r2, #0
    9ec8:	1c22      	adds	r2, r4, #0
    9eca:	f7ff ff5b 	bl	9d84 <_ZN14FfWriterEngine19RemoveNonDigitCharsESs>
    9ece:	4a4e      	ldr	r2, [pc, #312]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9ed0:	18bb      	adds	r3, r7, r2
    9ed2:	2193      	movs	r1, #147
    9ed4:	0109      	lsls	r1, r1, #4
    9ed6:	187a      	adds	r2, r7, r1
    9ed8:	1c18      	adds	r0, r3, #0
    9eda:	1c11      	adds	r1, r2, #0
    9edc:	f7ff ee6a 	blx	9bb4 <_init+0x410>
    9ee0:	2293      	movs	r2, #147
    9ee2:	0112      	lsls	r2, r2, #4
    9ee4:	18bb      	adds	r3, r7, r2
    9ee6:	1c18      	adds	r0, r3, #0
    9ee8:	f7ff ed38 	blx	995c <_init+0x1b8>
    9eec:	494a      	ldr	r1, [pc, #296]	(a018 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x218>)
    9eee:	187b      	adds	r3, r7, r1
    9ef0:	1c18      	adds	r0, r3, #0
    9ef2:	f7ff ed34 	blx	995c <_init+0x1b8>
              istringstream(line) >> result;
    9ef6:	4a49      	ldr	r2, [pc, #292]	(a01c <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x21c>)
    9ef8:	18bb      	adds	r3, r7, r2
    9efa:	4943      	ldr	r1, [pc, #268]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9efc:	187a      	adds	r2, r7, r1
    9efe:	1c18      	adds	r0, r3, #0
    9f00:	1c11      	adds	r1, r2, #0
    9f02:	2208      	movs	r2, #8
    9f04:	f7ff ee0e 	blx	9b24 <_init+0x380>
    9f08:	4a44      	ldr	r2, [pc, #272]	(a01c <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x21c>)
    9f0a:	18bb      	adds	r3, r7, r2
    9f0c:	4944      	ldr	r1, [pc, #272]	(a020 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x220>)
    9f0e:	187a      	adds	r2, r7, r1
    9f10:	1c18      	adds	r0, r3, #0
    9f12:	1c11      	adds	r1, r2, #0
    9f14:	f7ff edd6 	blx	9ac4 <_init+0x320>
    9f18:	4a40      	ldr	r2, [pc, #256]	(a01c <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x21c>)
    9f1a:	18bb      	adds	r3, r7, r2
    9f1c:	1c18      	adds	r0, r3, #0
    9f1e:	f7ff edae 	blx	9a7c <_init+0x2d8>
              proc_file.close();
    9f22:	2181      	movs	r1, #129
    9f24:	0109      	lsls	r1, r1, #4
    9f26:	187b      	adds	r3, r7, r1
    9f28:	1c18      	adds	r0, r3, #0
    9f2a:	f7ff ec70 	blx	980c <_init+0x68>
              return result;
    9f2e:	4a3c      	ldr	r2, [pc, #240]	(a020 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x220>)
    9f30:	19d2      	adds	r2, r2, r7
    9f32:	6812      	ldr	r2, [r2, #0]
    9f34:	60ba      	str	r2, [r7, #8]
    9f36:	e050      	b.n	9fda <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x1da>

  proc_file.open(fpath, ios::in);

  if (proc_file.is_open())
    {
      while (getline(proc_file, line))
    9f38:	2181      	movs	r1, #129
    9f3a:	0109      	lsls	r1, r1, #4
    9f3c:	187b      	adds	r3, r7, r1
    9f3e:	4932      	ldr	r1, [pc, #200]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9f40:	187a      	adds	r2, r7, r1
    9f42:	1c18      	adds	r0, r3, #0
    9f44:	1c11      	adds	r1, r2, #0
    9f46:	f7ff ec98 	blx	9878 <_init+0xd4>
    9f4a:	1c03      	adds	r3, r0, #0
    9f4c:	1c1a      	adds	r2, r3, #0
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	3b0c      	subs	r3, #12
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	18d3      	adds	r3, r2, r3
    9f56:	1c18      	adds	r0, r3, #0
    9f58:	f7ff ec7c 	blx	9854 <_init+0xb0>
    9f5c:	1c03      	adds	r3, r0, #0
    9f5e:	1e5a      	subs	r2, r3, #1
    9f60:	4193      	sbcs	r3, r2
    9f62:	061b      	lsls	r3, r3, #24
    9f64:	0e1b      	lsrs	r3, r3, #24
    9f66:	2b00      	cmp	r3, #0
    9f68:	d188      	bne.n	9e7c <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x7c>
              istringstream(line) >> result;
              proc_file.close();
              return result;
            }
        }
      proc_file.close();
    9f6a:	2181      	movs	r1, #129
    9f6c:	0109      	lsls	r1, r1, #4
    9f6e:	187b      	adds	r3, r7, r1
    9f70:	1c18      	adds	r0, r3, #0
    9f72:	f7ff ec4c 	blx	980c <_init+0x68>
    9f76:	e02b      	b.n	9fd0 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x1d0>
    }
  else
    {
      AppendLog("Error opening file with process status!\n", class_name);
    9f78:	4a2a      	ldr	r2, [pc, #168]	(a024 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x224>)
    9f7a:	18bb      	adds	r3, r7, r2
    9f7c:	1c18      	adds	r0, r3, #0
    9f7e:	f7ff ee02 	blx	9b84 <_init+0x3e0>
    9f82:	4929      	ldr	r1, [pc, #164]	(a028 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x228>)
    9f84:	187b      	adds	r3, r7, r1
    9f86:	4a29      	ldr	r2, [pc, #164]	(a02c <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x22c>)
    9f88:	4926      	ldr	r1, [pc, #152]	(a024 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x224>)
    9f8a:	187c      	adds	r4, r7, r1
    9f8c:	1c18      	adds	r0, r3, #0
    9f8e:	1c11      	adds	r1, r2, #0
    9f90:	1c22      	adds	r2, r4, #0
    9f92:	f7ff ed50 	blx	9a34 <_init+0x290>
    9f96:	229f      	movs	r2, #159
    9f98:	0112      	lsls	r2, r2, #4
    9f9a:	18bb      	adds	r3, r7, r2
    9f9c:	4922      	ldr	r1, [pc, #136]	(a028 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x228>)
    9f9e:	187a      	adds	r2, r7, r1
    9fa0:	4918      	ldr	r1, [pc, #96]	(a004 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x204>)
    9fa2:	19c9      	adds	r1, r1, r7
    9fa4:	680c      	ldr	r4, [r1, #0]
    9fa6:	1c18      	adds	r0, r3, #0
    9fa8:	1c11      	adds	r1, r2, #0
    9faa:	1c22      	adds	r2, r4, #0
    9fac:	f002 f946 	bl	c23c <_Z9AppendLogSsPKc>
    9fb0:	229f      	movs	r2, #159
    9fb2:	0112      	lsls	r2, r2, #4
    9fb4:	18bb      	adds	r3, r7, r2
    9fb6:	1c18      	adds	r0, r3, #0
    9fb8:	f7ff ecd0 	blx	995c <_init+0x1b8>
    9fbc:	491a      	ldr	r1, [pc, #104]	(a028 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x228>)
    9fbe:	187b      	adds	r3, r7, r1
    9fc0:	1c18      	adds	r0, r3, #0
    9fc2:	f7ff eccc 	blx	995c <_init+0x1b8>
    9fc6:	4a17      	ldr	r2, [pc, #92]	(a024 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x224>)
    9fc8:	18bb      	adds	r3, r7, r2
    9fca:	1c18      	adds	r0, r3, #0
    9fcc:	f7ff ed74 	blx	9ab8 <_init+0x314>
    }

  return -1;
    9fd0:	2301      	movs	r3, #1
    9fd2:	60bb      	str	r3, [r7, #8]
    9fd4:	68b9      	ldr	r1, [r7, #8]
    9fd6:	4249      	negs	r1, r1
    9fd8:	60b9      	str	r1, [r7, #8]
    9fda:	4a0b      	ldr	r2, [pc, #44]	(a008 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x208>)
    9fdc:	18bb      	adds	r3, r7, r2
    9fde:	1c18      	adds	r0, r3, #0
    9fe0:	f7ff ecbc 	blx	995c <_init+0x1b8>
    9fe4:	2181      	movs	r1, #129
    9fe6:	0109      	lsls	r1, r1, #4
    9fe8:	187b      	adds	r3, r7, r1
    9fea:	1c18      	adds	r0, r3, #0
    9fec:	f7ff ed28 	blx	9a40 <_init+0x29c>
    9ff0:	68bb      	ldr	r3, [r7, #8]
}
    9ff2:	1c18      	adds	r0, r3, #0
    9ff4:	46bd      	mov	sp, r7
    9ff6:	4b0e      	ldr	r3, [pc, #56]	(a030 <_ZN14FfWriterEngine20GetMemoryConsumptionEv+0x230>)
    9ff8:	449d      	add	sp, r3
    9ffa:	bd90      	pop	{r4, r7, pc}
    9ffc:	fffff5f4 	.word	0xfffff5f4
    a000:	0000d5fc 	.word	0x0000d5fc
    a004:	000009fc 	.word	0x000009fc
    a008:	0000092c 	.word	0x0000092c
    a00c:	0000d620 	.word	0x0000d620
    a010:	0000d630 	.word	0x0000d630
    a014:	00000a04 	.word	0x00000a04
    a018:	00000934 	.word	0x00000934
    a01c:	00000938 	.word	0x00000938
    a020:	00000928 	.word	0x00000928
    a024:	000009fb 	.word	0x000009fb
    a028:	000009f4 	.word	0x000009f4
    a02c:	0000d638 	.word	0x0000d638
    a030:	00000a0c 	.word	0x00000a0c

0000a034 <_ZN14FfWriterEngine16AppendMemoryDataEv>:
  OutMemData->AppendData(ostr);

  return 0;
}

int FfWriterEngine::AppendMemoryData(void)
    a034:	b580      	push	{r7, lr}
    a036:	b082      	sub	sp, #8
    a038:	af00      	add	r7, sp, #0
    a03a:	6078      	str	r0, [r7, #4]
{
  return SaveMemoryConsumption(GetMemoryConsumption());
    a03c:	687b      	ldr	r3, [r7, #4]
    a03e:	1c18      	adds	r0, r3, #0
    a040:	f7ff fede 	bl	9e00 <_ZN14FfWriterEngine20GetMemoryConsumptionEv>
    a044:	1c02      	adds	r2, r0, #0
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	1c18      	adds	r0, r3, #0
    a04a:	1c11      	adds	r1, r2, #0
    a04c:	f7ff fe5a 	bl	9d04 <_ZN14FfWriterEngine21SaveMemoryConsumptionEi>
    a050:	1c03      	adds	r3, r0, #0
    a052:	469c      	mov	ip, r3
    a054:	4663      	mov	r3, ip
}
    a056:	1c18      	adds	r0, r3, #0
    a058:	46bd      	mov	sp, r7
    a05a:	b002      	add	sp, #8
    a05c:	bd80      	pop	{r7, pc}
    a05e:	46c0      	nop			(mov r8, r8)

0000a060 <_ZN14FfWriterEngine10FfmpegInitEv>:
  sprintf(str, "DEBUG: Slot '%d' was stopped.\n", slot);
  AppendLog(str, class_name);
  return 0;
}

int FfWriterEngine::FfmpegInit()
    a060:	b580      	push	{r7, lr}
    a062:	b082      	sub	sp, #8
    a064:	af00      	add	r7, sp, #0
    a066:	6078      	str	r0, [r7, #4]
{
  av_log_set_level(AV_LOG_INFO);
    a068:	2020      	movs	r0, #32
    a06a:	f7ff ec8a 	blx	9980 <_init+0x1dc>

  avcodec_register_all();
    a06e:	f7ff ed7e 	blx	9b6c <_init+0x3c8>
  av_register_all();
    a072:	f7ff ec80 	blx	9974 <_init+0x1d0>
  avformat_network_init();
    a076:	f7ff ecd2 	blx	9a1c <_init+0x278>

  return 0;
    a07a:	2300      	movs	r3, #0
}
    a07c:	1c18      	adds	r0, r3, #0
    a07e:	46bd      	mov	sp, r7
    a080:	b002      	add	sp, #8
    a082:	bd80      	pop	{r7, pc}

0000a084 <_ZN14FfWriterEngine11GetRecStateEh>:
  Pipes[1]->SetNeedStop();

  return 0;
}

RecordingState FfWriterEngine::GetRecState(unsigned char slot)
    a084:	b580      	push	{r7, lr}
    a086:	b082      	sub	sp, #8
    a088:	af00      	add	r7, sp, #0
    a08a:	6078      	str	r0, [r7, #4]
    a08c:	1c0b      	adds	r3, r1, #0
    a08e:	1cfa      	adds	r2, r7, #3
    a090:	7013      	strb	r3, [r2, #0]
{
  return Pipes[slot]->GetRecState();
    a092:	1cfb      	adds	r3, r7, #3
    a094:	781b      	ldrb	r3, [r3, #0]
    a096:	687a      	ldr	r2, [r7, #4]
    a098:	3302      	adds	r3, #2
    a09a:	009b      	lsls	r3, r3, #2
    a09c:	589b      	ldr	r3, [r3, r2]
    a09e:	1c18      	adds	r0, r3, #0
    a0a0:	f000 ff62 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a0a4:	1c03      	adds	r3, r0, #0
    a0a6:	469c      	mov	ip, r3
    a0a8:	4663      	mov	r3, ip
}
    a0aa:	1c18      	adds	r0, r3, #0
    a0ac:	46bd      	mov	sp, r7
    a0ae:	b002      	add	sp, #8
    a0b0:	bd80      	pop	{r7, pc}
    a0b2:	46c0      	nop			(mov r8, r8)

0000a0b4 <_ZN14FfWriterEngine14IsNowRecordingEv>:
    return true;
  else
    return false;
}

bool FfWriterEngine::IsNowRecording()
    a0b4:	b580      	push	{r7, lr}
    a0b6:	b084      	sub	sp, #16
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	60f8      	str	r0, [r7, #12]
{
  if ((Pipes[0]->GetRecState() == REC_WRITING) || (Pipes[1]->GetRecState() == REC_WRITING))
    a0bc:	68fb      	ldr	r3, [r7, #12]
    a0be:	689b      	ldr	r3, [r3, #8]
    a0c0:	1c18      	adds	r0, r3, #0
    a0c2:	f000 ff51 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a0c6:	1c03      	adds	r3, r0, #0
    a0c8:	2b03      	cmp	r3, #3
    a0ca:	d007      	beq.n	a0dc <_ZN14FfWriterEngine14IsNowRecordingEv+0x28>
    a0cc:	68fb      	ldr	r3, [r7, #12]
    a0ce:	68db      	ldr	r3, [r3, #12]
    a0d0:	1c18      	adds	r0, r3, #0
    a0d2:	f000 ff49 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a0d6:	1c03      	adds	r3, r0, #0
    a0d8:	2b03      	cmp	r3, #3
    a0da:	d102      	bne.n	a0e2 <_ZN14FfWriterEngine14IsNowRecordingEv+0x2e>
    a0dc:	2301      	movs	r3, #1
    a0de:	607b      	str	r3, [r7, #4]
    a0e0:	e001      	b.n	a0e6 <_ZN14FfWriterEngine14IsNowRecordingEv+0x32>
    a0e2:	2300      	movs	r3, #0
    a0e4:	607b      	str	r3, [r7, #4]
    a0e6:	687b      	ldr	r3, [r7, #4]
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d002      	beq.n	a0f2 <_ZN14FfWriterEngine14IsNowRecordingEv+0x3e>
    return true;
    a0ec:	2301      	movs	r3, #1
    a0ee:	60bb      	str	r3, [r7, #8]
    a0f0:	e001      	b.n	a0f6 <_ZN14FfWriterEngine14IsNowRecordingEv+0x42>
  else
    return false;
    a0f2:	2300      	movs	r3, #0
    a0f4:	60bb      	str	r3, [r7, #8]
    a0f6:	68bb      	ldr	r3, [r7, #8]
}
    a0f8:	1c18      	adds	r0, r3, #0
    a0fa:	46bd      	mov	sp, r7
    a0fc:	b004      	add	sp, #16
    a0fe:	bd80      	pop	{r7, pc}

0000a100 <_ZN14FfWriterEngine19IsNowRecordingToStrEv>:

string FfWriterEngine::IsNowRecordingToStr()
    a100:	b590      	push	{r4, r7, lr}
    a102:	b085      	sub	sp, #20
    a104:	af00      	add	r7, sp, #0
    a106:	6038      	str	r0, [r7, #0]
    a108:	6079      	str	r1, [r7, #4]
{
  if (IsNowRecording())
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	1c18      	adds	r0, r3, #0
    a10e:	f7ff ffd1 	bl	a0b4 <_ZN14FfWriterEngine14IsNowRecordingEv>
    a112:	1c03      	adds	r3, r0, #0
    a114:	469c      	mov	ip, r3
    a116:	4663      	mov	r3, ip
    a118:	2b00      	cmp	r3, #0
    a11a:	d012      	beq.n	a142 <_ZN14FfWriterEngine19IsNowRecordingToStrEv+0x42>
    return "on";
    a11c:	683c      	ldr	r4, [r7, #0]
    a11e:	1c3b      	adds	r3, r7, #0
    a120:	330e      	adds	r3, #14
    a122:	1c18      	adds	r0, r3, #0
    a124:	f7ff ed2e 	blx	9b84 <_init+0x3e0>
    a128:	4b11      	ldr	r3, [pc, #68]	(a170 <_ZN14FfWriterEngine19IsNowRecordingToStrEv+0x70>)
    a12a:	1c3a      	adds	r2, r7, #0
    a12c:	320e      	adds	r2, #14
    a12e:	1c20      	adds	r0, r4, #0
    a130:	1c19      	adds	r1, r3, #0
    a132:	f7ff ec80 	blx	9a34 <_init+0x290>
    a136:	1c3b      	adds	r3, r7, #0
    a138:	330e      	adds	r3, #14
    a13a:	1c18      	adds	r0, r3, #0
    a13c:	f7ff ecbc 	blx	9ab8 <_init+0x314>
    a140:	e011      	b.n	a166 <_ZN14FfWriterEngine19IsNowRecordingToStrEv+0x66>
  else
    return "off";
    a142:	683c      	ldr	r4, [r7, #0]
    a144:	1c3b      	adds	r3, r7, #0
    a146:	330f      	adds	r3, #15
    a148:	1c18      	adds	r0, r3, #0
    a14a:	f7ff ed1c 	blx	9b84 <_init+0x3e0>
    a14e:	4b09      	ldr	r3, [pc, #36]	(a174 <_ZN14FfWriterEngine19IsNowRecordingToStrEv+0x74>)
    a150:	1c3a      	adds	r2, r7, #0
    a152:	320f      	adds	r2, #15
    a154:	1c20      	adds	r0, r4, #0
    a156:	1c19      	adds	r1, r3, #0
    a158:	f7ff ec6c 	blx	9a34 <_init+0x290>
    a15c:	1c3b      	adds	r3, r7, #0
    a15e:	330f      	adds	r3, #15
    a160:	1c18      	adds	r0, r3, #0
    a162:	f7ff ecaa 	blx	9ab8 <_init+0x314>

}
    a166:	6838      	ldr	r0, [r7, #0]
    a168:	6838      	ldr	r0, [r7, #0]
    a16a:	46bd      	mov	sp, r7
    a16c:	b005      	add	sp, #20
    a16e:	bd90      	pop	{r4, r7, pc}
    a170:	0000d664 	.word	0x0000d664
    a174:	0000d668 	.word	0x0000d668

0000a178 <_ZN14FfWriterEngine9IsNowDownEv>:
    }

  return 0;
}

bool FfWriterEngine::IsNowDown()
    a178:	b590      	push	{r4, r7, lr}
    a17a:	b085      	sub	sp, #20
    a17c:	af00      	add	r7, sp, #0
    a17e:	60f8      	str	r0, [r7, #12]
{
  if ((Pipes[0]->GetRecState() != REC_WRITING) & (Pipes[1]->GetRecState() != REC_WRITING))
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	689b      	ldr	r3, [r3, #8]
    a184:	1c18      	adds	r0, r3, #0
    a186:	f000 feef 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a18a:	1c03      	adds	r3, r0, #0
    a18c:	3b03      	subs	r3, #3
    a18e:	1e5a      	subs	r2, r3, #1
    a190:	4193      	sbcs	r3, r2
    a192:	061b      	lsls	r3, r3, #24
    a194:	0e1c      	lsrs	r4, r3, #24
    a196:	68fb      	ldr	r3, [r7, #12]
    a198:	68db      	ldr	r3, [r3, #12]
    a19a:	1c18      	adds	r0, r3, #0
    a19c:	f000 fee4 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a1a0:	1c03      	adds	r3, r0, #0
    a1a2:	3b03      	subs	r3, #3
    a1a4:	1e5a      	subs	r2, r3, #1
    a1a6:	4193      	sbcs	r3, r2
    a1a8:	061b      	lsls	r3, r3, #24
    a1aa:	0e1b      	lsrs	r3, r3, #24
    a1ac:	4023      	ands	r3, r4
    a1ae:	061b      	lsls	r3, r3, #24
    a1b0:	0e1b      	lsrs	r3, r3, #24
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d002      	beq.n	a1bc <_ZN14FfWriterEngine9IsNowDownEv+0x44>
    return true;
    a1b6:	2301      	movs	r3, #1
    a1b8:	60bb      	str	r3, [r7, #8]
    a1ba:	e001      	b.n	a1c0 <_ZN14FfWriterEngine9IsNowDownEv+0x48>
  else
    return false;
    a1bc:	2200      	movs	r2, #0
    a1be:	60ba      	str	r2, [r7, #8]
    a1c0:	68bb      	ldr	r3, [r7, #8]
}
    a1c2:	1c18      	adds	r0, r3, #0
    a1c4:	46bd      	mov	sp, r7
    a1c6:	b005      	add	sp, #20
    a1c8:	bd90      	pop	{r4, r7, pc}
    a1ca:	46c0      	nop			(mov r8, r8)

0000a1cc <_ZN14FfWriterEngine13StopRecOnSlotEh>:
int FfWriterEngine::FirstStartRec()
{
  return StartRecording(0);
}

int FfWriterEngine::StopRecOnSlot(unsigned char slot)
    a1cc:	b590      	push	{r4, r7, lr}
    a1ce:	b08d      	sub	sp, #52
    a1d0:	af00      	add	r7, sp, #0
    a1d2:	60f8      	str	r0, [r7, #12]
    a1d4:	1c0b      	adds	r3, r1, #0
    a1d6:	1c3a      	adds	r2, r7, #0
    a1d8:	320b      	adds	r2, #11
    a1da:	7013      	strb	r3, [r2, #0]
{
  const char *class_name = "WriterEngine::StopRecOnSlot";
    a1dc:	4b45      	ldr	r3, [pc, #276]	(a2f4 <_ZN14FfWriterEngine13StopRecOnSlotEh+0x128>)
    a1de:	62fb      	str	r3, [r7, #44]

  if (Pipes[slot]->GetRecState() != REC_WRITING)
    a1e0:	1c3b      	adds	r3, r7, #0
    a1e2:	330b      	adds	r3, #11
    a1e4:	781b      	ldrb	r3, [r3, #0]
    a1e6:	68fa      	ldr	r2, [r7, #12]
    a1e8:	3302      	adds	r3, #2
    a1ea:	009b      	lsls	r3, r3, #2
    a1ec:	589b      	ldr	r3, [r3, r2]
    a1ee:	1c18      	adds	r0, r3, #0
    a1f0:	f000 feba 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a1f4:	1c03      	adds	r3, r0, #0
    a1f6:	3b03      	subs	r3, #3
    a1f8:	1e5a      	subs	r2, r3, #1
    a1fa:	4193      	sbcs	r3, r2
    a1fc:	061b      	lsls	r3, r3, #24
    a1fe:	0e1b      	lsrs	r3, r3, #24
    a200:	2b00      	cmp	r3, #0
    a202:	d034      	beq.n	a26e <_ZN14FfWriterEngine13StopRecOnSlotEh+0xa2>
    {
      AppendLog("CRITICAL: Critical error: Need to stop not writing slot. Try it anyway\n", class_name);
    a204:	1c3b      	adds	r3, r7, #0
    a206:	331f      	adds	r3, #31
    a208:	1c18      	adds	r0, r3, #0
    a20a:	f7ff ecbc 	blx	9b84 <_init+0x3e0>
    a20e:	1c3b      	adds	r3, r7, #0
    a210:	3318      	adds	r3, #24
    a212:	4a39      	ldr	r2, [pc, #228]	(a2f8 <_ZN14FfWriterEngine13StopRecOnSlotEh+0x12c>)
    a214:	1c3c      	adds	r4, r7, #0
    a216:	341f      	adds	r4, #31
    a218:	1c18      	adds	r0, r3, #0
    a21a:	1c11      	adds	r1, r2, #0
    a21c:	1c22      	adds	r2, r4, #0
    a21e:	f7ff ec0a 	blx	9a34 <_init+0x290>
    a222:	1c3b      	adds	r3, r7, #0
    a224:	3314      	adds	r3, #20
    a226:	1c3a      	adds	r2, r7, #0
    a228:	3218      	adds	r2, #24
    a22a:	6afc      	ldr	r4, [r7, #44]
    a22c:	1c18      	adds	r0, r3, #0
    a22e:	1c11      	adds	r1, r2, #0
    a230:	1c22      	adds	r2, r4, #0
    a232:	f002 f803 	bl	c23c <_Z9AppendLogSsPKc>
    a236:	1c3b      	adds	r3, r7, #0
    a238:	3314      	adds	r3, #20
    a23a:	1c18      	adds	r0, r3, #0
    a23c:	f7ff eb8e 	blx	995c <_init+0x1b8>
    a240:	1c3b      	adds	r3, r7, #0
    a242:	3318      	adds	r3, #24
    a244:	1c18      	adds	r0, r3, #0
    a246:	f7ff eb8a 	blx	995c <_init+0x1b8>
    a24a:	1c3b      	adds	r3, r7, #0
    a24c:	331f      	adds	r3, #31
    a24e:	1c18      	adds	r0, r3, #0
    a250:	f7ff ec32 	blx	9ab8 <_init+0x314>
      Pipes[slot]->SetNeedStop();
    a254:	1c3b      	adds	r3, r7, #0
    a256:	330b      	adds	r3, #11
    a258:	781b      	ldrb	r3, [r3, #0]
    a25a:	68fa      	ldr	r2, [r7, #12]
    a25c:	3302      	adds	r3, #2
    a25e:	009b      	lsls	r3, r3, #2
    a260:	589b      	ldr	r3, [r3, r2]
    a262:	1c18      	adds	r0, r3, #0
    a264:	f001 f926 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>
      return 1;
    a268:	2301      	movs	r3, #1
    a26a:	607b      	str	r3, [r7, #4]
    a26c:	e03d      	b.n	a2ea <_ZN14FfWriterEngine13StopRecOnSlotEh+0x11e>

    }
  else
    {
      Pipes[slot]->SetNeedStop();
    a26e:	1c3b      	adds	r3, r7, #0
    a270:	330b      	adds	r3, #11
    a272:	781b      	ldrb	r3, [r3, #0]
    a274:	68fa      	ldr	r2, [r7, #12]
    a276:	3302      	adds	r3, #2
    a278:	009b      	lsls	r3, r3, #2
    a27a:	589b      	ldr	r3, [r3, r2]
    a27c:	1c18      	adds	r0, r3, #0
    a27e:	f001 f919 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>
    }

  sprintf(str, "DEBUG: Slot '%d' was stopped.\n", slot);
    a282:	1c3b      	adds	r3, r7, #0
    a284:	330b      	adds	r3, #11
    a286:	781c      	ldrb	r4, [r3, #0]
    a288:	4b1c      	ldr	r3, [pc, #112]	(a2fc <_ZN14FfWriterEngine13StopRecOnSlotEh+0x130>)
    a28a:	4a1d      	ldr	r2, [pc, #116]	(a300 <_ZN14FfWriterEngine13StopRecOnSlotEh+0x134>)
    a28c:	1c18      	adds	r0, r3, #0
    a28e:	1c11      	adds	r1, r2, #0
    a290:	1c22      	adds	r2, r4, #0
    a292:	f7ff eca8 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    a296:	1c3b      	adds	r3, r7, #0
    a298:	332b      	adds	r3, #43
    a29a:	1c18      	adds	r0, r3, #0
    a29c:	f7ff ec72 	blx	9b84 <_init+0x3e0>
    a2a0:	1c3b      	adds	r3, r7, #0
    a2a2:	3324      	adds	r3, #36
    a2a4:	4a15      	ldr	r2, [pc, #84]	(a2fc <_ZN14FfWriterEngine13StopRecOnSlotEh+0x130>)
    a2a6:	1c3c      	adds	r4, r7, #0
    a2a8:	342b      	adds	r4, #43
    a2aa:	1c18      	adds	r0, r3, #0
    a2ac:	1c11      	adds	r1, r2, #0
    a2ae:	1c22      	adds	r2, r4, #0
    a2b0:	f7ff ebc0 	blx	9a34 <_init+0x290>
    a2b4:	1c3b      	adds	r3, r7, #0
    a2b6:	3320      	adds	r3, #32
    a2b8:	1c3a      	adds	r2, r7, #0
    a2ba:	3224      	adds	r2, #36
    a2bc:	6afc      	ldr	r4, [r7, #44]
    a2be:	1c18      	adds	r0, r3, #0
    a2c0:	1c11      	adds	r1, r2, #0
    a2c2:	1c22      	adds	r2, r4, #0
    a2c4:	f001 ffba 	bl	c23c <_Z9AppendLogSsPKc>
    a2c8:	1c3b      	adds	r3, r7, #0
    a2ca:	3320      	adds	r3, #32
    a2cc:	1c18      	adds	r0, r3, #0
    a2ce:	f7ff eb46 	blx	995c <_init+0x1b8>
    a2d2:	1c3b      	adds	r3, r7, #0
    a2d4:	3324      	adds	r3, #36
    a2d6:	1c18      	adds	r0, r3, #0
    a2d8:	f7ff eb40 	blx	995c <_init+0x1b8>
    a2dc:	1c3b      	adds	r3, r7, #0
    a2de:	332b      	adds	r3, #43
    a2e0:	1c18      	adds	r0, r3, #0
    a2e2:	f7ff ebea 	blx	9ab8 <_init+0x314>
  return 0;
    a2e6:	2200      	movs	r2, #0
    a2e8:	607a      	str	r2, [r7, #4]
    a2ea:	687b      	ldr	r3, [r7, #4]
}
    a2ec:	1c18      	adds	r0, r3, #0
    a2ee:	46bd      	mov	sp, r7
    a2f0:	b00d      	add	sp, #52
    a2f2:	bd90      	pop	{r4, r7, pc}
    a2f4:	0000d66c 	.word	0x0000d66c
    a2f8:	0000d688 	.word	0x0000d688
    a2fc:	000167e8 	.word	0x000167e8
    a300:	0000d6d0 	.word	0x0000d6d0

0000a304 <_ZN14FfWriterEngine14StartRecordingEh>:
void FfWriterEngine::SetRecState(unsigned char slot, RecordingState state)
{
  Pipes[slot]->SetRecState(state);
}

int FfWriterEngine::StartRecording(unsigned char slot)
    a304:	b580      	push	{r7, lr}
    a306:	b082      	sub	sp, #8
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
    a30c:	1c0b      	adds	r3, r1, #0
    a30e:	1cfa      	adds	r2, r7, #3
    a310:	7013      	strb	r3, [r2, #0]
{
  return Pipes[slot]->Start();
    a312:	1cfb      	adds	r3, r7, #3
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	687a      	ldr	r2, [r7, #4]
    a318:	3302      	adds	r3, #2
    a31a:	009b      	lsls	r3, r3, #2
    a31c:	589b      	ldr	r3, [r3, r2]
    a31e:	1c18      	adds	r0, r3, #0
    a320:	f001 f876 	bl	b410 <_ZN10FfPipeline5StartEv>
    a324:	1c03      	adds	r3, r0, #0
    a326:	469c      	mov	ip, r3
    a328:	4663      	mov	r3, ip
}
    a32a:	1c18      	adds	r0, r3, #0
    a32c:	46bd      	mov	sp, r7
    a32e:	b002      	add	sp, #8
    a330:	bd80      	pop	{r7, pc}
    a332:	46c0      	nop			(mov r8, r8)

0000a334 <_ZN14FfWriterEngine13FirstStartRecEv>:

int FfWriterEngine::FirstStartRec()
    a334:	b580      	push	{r7, lr}
    a336:	b082      	sub	sp, #8
    a338:	af00      	add	r7, sp, #0
    a33a:	6078      	str	r0, [r7, #4]
{
  return StartRecording(0);
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	1c18      	adds	r0, r3, #0
    a340:	2100      	movs	r1, #0
    a342:	f7ff ffdf 	bl	a304 <_ZN14FfWriterEngine14StartRecordingEh>
    a346:	1c03      	adds	r3, r0, #0
    a348:	469c      	mov	ip, r3
    a34a:	4663      	mov	r3, ip
}
    a34c:	1c18      	adds	r0, r3, #0
    a34e:	46bd      	mov	sp, r7
    a350:	b002      	add	sp, #8
    a352:	bd80      	pop	{r7, pc}

0000a354 <_ZN14FfWriterEngine11SetRecStateEh14RecordingState>:
RecordingState FfWriterEngine::GetRecState(unsigned char slot)
{
  return Pipes[slot]->GetRecState();
}

void FfWriterEngine::SetRecState(unsigned char slot, RecordingState state)
    a354:	b580      	push	{r7, lr}
    a356:	b084      	sub	sp, #16
    a358:	af00      	add	r7, sp, #0
    a35a:	60f8      	str	r0, [r7, #12]
    a35c:	1c0b      	adds	r3, r1, #0
    a35e:	607a      	str	r2, [r7, #4]
    a360:	1c3a      	adds	r2, r7, #0
    a362:	320b      	adds	r2, #11
    a364:	7013      	strb	r3, [r2, #0]
{
  Pipes[slot]->SetRecState(state);
    a366:	1c3b      	adds	r3, r7, #0
    a368:	330b      	adds	r3, #11
    a36a:	781b      	ldrb	r3, [r3, #0]
    a36c:	68fa      	ldr	r2, [r7, #12]
    a36e:	3302      	adds	r3, #2
    a370:	009b      	lsls	r3, r3, #2
    a372:	589b      	ldr	r3, [r3, r2]
    a374:	687a      	ldr	r2, [r7, #4]
    a376:	1c18      	adds	r0, r3, #0
    a378:	1c11      	adds	r1, r2, #0
    a37a:	f000 fdc5 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>
}
    a37e:	46bd      	mov	sp, r7
    a380:	b004      	add	sp, #16
    a382:	bd80      	pop	{r7, pc}

0000a384 <_ZN14FfWriterEngine23SetAllChannelsToStoppedEb>:
    }

  return 0;
}

int FfWriterEngine::SetAllChannelsToStopped(bool NoNeedToDb)
    a384:	b580      	push	{r7, lr}
    a386:	b082      	sub	sp, #8
    a388:	af00      	add	r7, sp, #0
    a38a:	6078      	str	r0, [r7, #4]
    a38c:	1c0b      	adds	r3, r1, #0
    a38e:	1cfa      	adds	r2, r7, #3
    a390:	7013      	strb	r3, [r2, #0]
{
  if (NoNeedToDb)
    a392:	1cfb      	adds	r3, r7, #3
    a394:	781b      	ldrb	r3, [r3, #0]
    a396:	2b00      	cmp	r3, #0
    a398:	d005      	beq.n	a3a6 <_ZN14FfWriterEngine23SetAllChannelsToStoppedEb+0x22>
    Pipes[0]->SetRecState(REC_STOPPED);
    a39a:	687b      	ldr	r3, [r7, #4]
    a39c:	689b      	ldr	r3, [r3, #8]
    a39e:	1c18      	adds	r0, r3, #0
    a3a0:	2102      	movs	r1, #2
    a3a2:	f000 fdb1 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>

  Pipes[0]->SetNeedStop();
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	689b      	ldr	r3, [r3, #8]
    a3aa:	1c18      	adds	r0, r3, #0
    a3ac:	f001 f882 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>

  if (NoNeedToDb)
    a3b0:	1cfb      	adds	r3, r7, #3
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	d005      	beq.n	a3c4 <_ZN14FfWriterEngine23SetAllChannelsToStoppedEb+0x40>
    Pipes[1]->SetRecState(REC_STOPPED);
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	68db      	ldr	r3, [r3, #12]
    a3bc:	1c18      	adds	r0, r3, #0
    a3be:	2102      	movs	r1, #2
    a3c0:	f000 fda2 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>

  Pipes[1]->SetNeedStop();
    a3c4:	687b      	ldr	r3, [r7, #4]
    a3c6:	68db      	ldr	r3, [r3, #12]
    a3c8:	1c18      	adds	r0, r3, #0
    a3ca:	f001 f873 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>

  return 0;
    a3ce:	2300      	movs	r3, #0
}
    a3d0:	1c18      	adds	r0, r3, #0
    a3d2:	46bd      	mov	sp, r7
    a3d4:	b002      	add	sp, #8
    a3d6:	bd80      	pop	{r7, pc}

0000a3d8 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb>:
  else
    return "off";

}

int FfWriterEngine::SetCurrentChannelToStopped(bool NoNeedToDb)
    a3d8:	b590      	push	{r4, r7, lr}
    a3da:	b091      	sub	sp, #68
    a3dc:	af00      	add	r7, sp, #0
    a3de:	6178      	str	r0, [r7, #20]
    a3e0:	1c0b      	adds	r3, r1, #0
    a3e2:	1c3a      	adds	r2, r7, #0
    a3e4:	3213      	adds	r2, #19
    a3e6:	7013      	strb	r3, [r2, #0]
{
  const char *class_name = "WriterEngine::SetCurrentChannelToStopped";
    a3e8:	4b6c      	ldr	r3, [pc, #432]	(a59c <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c4>)
    a3ea:	63fb      	str	r3, [r7, #60]

  if (Pipes[0]->GetRecState() == REC_WRITING)
    a3ec:	697b      	ldr	r3, [r7, #20]
    a3ee:	689b      	ldr	r3, [r3, #8]
    a3f0:	1c18      	adds	r0, r3, #0
    a3f2:	f000 fdb9 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a3f6:	1c03      	adds	r3, r0, #0
    a3f8:	3b03      	subs	r3, #3
    a3fa:	1c1a      	adds	r2, r3, #0
    a3fc:	4253      	negs	r3, r2
    a3fe:	4153      	adcs	r3, r2
    a400:	061b      	lsls	r3, r3, #24
    a402:	0e1b      	lsrs	r3, r3, #24
    a404:	2b00      	cmp	r3, #0
    a406:	d03f      	beq.n	a488 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0xb0>
    {
      sprintf(str, "Cam Channel 0 writing now so set it to stopping\n");
    a408:	4b65      	ldr	r3, [pc, #404]	(a5a0 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c8>)
    a40a:	4a66      	ldr	r2, [pc, #408]	(a5a4 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1cc>)
    a40c:	1c18      	adds	r0, r3, #0
    a40e:	1c11      	adds	r1, r2, #0
    a410:	2231      	movs	r2, #49
    a412:	f7ff eafe 	blx	9a10 <_init+0x26c>
      AppendLog(str, class_name);
    a416:	1c3b      	adds	r3, r7, #0
    a418:	3323      	adds	r3, #35
    a41a:	1c18      	adds	r0, r3, #0
    a41c:	f7ff ebb2 	blx	9b84 <_init+0x3e0>
    a420:	1c3b      	adds	r3, r7, #0
    a422:	331c      	adds	r3, #28
    a424:	4a5e      	ldr	r2, [pc, #376]	(a5a0 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c8>)
    a426:	1c3c      	adds	r4, r7, #0
    a428:	3423      	adds	r4, #35
    a42a:	1c18      	adds	r0, r3, #0
    a42c:	1c11      	adds	r1, r2, #0
    a42e:	1c22      	adds	r2, r4, #0
    a430:	f7ff eb00 	blx	9a34 <_init+0x290>
    a434:	1c3b      	adds	r3, r7, #0
    a436:	3318      	adds	r3, #24
    a438:	1c3a      	adds	r2, r7, #0
    a43a:	321c      	adds	r2, #28
    a43c:	6bfc      	ldr	r4, [r7, #60]
    a43e:	1c18      	adds	r0, r3, #0
    a440:	1c11      	adds	r1, r2, #0
    a442:	1c22      	adds	r2, r4, #0
    a444:	f001 fefa 	bl	c23c <_Z9AppendLogSsPKc>
    a448:	1c3b      	adds	r3, r7, #0
    a44a:	3318      	adds	r3, #24
    a44c:	1c18      	adds	r0, r3, #0
    a44e:	f7ff ea86 	blx	995c <_init+0x1b8>
    a452:	1c3b      	adds	r3, r7, #0
    a454:	331c      	adds	r3, #28
    a456:	1c18      	adds	r0, r3, #0
    a458:	f7ff ea80 	blx	995c <_init+0x1b8>
    a45c:	1c3b      	adds	r3, r7, #0
    a45e:	3323      	adds	r3, #35
    a460:	1c18      	adds	r0, r3, #0
    a462:	f7ff eb2a 	blx	9ab8 <_init+0x314>

      if (NoNeedToDb)
    a466:	1c3b      	adds	r3, r7, #0
    a468:	3313      	adds	r3, #19
    a46a:	781b      	ldrb	r3, [r3, #0]
    a46c:	2b00      	cmp	r3, #0
    a46e:	d005      	beq.n	a47c <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0xa4>
        Pipes[0]->SetRecState(REC_STOPPED);
    a470:	697b      	ldr	r3, [r7, #20]
    a472:	689b      	ldr	r3, [r3, #8]
    a474:	1c18      	adds	r0, r3, #0
    a476:	2102      	movs	r1, #2
    a478:	f000 fd46 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>

      Pipes[0]->SetNeedStop();
    a47c:	697b      	ldr	r3, [r7, #20]
    a47e:	689b      	ldr	r3, [r3, #8]
    a480:	1c18      	adds	r0, r3, #0
    a482:	f001 f817 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>
    a486:	e082      	b.n	a58e <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1b6>
    }
  else if (Pipes[1]->GetRecState() == REC_WRITING)
    a488:	697b      	ldr	r3, [r7, #20]
    a48a:	68db      	ldr	r3, [r3, #12]
    a48c:	1c18      	adds	r0, r3, #0
    a48e:	f000 fd6b 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a492:	1c03      	adds	r3, r0, #0
    a494:	3b03      	subs	r3, #3
    a496:	1c1a      	adds	r2, r3, #0
    a498:	4253      	negs	r3, r2
    a49a:	4153      	adcs	r3, r2
    a49c:	061b      	lsls	r3, r3, #24
    a49e:	0e1b      	lsrs	r3, r3, #24
    a4a0:	2b00      	cmp	r3, #0
    a4a2:	d03f      	beq.n	a524 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x14c>
    {
      sprintf(str, "Cam Channel 1 writing now so set it to stopping\n");
    a4a4:	4b3e      	ldr	r3, [pc, #248]	(a5a0 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c8>)
    a4a6:	4a40      	ldr	r2, [pc, #256]	(a5a8 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1d0>)
    a4a8:	1c18      	adds	r0, r3, #0
    a4aa:	1c11      	adds	r1, r2, #0
    a4ac:	2231      	movs	r2, #49
    a4ae:	f7ff eab0 	blx	9a10 <_init+0x26c>
      AppendLog(str, class_name);
    a4b2:	1c3b      	adds	r3, r7, #0
    a4b4:	332f      	adds	r3, #47
    a4b6:	1c18      	adds	r0, r3, #0
    a4b8:	f7ff eb64 	blx	9b84 <_init+0x3e0>
    a4bc:	1c3b      	adds	r3, r7, #0
    a4be:	3328      	adds	r3, #40
    a4c0:	4a37      	ldr	r2, [pc, #220]	(a5a0 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c8>)
    a4c2:	1c3c      	adds	r4, r7, #0
    a4c4:	342f      	adds	r4, #47
    a4c6:	1c18      	adds	r0, r3, #0
    a4c8:	1c11      	adds	r1, r2, #0
    a4ca:	1c22      	adds	r2, r4, #0
    a4cc:	f7ff eab2 	blx	9a34 <_init+0x290>
    a4d0:	1c3b      	adds	r3, r7, #0
    a4d2:	3324      	adds	r3, #36
    a4d4:	1c3a      	adds	r2, r7, #0
    a4d6:	3228      	adds	r2, #40
    a4d8:	6bfc      	ldr	r4, [r7, #60]
    a4da:	1c18      	adds	r0, r3, #0
    a4dc:	1c11      	adds	r1, r2, #0
    a4de:	1c22      	adds	r2, r4, #0
    a4e0:	f001 feac 	bl	c23c <_Z9AppendLogSsPKc>
    a4e4:	1c3b      	adds	r3, r7, #0
    a4e6:	3324      	adds	r3, #36
    a4e8:	1c18      	adds	r0, r3, #0
    a4ea:	f7ff ea38 	blx	995c <_init+0x1b8>
    a4ee:	1c3b      	adds	r3, r7, #0
    a4f0:	3328      	adds	r3, #40
    a4f2:	1c18      	adds	r0, r3, #0
    a4f4:	f7ff ea32 	blx	995c <_init+0x1b8>
    a4f8:	1c3b      	adds	r3, r7, #0
    a4fa:	332f      	adds	r3, #47
    a4fc:	1c18      	adds	r0, r3, #0
    a4fe:	f7ff eadc 	blx	9ab8 <_init+0x314>

      if (NoNeedToDb)
    a502:	1c3b      	adds	r3, r7, #0
    a504:	3313      	adds	r3, #19
    a506:	781b      	ldrb	r3, [r3, #0]
    a508:	2b00      	cmp	r3, #0
    a50a:	d005      	beq.n	a518 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x140>
        Pipes[1]->SetRecState(REC_STOPPED);
    a50c:	697b      	ldr	r3, [r7, #20]
    a50e:	68db      	ldr	r3, [r3, #12]
    a510:	1c18      	adds	r0, r3, #0
    a512:	2102      	movs	r1, #2
    a514:	f000 fcf8 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>

      Pipes[1]->SetNeedStop();
    a518:	697b      	ldr	r3, [r7, #20]
    a51a:	68db      	ldr	r3, [r3, #12]
    a51c:	1c18      	adds	r0, r3, #0
    a51e:	f000 ffc9 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>
    a522:	e034      	b.n	a58e <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1b6>
    }
  else
    {
      sprintf(str, "WARNING: Cam haven't got any recording slots at this time\n");
    a524:	4b1e      	ldr	r3, [pc, #120]	(a5a0 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c8>)
    a526:	4a21      	ldr	r2, [pc, #132]	(a5ac <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1d4>)
    a528:	1c18      	adds	r0, r3, #0
    a52a:	1c11      	adds	r1, r2, #0
    a52c:	223b      	movs	r2, #59
    a52e:	f7ff ea70 	blx	9a10 <_init+0x26c>
      AppendLog(str, class_name);
    a532:	1c3b      	adds	r3, r7, #0
    a534:	333b      	adds	r3, #59
    a536:	1c18      	adds	r0, r3, #0
    a538:	f7ff eb24 	blx	9b84 <_init+0x3e0>
    a53c:	1c3b      	adds	r3, r7, #0
    a53e:	3334      	adds	r3, #52
    a540:	4a17      	ldr	r2, [pc, #92]	(a5a0 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1c8>)
    a542:	1c3c      	adds	r4, r7, #0
    a544:	343b      	adds	r4, #59
    a546:	1c18      	adds	r0, r3, #0
    a548:	1c11      	adds	r1, r2, #0
    a54a:	1c22      	adds	r2, r4, #0
    a54c:	f7ff ea72 	blx	9a34 <_init+0x290>
    a550:	1c3b      	adds	r3, r7, #0
    a552:	3330      	adds	r3, #48
    a554:	1c3a      	adds	r2, r7, #0
    a556:	3234      	adds	r2, #52
    a558:	6bfc      	ldr	r4, [r7, #60]
    a55a:	1c18      	adds	r0, r3, #0
    a55c:	1c11      	adds	r1, r2, #0
    a55e:	1c22      	adds	r2, r4, #0
    a560:	f001 fe6c 	bl	c23c <_Z9AppendLogSsPKc>
    a564:	1c3b      	adds	r3, r7, #0
    a566:	3330      	adds	r3, #48
    a568:	1c18      	adds	r0, r3, #0
    a56a:	f7ff e9f8 	blx	995c <_init+0x1b8>
    a56e:	1c3b      	adds	r3, r7, #0
    a570:	3334      	adds	r3, #52
    a572:	1c18      	adds	r0, r3, #0
    a574:	f7ff e9f2 	blx	995c <_init+0x1b8>
    a578:	1c3b      	adds	r3, r7, #0
    a57a:	333b      	adds	r3, #59
    a57c:	1c18      	adds	r0, r3, #0
    a57e:	f7ff ea9c 	blx	9ab8 <_init+0x314>
      return -1;
    a582:	2301      	movs	r3, #1
    a584:	60fb      	str	r3, [r7, #12]
    a586:	68fa      	ldr	r2, [r7, #12]
    a588:	4252      	negs	r2, r2
    a58a:	60fa      	str	r2, [r7, #12]
    a58c:	e001      	b.n	a592 <_ZN14FfWriterEngine26SetCurrentChannelToStoppedEb+0x1ba>
    }

  return 0;
    a58e:	2300      	movs	r3, #0
    a590:	60fb      	str	r3, [r7, #12]
    a592:	68fb      	ldr	r3, [r7, #12]
}
    a594:	1c18      	adds	r0, r3, #0
    a596:	46bd      	mov	sp, r7
    a598:	b011      	add	sp, #68
    a59a:	bd90      	pop	{r4, r7, pc}
    a59c:	0000d6f0 	.word	0x0000d6f0
    a5a0:	000167e8 	.word	0x000167e8
    a5a4:	0000d71c 	.word	0x0000d71c
    a5a8:	0000d750 	.word	0x0000d750
    a5ac:	0000d784 	.word	0x0000d784

0000a5b0 <_ZN14FfWriterEngine8ContinueEv>:
  Pipes[1]->SetPartnerPipePointer(Pipes[0]);
  TimerCounter = 0;
  OutMemData = new Logging("mem.log", 7);
}

int FfWriterEngine::Continue()
    a5b0:	b590      	push	{r4, r7, lr}
    a5b2:	b08f      	sub	sp, #60
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	60f8      	str	r0, [r7, #12]
{
  const char *class_name = "WriterEngine::Continue";
    a5b8:	4b60      	ldr	r3, [pc, #384]	(a73c <_ZN14FfWriterEngine8ContinueEv+0x18c>)
    a5ba:	637b      	str	r3, [r7, #52]

  if (Pipes[0]->GetRecState() != REC_WRITING)
    a5bc:	68fb      	ldr	r3, [r7, #12]
    a5be:	689b      	ldr	r3, [r3, #8]
    a5c0:	1c18      	adds	r0, r3, #0
    a5c2:	f000 fcd1 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a5c6:	1c03      	adds	r3, r0, #0
    a5c8:	3b03      	subs	r3, #3
    a5ca:	1e5a      	subs	r2, r3, #1
    a5cc:	4193      	sbcs	r3, r2
    a5ce:	061b      	lsls	r3, r3, #24
    a5d0:	0e1b      	lsrs	r3, r3, #24
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d034      	beq.n	a640 <_ZN14FfWriterEngine8ContinueEv+0x90>
    {
      sprintf(str, "DEBUG: Cam Slot 0 not writing now. Start Slot 0 recording.\n");
    a5d6:	4b5a      	ldr	r3, [pc, #360]	(a740 <_ZN14FfWriterEngine8ContinueEv+0x190>)
    a5d8:	4a5a      	ldr	r2, [pc, #360]	(a744 <_ZN14FfWriterEngine8ContinueEv+0x194>)
    a5da:	1c18      	adds	r0, r3, #0
    a5dc:	1c11      	adds	r1, r2, #0
    a5de:	223c      	movs	r2, #60
    a5e0:	f7ff ea16 	blx	9a10 <_init+0x26c>
      AppendLog(str, class_name);
    a5e4:	1c3b      	adds	r3, r7, #0
    a5e6:	331b      	adds	r3, #27
    a5e8:	1c18      	adds	r0, r3, #0
    a5ea:	f7ff eacc 	blx	9b84 <_init+0x3e0>
    a5ee:	1c3b      	adds	r3, r7, #0
    a5f0:	3314      	adds	r3, #20
    a5f2:	4a53      	ldr	r2, [pc, #332]	(a740 <_ZN14FfWriterEngine8ContinueEv+0x190>)
    a5f4:	1c3c      	adds	r4, r7, #0
    a5f6:	341b      	adds	r4, #27
    a5f8:	1c18      	adds	r0, r3, #0
    a5fa:	1c11      	adds	r1, r2, #0
    a5fc:	1c22      	adds	r2, r4, #0
    a5fe:	f7ff ea1a 	blx	9a34 <_init+0x290>
    a602:	1c3b      	adds	r3, r7, #0
    a604:	3310      	adds	r3, #16
    a606:	1c3a      	adds	r2, r7, #0
    a608:	3214      	adds	r2, #20
    a60a:	6b7c      	ldr	r4, [r7, #52]
    a60c:	1c18      	adds	r0, r3, #0
    a60e:	1c11      	adds	r1, r2, #0
    a610:	1c22      	adds	r2, r4, #0
    a612:	f001 fe13 	bl	c23c <_Z9AppendLogSsPKc>
    a616:	1c3b      	adds	r3, r7, #0
    a618:	3310      	adds	r3, #16
    a61a:	1c18      	adds	r0, r3, #0
    a61c:	f7ff e99e 	blx	995c <_init+0x1b8>
    a620:	1c3b      	adds	r3, r7, #0
    a622:	3314      	adds	r3, #20
    a624:	1c18      	adds	r0, r3, #0
    a626:	f7ff e99a 	blx	995c <_init+0x1b8>
    a62a:	1c3b      	adds	r3, r7, #0
    a62c:	331b      	adds	r3, #27
    a62e:	1c18      	adds	r0, r3, #0
    a630:	f7ff ea42 	blx	9ab8 <_init+0x314>

      Pipes[0]->Start();
    a634:	68fb      	ldr	r3, [r7, #12]
    a636:	689b      	ldr	r3, [r3, #8]
    a638:	1c18      	adds	r0, r3, #0
    a63a:	f000 fee9 	bl	b410 <_ZN10FfPipeline5StartEv>
    a63e:	e076      	b.n	a72e <_ZN14FfWriterEngine8ContinueEv+0x17e>
    }
  else if (Pipes[1]->GetRecState() != REC_WRITING)
    a640:	68fb      	ldr	r3, [r7, #12]
    a642:	68db      	ldr	r3, [r3, #12]
    a644:	1c18      	adds	r0, r3, #0
    a646:	f000 fc8f 	bl	af68 <_ZN10FfPipeline11GetRecStateEv>
    a64a:	1c03      	adds	r3, r0, #0
    a64c:	3b03      	subs	r3, #3
    a64e:	1e5a      	subs	r2, r3, #1
    a650:	4193      	sbcs	r3, r2
    a652:	061b      	lsls	r3, r3, #24
    a654:	0e1b      	lsrs	r3, r3, #24
    a656:	2b00      	cmp	r3, #0
    a658:	d034      	beq.n	a6c4 <_ZN14FfWriterEngine8ContinueEv+0x114>
    {
      sprintf(str, "DEBUG: Cam Slot 1 not writing now. Start Slot 1 recording.\n");
    a65a:	4b39      	ldr	r3, [pc, #228]	(a740 <_ZN14FfWriterEngine8ContinueEv+0x190>)
    a65c:	4a3a      	ldr	r2, [pc, #232]	(a748 <_ZN14FfWriterEngine8ContinueEv+0x198>)
    a65e:	1c18      	adds	r0, r3, #0
    a660:	1c11      	adds	r1, r2, #0
    a662:	223c      	movs	r2, #60
    a664:	f7ff e9d4 	blx	9a10 <_init+0x26c>
      AppendLog(str, class_name);
    a668:	1c3b      	adds	r3, r7, #0
    a66a:	3327      	adds	r3, #39
    a66c:	1c18      	adds	r0, r3, #0
    a66e:	f7ff ea8a 	blx	9b84 <_init+0x3e0>
    a672:	1c3b      	adds	r3, r7, #0
    a674:	3320      	adds	r3, #32
    a676:	4a32      	ldr	r2, [pc, #200]	(a740 <_ZN14FfWriterEngine8ContinueEv+0x190>)
    a678:	1c3c      	adds	r4, r7, #0
    a67a:	3427      	adds	r4, #39
    a67c:	1c18      	adds	r0, r3, #0
    a67e:	1c11      	adds	r1, r2, #0
    a680:	1c22      	adds	r2, r4, #0
    a682:	f7ff e9d8 	blx	9a34 <_init+0x290>
    a686:	1c3b      	adds	r3, r7, #0
    a688:	331c      	adds	r3, #28
    a68a:	1c3a      	adds	r2, r7, #0
    a68c:	3220      	adds	r2, #32
    a68e:	6b7c      	ldr	r4, [r7, #52]
    a690:	1c18      	adds	r0, r3, #0
    a692:	1c11      	adds	r1, r2, #0
    a694:	1c22      	adds	r2, r4, #0
    a696:	f001 fdd1 	bl	c23c <_Z9AppendLogSsPKc>
    a69a:	1c3b      	adds	r3, r7, #0
    a69c:	331c      	adds	r3, #28
    a69e:	1c18      	adds	r0, r3, #0
    a6a0:	f7ff e95c 	blx	995c <_init+0x1b8>
    a6a4:	1c3b      	adds	r3, r7, #0
    a6a6:	3320      	adds	r3, #32
    a6a8:	1c18      	adds	r0, r3, #0
    a6aa:	f7ff e958 	blx	995c <_init+0x1b8>
    a6ae:	1c3b      	adds	r3, r7, #0
    a6b0:	3327      	adds	r3, #39
    a6b2:	1c18      	adds	r0, r3, #0
    a6b4:	f7ff ea00 	blx	9ab8 <_init+0x314>

      Pipes[1]->Start();
    a6b8:	68fb      	ldr	r3, [r7, #12]
    a6ba:	68db      	ldr	r3, [r3, #12]
    a6bc:	1c18      	adds	r0, r3, #0
    a6be:	f000 fea7 	bl	b410 <_ZN10FfPipeline5StartEv>
    a6c2:	e034      	b.n	a72e <_ZN14FfWriterEngine8ContinueEv+0x17e>
    }
  else
    {
      sprintf(str, "ERROR: Cam Both recording slots are simultaneous writing! Skip!!! Need attention.\n");
    a6c4:	4b1e      	ldr	r3, [pc, #120]	(a740 <_ZN14FfWriterEngine8ContinueEv+0x190>)
    a6c6:	4a21      	ldr	r2, [pc, #132]	(a74c <_ZN14FfWriterEngine8ContinueEv+0x19c>)
    a6c8:	1c18      	adds	r0, r3, #0
    a6ca:	1c11      	adds	r1, r2, #0
    a6cc:	2253      	movs	r2, #83
    a6ce:	f7ff e9a0 	blx	9a10 <_init+0x26c>
      AppendLog(str, class_name);
    a6d2:	1c3b      	adds	r3, r7, #0
    a6d4:	3333      	adds	r3, #51
    a6d6:	1c18      	adds	r0, r3, #0
    a6d8:	f7ff ea54 	blx	9b84 <_init+0x3e0>
    a6dc:	1c3b      	adds	r3, r7, #0
    a6de:	332c      	adds	r3, #44
    a6e0:	4a17      	ldr	r2, [pc, #92]	(a740 <_ZN14FfWriterEngine8ContinueEv+0x190>)
    a6e2:	1c3c      	adds	r4, r7, #0
    a6e4:	3433      	adds	r4, #51
    a6e6:	1c18      	adds	r0, r3, #0
    a6e8:	1c11      	adds	r1, r2, #0
    a6ea:	1c22      	adds	r2, r4, #0
    a6ec:	f7ff e9a2 	blx	9a34 <_init+0x290>
    a6f0:	1c3b      	adds	r3, r7, #0
    a6f2:	3328      	adds	r3, #40
    a6f4:	1c3a      	adds	r2, r7, #0
    a6f6:	322c      	adds	r2, #44
    a6f8:	6b7c      	ldr	r4, [r7, #52]
    a6fa:	1c18      	adds	r0, r3, #0
    a6fc:	1c11      	adds	r1, r2, #0
    a6fe:	1c22      	adds	r2, r4, #0
    a700:	f001 fd9c 	bl	c23c <_Z9AppendLogSsPKc>
    a704:	1c3b      	adds	r3, r7, #0
    a706:	3328      	adds	r3, #40
    a708:	1c18      	adds	r0, r3, #0
    a70a:	f7ff e928 	blx	995c <_init+0x1b8>
    a70e:	1c3b      	adds	r3, r7, #0
    a710:	332c      	adds	r3, #44
    a712:	1c18      	adds	r0, r3, #0
    a714:	f7ff e922 	blx	995c <_init+0x1b8>
    a718:	1c3b      	adds	r3, r7, #0
    a71a:	3333      	adds	r3, #51
    a71c:	1c18      	adds	r0, r3, #0
    a71e:	f7ff e9cc 	blx	9ab8 <_init+0x314>
      return -1;
    a722:	2301      	movs	r3, #1
    a724:	60bb      	str	r3, [r7, #8]
    a726:	68ba      	ldr	r2, [r7, #8]
    a728:	4252      	negs	r2, r2
    a72a:	60ba      	str	r2, [r7, #8]
    a72c:	e001      	b.n	a732 <_ZN14FfWriterEngine8ContinueEv+0x182>
    }

  return 0;
    a72e:	2300      	movs	r3, #0
    a730:	60bb      	str	r3, [r7, #8]
    a732:	68bb      	ldr	r3, [r7, #8]
}
    a734:	1c18      	adds	r0, r3, #0
    a736:	46bd      	mov	sp, r7
    a738:	b00f      	add	sp, #60
    a73a:	bd90      	pop	{r4, r7, pc}
    a73c:	0000d7c0 	.word	0x0000d7c0
    a740:	000167e8 	.word	0x000167e8
    a744:	0000d7d8 	.word	0x0000d7d8
    a748:	0000d814 	.word	0x0000d814
    a74c:	0000d850 	.word	0x0000d850

0000a750 <_ZN14FfWriterEngineC1Ev>:
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>

FfWriterEngine::FfWriterEngine()
    a750:	b5b0      	push	{r4, r5, r7, lr}
    a752:	b084      	sub	sp, #16
    a754:	af00      	add	r7, sp, #0
    a756:	6078      	str	r0, [r7, #4]
{
  FfmpegInit();
    a758:	687b      	ldr	r3, [r7, #4]
    a75a:	1c18      	adds	r0, r3, #0
    a75c:	f7ff fc80 	bl	a060 <_ZN14FfWriterEngine10FfmpegInitEv>

  Pipes[0] = new FfPipeline(0);
    a760:	2038      	movs	r0, #56
    a762:	f7ff e986 	blx	9a70 <_init+0x2cc>
    a766:	1c03      	adds	r3, r0, #0
    a768:	1c1c      	adds	r4, r3, #0
    a76a:	1c20      	adds	r0, r4, #0
    a76c:	2100      	movs	r1, #0
    a76e:	f000 fb6f 	bl	ae50 <_ZN10FfPipelineC1Eh>
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	609c      	str	r4, [r3, #8]
  Pipes[1] = new FfPipeline(1);
    a776:	2038      	movs	r0, #56
    a778:	f7ff e97a 	blx	9a70 <_init+0x2cc>
    a77c:	1c03      	adds	r3, r0, #0
    a77e:	1c1c      	adds	r4, r3, #0
    a780:	1c20      	adds	r0, r4, #0
    a782:	2101      	movs	r1, #1
    a784:	f000 fb64 	bl	ae50 <_ZN10FfPipelineC1Eh>
    a788:	687b      	ldr	r3, [r7, #4]
    a78a:	60dc      	str	r4, [r3, #12]
  Pipes[0]->SetPartnerPipePointer(Pipes[1]);
    a78c:	687b      	ldr	r3, [r7, #4]
    a78e:	689a      	ldr	r2, [r3, #8]
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	68db      	ldr	r3, [r3, #12]
    a794:	1c10      	adds	r0, r2, #0
    a796:	1c19      	adds	r1, r3, #0
    a798:	f000 fbaa 	bl	aef0 <_ZN10FfPipeline21SetPartnerPipePointerEPv>
  Pipes[1]->SetPartnerPipePointer(Pipes[0]);
    a79c:	687b      	ldr	r3, [r7, #4]
    a79e:	68da      	ldr	r2, [r3, #12]
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	689b      	ldr	r3, [r3, #8]
    a7a4:	1c10      	adds	r0, r2, #0
    a7a6:	1c19      	adds	r1, r3, #0
    a7a8:	f000 fba2 	bl	aef0 <_ZN10FfPipeline21SetPartnerPipePointerEPv>
  TimerCounter = 0;
    a7ac:	687a      	ldr	r2, [r7, #4]
    a7ae:	2300      	movs	r3, #0
    a7b0:	6013      	str	r3, [r2, #0]
  OutMemData = new Logging("mem.log", 7);
    a7b2:	1c3b      	adds	r3, r7, #0
    a7b4:	330f      	adds	r3, #15
    a7b6:	1c18      	adds	r0, r3, #0
    a7b8:	f7ff e9e4 	blx	9b84 <_init+0x3e0>
    a7bc:	1c3b      	adds	r3, r7, #0
    a7be:	3308      	adds	r3, #8
    a7c0:	4a12      	ldr	r2, [pc, #72]	(a80c <_ZN14FfWriterEngineC1Ev+0xbc>)
    a7c2:	1c3c      	adds	r4, r7, #0
    a7c4:	340f      	adds	r4, #15
    a7c6:	1c18      	adds	r0, r3, #0
    a7c8:	1c11      	adds	r1, r2, #0
    a7ca:	1c22      	adds	r2, r4, #0
    a7cc:	f7ff e932 	blx	9a34 <_init+0x290>
    a7d0:	1c3d      	adds	r5, r7, #0
    a7d2:	3508      	adds	r5, #8
    a7d4:	2018      	movs	r0, #24
    a7d6:	f7ff e94c 	blx	9a70 <_init+0x2cc>
    a7da:	1c03      	adds	r3, r0, #0
    a7dc:	1c1c      	adds	r4, r3, #0
    a7de:	1c20      	adds	r0, r4, #0
    a7e0:	1c29      	adds	r1, r5, #0
    a7e2:	2207      	movs	r2, #7
    a7e4:	f002 fc7a 	bl	d0dc <_ZN9arlogging7LoggingC1ESsi>
    a7e8:	687b      	ldr	r3, [r7, #4]
    a7ea:	605c      	str	r4, [r3, #4]
    a7ec:	1c3b      	adds	r3, r7, #0
    a7ee:	3308      	adds	r3, #8
    a7f0:	1c18      	adds	r0, r3, #0
    a7f2:	f7ff e8b4 	blx	995c <_init+0x1b8>
    a7f6:	1c3b      	adds	r3, r7, #0
    a7f8:	330f      	adds	r3, #15
    a7fa:	1c18      	adds	r0, r3, #0
    a7fc:	f7ff e95c 	blx	9ab8 <_init+0x314>
}
    a800:	687b      	ldr	r3, [r7, #4]
    a802:	1c18      	adds	r0, r3, #0
    a804:	46bd      	mov	sp, r7
    a806:	b004      	add	sp, #16
    a808:	bdb0      	pop	{r4, r5, r7, pc}
    a80a:	46c0      	nop			(mov r8, r8)
    a80c:	0000d8a4 	.word	0x0000d8a4

0000a810 <_ZN14FfWriterEngineC2Ev>:
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>

FfWriterEngine::FfWriterEngine()
    a810:	b5b0      	push	{r4, r5, r7, lr}
    a812:	b084      	sub	sp, #16
    a814:	af00      	add	r7, sp, #0
    a816:	6078      	str	r0, [r7, #4]
{
  FfmpegInit();
    a818:	687b      	ldr	r3, [r7, #4]
    a81a:	1c18      	adds	r0, r3, #0
    a81c:	f7ff fc20 	bl	a060 <_ZN14FfWriterEngine10FfmpegInitEv>

  Pipes[0] = new FfPipeline(0);
    a820:	2038      	movs	r0, #56
    a822:	f7ff e926 	blx	9a70 <_init+0x2cc>
    a826:	1c03      	adds	r3, r0, #0
    a828:	1c1c      	adds	r4, r3, #0
    a82a:	1c20      	adds	r0, r4, #0
    a82c:	2100      	movs	r1, #0
    a82e:	f000 fb0f 	bl	ae50 <_ZN10FfPipelineC1Eh>
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	609c      	str	r4, [r3, #8]
  Pipes[1] = new FfPipeline(1);
    a836:	2038      	movs	r0, #56
    a838:	f7ff e91a 	blx	9a70 <_init+0x2cc>
    a83c:	1c03      	adds	r3, r0, #0
    a83e:	1c1c      	adds	r4, r3, #0
    a840:	1c20      	adds	r0, r4, #0
    a842:	2101      	movs	r1, #1
    a844:	f000 fb04 	bl	ae50 <_ZN10FfPipelineC1Eh>
    a848:	687b      	ldr	r3, [r7, #4]
    a84a:	60dc      	str	r4, [r3, #12]
  Pipes[0]->SetPartnerPipePointer(Pipes[1]);
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	689a      	ldr	r2, [r3, #8]
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	68db      	ldr	r3, [r3, #12]
    a854:	1c10      	adds	r0, r2, #0
    a856:	1c19      	adds	r1, r3, #0
    a858:	f000 fb4a 	bl	aef0 <_ZN10FfPipeline21SetPartnerPipePointerEPv>
  Pipes[1]->SetPartnerPipePointer(Pipes[0]);
    a85c:	687b      	ldr	r3, [r7, #4]
    a85e:	68da      	ldr	r2, [r3, #12]
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	689b      	ldr	r3, [r3, #8]
    a864:	1c10      	adds	r0, r2, #0
    a866:	1c19      	adds	r1, r3, #0
    a868:	f000 fb42 	bl	aef0 <_ZN10FfPipeline21SetPartnerPipePointerEPv>
  TimerCounter = 0;
    a86c:	687a      	ldr	r2, [r7, #4]
    a86e:	2300      	movs	r3, #0
    a870:	6013      	str	r3, [r2, #0]
  OutMemData = new Logging("mem.log", 7);
    a872:	1c3b      	adds	r3, r7, #0
    a874:	330f      	adds	r3, #15
    a876:	1c18      	adds	r0, r3, #0
    a878:	f7ff e984 	blx	9b84 <_init+0x3e0>
    a87c:	1c3b      	adds	r3, r7, #0
    a87e:	3308      	adds	r3, #8
    a880:	4a12      	ldr	r2, [pc, #72]	(a8cc <_ZN14FfWriterEngineC2Ev+0xbc>)
    a882:	1c3c      	adds	r4, r7, #0
    a884:	340f      	adds	r4, #15
    a886:	1c18      	adds	r0, r3, #0
    a888:	1c11      	adds	r1, r2, #0
    a88a:	1c22      	adds	r2, r4, #0
    a88c:	f7ff e8d2 	blx	9a34 <_init+0x290>
    a890:	1c3d      	adds	r5, r7, #0
    a892:	3508      	adds	r5, #8
    a894:	2018      	movs	r0, #24
    a896:	f7ff e8ec 	blx	9a70 <_init+0x2cc>
    a89a:	1c03      	adds	r3, r0, #0
    a89c:	1c1c      	adds	r4, r3, #0
    a89e:	1c20      	adds	r0, r4, #0
    a8a0:	1c29      	adds	r1, r5, #0
    a8a2:	2207      	movs	r2, #7
    a8a4:	f002 fc1a 	bl	d0dc <_ZN9arlogging7LoggingC1ESsi>
    a8a8:	687b      	ldr	r3, [r7, #4]
    a8aa:	605c      	str	r4, [r3, #4]
    a8ac:	1c3b      	adds	r3, r7, #0
    a8ae:	3308      	adds	r3, #8
    a8b0:	1c18      	adds	r0, r3, #0
    a8b2:	f7ff e854 	blx	995c <_init+0x1b8>
    a8b6:	1c3b      	adds	r3, r7, #0
    a8b8:	330f      	adds	r3, #15
    a8ba:	1c18      	adds	r0, r3, #0
    a8bc:	f7ff e8fc 	blx	9ab8 <_init+0x314>
}
    a8c0:	687b      	ldr	r3, [r7, #4]
    a8c2:	1c18      	adds	r0, r3, #0
    a8c4:	46bd      	mov	sp, r7
    a8c6:	b004      	add	sp, #16
    a8c8:	bdb0      	pop	{r4, r5, r7, pc}
    a8ca:	46c0      	nop			(mov r8, r8)
    a8cc:	0000d8a4 	.word	0x0000d8a4

0000a8d0 <_ZNSt14unary_functionIiiEC2Ev>:
  /**
   *  This is one of the @link s20_3_1_base functor base classes@endlink.
   */
  template<typename _Arg, typename _Result>
    struct unary_function
    {
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b082      	sub	sp, #8
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	6078      	str	r0, [r7, #4]
    a8d8:	687b      	ldr	r3, [r7, #4]
    a8da:	1c18      	adds	r0, r3, #0
    a8dc:	46bd      	mov	sp, r7
    a8de:	b002      	add	sp, #8
    a8e0:	bd80      	pop	{r7, pc}
    a8e2:	46c0      	nop			(mov r8, r8)

0000a8e4 <_ZNSt25pointer_to_unary_functionIiiEC1EPFiiE>:

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
    a8e4:	b580      	push	{r7, lr}
    a8e6:	b082      	sub	sp, #8
    a8e8:	af00      	add	r7, sp, #0
    a8ea:	6078      	str	r0, [r7, #4]
    a8ec:	6039      	str	r1, [r7, #0]
      : _M_ptr(__x) { }
    a8ee:	687b      	ldr	r3, [r7, #4]
    a8f0:	1c18      	adds	r0, r3, #0
    a8f2:	f7ff ffed 	bl	a8d0 <_ZNSt14unary_functionIiiEC2Ev>
    a8f6:	687a      	ldr	r2, [r7, #4]
    a8f8:	683b      	ldr	r3, [r7, #0]
    a8fa:	6013      	str	r3, [r2, #0]
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	1c18      	adds	r0, r3, #0
    a900:	46bd      	mov	sp, r7
    a902:	b002      	add	sp, #8
    a904:	bd80      	pop	{r7, pc}
    a906:	46c0      	nop			(mov r8, r8)

0000a908 <_ZSt7ptr_funIiiESt25pointer_to_unary_functionIT_T0_EPFS2_S1_E>:
    };

  /// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.
  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    a908:	b580      	push	{r7, lr}
    a90a:	b084      	sub	sp, #16
    a90c:	af00      	add	r7, sp, #0
    a90e:	6078      	str	r0, [r7, #4]
    { return pointer_to_unary_function<_Arg, _Result>(__x); }
    a910:	1c3b      	adds	r3, r7, #0
    a912:	330c      	adds	r3, #12
    a914:	687a      	ldr	r2, [r7, #4]
    a916:	1c18      	adds	r0, r3, #0
    a918:	1c11      	adds	r1, r2, #0
    a91a:	f7ff ffe3 	bl	a8e4 <_ZNSt25pointer_to_unary_functionIiiEC1EPFiiE>
    a91e:	68fb      	ldr	r3, [r7, #12]
    a920:	1c18      	adds	r0, r3, #0
    a922:	46bd      	mov	sp, r7
    a924:	b004      	add	sp, #16
    a926:	bd80      	pop	{r7, pc}

0000a928 <_ZNSt14unary_functionIibEC2Ev>:
  /**
   *  This is one of the @link s20_3_1_base functor base classes@endlink.
   */
  template<typename _Arg, typename _Result>
    struct unary_function
    {
    a928:	b580      	push	{r7, lr}
    a92a:	b082      	sub	sp, #8
    a92c:	af00      	add	r7, sp, #0
    a92e:	6078      	str	r0, [r7, #4]
    a930:	687b      	ldr	r3, [r7, #4]
    a932:	1c18      	adds	r0, r3, #0
    a934:	46bd      	mov	sp, r7
    a936:	b002      	add	sp, #8
    a938:	bd80      	pop	{r7, pc}
    a93a:	46c0      	nop			(mov r8, r8)

0000a93c <_ZNSt12unary_negateISt25pointer_to_unary_functionIiiEEC1ERKS1_>:
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }
    a93c:	b580      	push	{r7, lr}
    a93e:	b082      	sub	sp, #8
    a940:	af00      	add	r7, sp, #0
    a942:	6078      	str	r0, [r7, #4]
    a944:	6039      	str	r1, [r7, #0]
    a946:	687b      	ldr	r3, [r7, #4]
    a948:	1c18      	adds	r0, r3, #0
    a94a:	f7ff ffed 	bl	a928 <_ZNSt14unary_functionIibEC2Ev>
    a94e:	683b      	ldr	r3, [r7, #0]
    a950:	681a      	ldr	r2, [r3, #0]
    a952:	687b      	ldr	r3, [r7, #4]
    a954:	601a      	str	r2, [r3, #0]
    a956:	687b      	ldr	r3, [r7, #4]
    a958:	1c18      	adds	r0, r3, #0
    a95a:	46bd      	mov	sp, r7
    a95c:	b002      	add	sp, #8
    a95e:	bd80      	pop	{r7, pc}

0000a960 <_ZSt4not1ISt25pointer_to_unary_functionIiiEESt12unary_negateIT_ERKS3_>:
    };

  /// One of the @link s20_3_5_negators negation functors@endlink.
  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    a960:	b580      	push	{r7, lr}
    a962:	b084      	sub	sp, #16
    a964:	af00      	add	r7, sp, #0
    a966:	6078      	str	r0, [r7, #4]
    { return unary_negate<_Predicate>(__pred); }
    a968:	1c3b      	adds	r3, r7, #0
    a96a:	330c      	adds	r3, #12
    a96c:	687a      	ldr	r2, [r7, #4]
    a96e:	1c18      	adds	r0, r3, #0
    a970:	1c11      	adds	r1, r2, #0
    a972:	f7ff ffe3 	bl	a93c <_ZNSt12unary_negateISt25pointer_to_unary_functionIiiEEC1ERKS1_>
    a976:	68fb      	ldr	r3, [r7, #12]
    a978:	1c18      	adds	r0, r3, #0
    a97a:	46bd      	mov	sp, r7
    a97c:	b004      	add	sp, #16
    a97e:	bd80      	pop	{r7, pc}

0000a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    a980:	b580      	push	{r7, lr}
    a982:	b082      	sub	sp, #8
    a984:	af00      	add	r7, sp, #0
    a986:	6078      	str	r0, [r7, #4]
      {
	++_M_current;
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	681b      	ldr	r3, [r3, #0]
    a98c:	1c5a      	adds	r2, r3, #1
    a98e:	687b      	ldr	r3, [r7, #4]
    a990:	601a      	str	r2, [r3, #0]
	return *this;
    a992:	687b      	ldr	r3, [r7, #4]
      }
    a994:	1c18      	adds	r0, r3, #0
    a996:	46bd      	mov	sp, r7
    a998:	b002      	add	sp, #8
    a99a:	bd80      	pop	{r7, pc}

0000a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    a99c:	b580      	push	{r7, lr}
    a99e:	b082      	sub	sp, #8
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
    a9a4:	687b      	ldr	r3, [r7, #4]
    a9a6:	681b      	ldr	r3, [r3, #0]
    a9a8:	1c18      	adds	r0, r3, #0
    a9aa:	46bd      	mov	sp, r7
    a9ac:	b002      	add	sp, #8
    a9ae:	bd80      	pop	{r7, pc}

0000a9b0 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSsEEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  This function is not a part of the C++ standard but is syntactic
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    a9b0:	b580      	push	{r7, lr}
    a9b2:	b082      	sub	sp, #8
    a9b4:	af00      	add	r7, sp, #0
    a9b6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
    a9b8:	78fb      	ldrb	r3, [r7, #3]
    a9ba:	1c18      	adds	r0, r3, #0
    a9bc:	46bd      	mov	sp, r7
    a9be:	b002      	add	sp, #8
    a9c0:	bd80      	pop	{r7, pc}
    a9c2:	46c0      	nop			(mov r8, r8)

0000a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    a9c4:	b580      	push	{r7, lr}
    a9c6:	b082      	sub	sp, #8
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	1c18      	adds	r0, r3, #0
    a9d0:	46bd      	mov	sp, r7
    a9d2:	b002      	add	sp, #8
    a9d4:	bd80      	pop	{r7, pc}
    a9d6:	46c0      	nop			(mov r8, r8)

0000a9d8 <_ZN9__gnu_cxxmiIPcSsEENS_17__normal_iteratorIT_T0_E15difference_typeERKS5_S8_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    a9d8:	b590      	push	{r4, r7, lr}
    a9da:	b083      	sub	sp, #12
    a9dc:	af00      	add	r7, sp, #0
    a9de:	6078      	str	r0, [r7, #4]
    a9e0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
    a9e2:	687b      	ldr	r3, [r7, #4]
    a9e4:	1c18      	adds	r0, r3, #0
    a9e6:	f7ff ffed 	bl	a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>
    a9ea:	1c03      	adds	r3, r0, #0
    a9ec:	681b      	ldr	r3, [r3, #0]
    a9ee:	1c1c      	adds	r4, r3, #0
    a9f0:	683b      	ldr	r3, [r7, #0]
    a9f2:	1c18      	adds	r0, r3, #0
    a9f4:	f7ff ffe6 	bl	a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>
    a9f8:	1c03      	adds	r3, r0, #0
    a9fa:	681b      	ldr	r3, [r3, #0]
    a9fc:	1ae3      	subs	r3, r4, r3
    a9fe:	1c18      	adds	r0, r3, #0
    aa00:	46bd      	mov	sp, r7
    aa02:	b003      	add	sp, #12
    aa04:	bd90      	pop	{r4, r7, pc}
    aa06:	46c0      	nop			(mov r8, r8)

0000aa08 <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    aa08:	b590      	push	{r4, r7, lr}
    aa0a:	b085      	sub	sp, #20
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	60f8      	str	r0, [r7, #12]
    aa10:	60b9      	str	r1, [r7, #8]
    { return __lhs.base() == __rhs.base(); }
    aa12:	68fb      	ldr	r3, [r7, #12]
    aa14:	1c18      	adds	r0, r3, #0
    aa16:	f7ff ffd5 	bl	a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>
    aa1a:	1c03      	adds	r3, r0, #0
    aa1c:	681c      	ldr	r4, [r3, #0]
    aa1e:	68bb      	ldr	r3, [r7, #8]
    aa20:	1c18      	adds	r0, r3, #0
    aa22:	f7ff ffcf 	bl	a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>
    aa26:	1c03      	adds	r3, r0, #0
    aa28:	681b      	ldr	r3, [r3, #0]
    aa2a:	1ae3      	subs	r3, r4, r3
    aa2c:	1c1a      	adds	r2, r3, #0
    aa2e:	4253      	negs	r3, r2
    aa30:	4153      	adcs	r3, r2
    aa32:	061b      	lsls	r3, r3, #24
    aa34:	0e1b      	lsrs	r3, r3, #24
    aa36:	1c18      	adds	r0, r3, #0
    aa38:	46bd      	mov	sp, r7
    aa3a:	b005      	add	sp, #20
    aa3c:	bd90      	pop	{r4, r7, pc}
    aa3e:	46c0      	nop			(mov r8, r8)

0000aa40 <_ZN9__gnu_cxxneIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    aa40:	b590      	push	{r4, r7, lr}
    aa42:	b085      	sub	sp, #20
    aa44:	af00      	add	r7, sp, #0
    aa46:	60f8      	str	r0, [r7, #12]
    aa48:	60b9      	str	r1, [r7, #8]
    { return __lhs.base() != __rhs.base(); }
    aa4a:	68fb      	ldr	r3, [r7, #12]
    aa4c:	1c18      	adds	r0, r3, #0
    aa4e:	f7ff ffb9 	bl	a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>
    aa52:	1c03      	adds	r3, r0, #0
    aa54:	681c      	ldr	r4, [r3, #0]
    aa56:	68bb      	ldr	r3, [r7, #8]
    aa58:	1c18      	adds	r0, r3, #0
    aa5a:	f7ff ffb3 	bl	a9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSsE4baseEv>
    aa5e:	1c03      	adds	r3, r0, #0
    aa60:	681b      	ldr	r3, [r3, #0]
    aa62:	1ae3      	subs	r3, r4, r3
    aa64:	1e5a      	subs	r2, r3, #1
    aa66:	4193      	sbcs	r3, r2
    aa68:	061b      	lsls	r3, r3, #24
    aa6a:	0e1b      	lsrs	r3, r3, #24
    aa6c:	1c18      	adds	r0, r3, #0
    aa6e:	46bd      	mov	sp, r7
    aa70:	b005      	add	sp, #20
    aa72:	bd90      	pop	{r4, r7, pc}

0000aa74 <_ZNKSt25pointer_to_unary_functionIiiEclEi>:
      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
    aa74:	b580      	push	{r7, lr}
    aa76:	b082      	sub	sp, #8
    aa78:	af00      	add	r7, sp, #0
    aa7a:	6078      	str	r0, [r7, #4]
    aa7c:	6039      	str	r1, [r7, #0]
      { return _M_ptr(__x); }
    aa7e:	687b      	ldr	r3, [r7, #4]
    aa80:	681a      	ldr	r2, [r3, #0]
    aa82:	683b      	ldr	r3, [r7, #0]
    aa84:	1c18      	adds	r0, r3, #0
    aa86:	4790      	blx	r2
    aa88:	1c03      	adds	r3, r0, #0
    aa8a:	469c      	mov	ip, r3
    aa8c:	4663      	mov	r3, ip
    aa8e:	1c18      	adds	r0, r3, #0
    aa90:	46bd      	mov	sp, r7
    aa92:	b002      	add	sp, #8
    aa94:	bd80      	pop	{r7, pc}
    aa96:	46c0      	nop			(mov r8, r8)

0000aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>:
    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
    aa98:	b580      	push	{r7, lr}
    aa9a:	b084      	sub	sp, #16
    aa9c:	af00      	add	r7, sp, #0
    aa9e:	60f8      	str	r0, [r7, #12]
    aaa0:	60b9      	str	r1, [r7, #8]
      { return !_M_pred(__x); }
    aaa2:	68fa      	ldr	r2, [r7, #12]
    aaa4:	68bb      	ldr	r3, [r7, #8]
    aaa6:	681b      	ldr	r3, [r3, #0]
    aaa8:	1c10      	adds	r0, r2, #0
    aaaa:	1c19      	adds	r1, r3, #0
    aaac:	f7ff ffe2 	bl	aa74 <_ZNKSt25pointer_to_unary_functionIiiEclEi>
    aab0:	1c03      	adds	r3, r0, #0
    aab2:	1c1a      	adds	r2, r3, #0
    aab4:	4253      	negs	r3, r2
    aab6:	4153      	adcs	r3, r2
    aab8:	061b      	lsls	r3, r3, #24
    aaba:	0e1b      	lsrs	r3, r3, #24
    aabc:	1c18      	adds	r0, r3, #0
    aabe:	46bd      	mov	sp, r7
    aac0:	b004      	add	sp, #16
    aac2:	bd80      	pop	{r7, pc}

0000aac4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag>:

  /// This is an overload used by find_if() for the RAI case.
  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      _Predicate __pred, random_access_iterator_tag)
    aac4:	b580      	push	{r7, lr}
    aac6:	b08e      	sub	sp, #56
    aac8:	af00      	add	r7, sp, #0
    aaca:	6178      	str	r0, [r7, #20]
    aacc:	6139      	str	r1, [r7, #16]
    aace:	60fa      	str	r2, [r7, #12]
    aad0:	1c3a      	adds	r2, r7, #0
    aad2:	320b      	adds	r2, #11
    aad4:	7013      	strb	r3, [r2, #0]
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;
    aad6:	1c3b      	adds	r3, r7, #0
    aad8:	3310      	adds	r3, #16
    aada:	1c3a      	adds	r2, r7, #0
    aadc:	3214      	adds	r2, #20
    aade:	1c18      	adds	r0, r3, #0
    aae0:	1c11      	adds	r1, r2, #0
    aae2:	f7ff ff79 	bl	a9d8 <_ZN9__gnu_cxxmiIPcSsEENS_17__normal_iteratorIT_T0_E15difference_typeERKS5_S8_>
    aae6:	1c03      	adds	r3, r0, #0
    aae8:	109b      	asrs	r3, r3, #2
    aaea:	637b      	str	r3, [r7, #52]
    aaec:	e076      	b.n	abdc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x118>

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(*__first))
    aaee:	1c3b      	adds	r3, r7, #0
    aaf0:	3314      	adds	r3, #20
    aaf2:	1c18      	adds	r0, r3, #0
    aaf4:	f7ff ff52 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    aaf8:	1c03      	adds	r3, r0, #0
    aafa:	781b      	ldrb	r3, [r3, #0]
    aafc:	61bb      	str	r3, [r7, #24]
    aafe:	1c3b      	adds	r3, r7, #0
    ab00:	330c      	adds	r3, #12
    ab02:	1c3a      	adds	r2, r7, #0
    ab04:	3218      	adds	r2, #24
    ab06:	1c18      	adds	r0, r3, #0
    ab08:	1c11      	adds	r1, r2, #0
    ab0a:	f7ff ffc5 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ab0e:	1c03      	adds	r3, r0, #0
    ab10:	469c      	mov	ip, r3
    ab12:	4663      	mov	r3, ip
    ab14:	2b00      	cmp	r3, #0
    ab16:	d002      	beq.n	ab1e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x5a>
	    return __first;
    ab18:	697b      	ldr	r3, [r7, #20]
    ab1a:	603b      	str	r3, [r7, #0]
    ab1c:	e0ce      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    ab1e:	1c3b      	adds	r3, r7, #0
    ab20:	3314      	adds	r3, #20
    ab22:	1c18      	adds	r0, r3, #0
    ab24:	f7ff ff2c 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>

	  if (__pred(*__first))
    ab28:	1c3b      	adds	r3, r7, #0
    ab2a:	3314      	adds	r3, #20
    ab2c:	1c18      	adds	r0, r3, #0
    ab2e:	f7ff ff35 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ab32:	1c03      	adds	r3, r0, #0
    ab34:	781b      	ldrb	r3, [r3, #0]
    ab36:	61fb      	str	r3, [r7, #28]
    ab38:	1c3b      	adds	r3, r7, #0
    ab3a:	330c      	adds	r3, #12
    ab3c:	1c3a      	adds	r2, r7, #0
    ab3e:	321c      	adds	r2, #28
    ab40:	1c18      	adds	r0, r3, #0
    ab42:	1c11      	adds	r1, r2, #0
    ab44:	f7ff ffa8 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ab48:	1c03      	adds	r3, r0, #0
    ab4a:	469c      	mov	ip, r3
    ab4c:	4663      	mov	r3, ip
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d002      	beq.n	ab58 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x94>
	    return __first;
    ab52:	697b      	ldr	r3, [r7, #20]
    ab54:	603b      	str	r3, [r7, #0]
    ab56:	e0b1      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    ab58:	1c3b      	adds	r3, r7, #0
    ab5a:	3314      	adds	r3, #20
    ab5c:	1c18      	adds	r0, r3, #0
    ab5e:	f7ff ff0f 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>

	  if (__pred(*__first))
    ab62:	1c3b      	adds	r3, r7, #0
    ab64:	3314      	adds	r3, #20
    ab66:	1c18      	adds	r0, r3, #0
    ab68:	f7ff ff18 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ab6c:	1c03      	adds	r3, r0, #0
    ab6e:	781b      	ldrb	r3, [r3, #0]
    ab70:	623b      	str	r3, [r7, #32]
    ab72:	1c3b      	adds	r3, r7, #0
    ab74:	330c      	adds	r3, #12
    ab76:	1c3a      	adds	r2, r7, #0
    ab78:	3220      	adds	r2, #32
    ab7a:	1c18      	adds	r0, r3, #0
    ab7c:	1c11      	adds	r1, r2, #0
    ab7e:	f7ff ff8b 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ab82:	1c03      	adds	r3, r0, #0
    ab84:	469c      	mov	ip, r3
    ab86:	4663      	mov	r3, ip
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d002      	beq.n	ab92 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0xce>
	    return __first;
    ab8c:	697b      	ldr	r3, [r7, #20]
    ab8e:	603b      	str	r3, [r7, #0]
    ab90:	e094      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    ab92:	1c3b      	adds	r3, r7, #0
    ab94:	3314      	adds	r3, #20
    ab96:	1c18      	adds	r0, r3, #0
    ab98:	f7ff fef2 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>

	  if (__pred(*__first))
    ab9c:	1c3b      	adds	r3, r7, #0
    ab9e:	3314      	adds	r3, #20
    aba0:	1c18      	adds	r0, r3, #0
    aba2:	f7ff fefb 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    aba6:	1c03      	adds	r3, r0, #0
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	627b      	str	r3, [r7, #36]
    abac:	1c3b      	adds	r3, r7, #0
    abae:	330c      	adds	r3, #12
    abb0:	1c3a      	adds	r2, r7, #0
    abb2:	3224      	adds	r2, #36
    abb4:	1c18      	adds	r0, r3, #0
    abb6:	1c11      	adds	r1, r2, #0
    abb8:	f7ff ff6e 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    abbc:	1c03      	adds	r3, r0, #0
    abbe:	469c      	mov	ip, r3
    abc0:	4663      	mov	r3, ip
    abc2:	2b00      	cmp	r3, #0
    abc4:	d002      	beq.n	abcc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x108>
	    return __first;
    abc6:	697b      	ldr	r3, [r7, #20]
    abc8:	603b      	str	r3, [r7, #0]
    abca:	e077      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    abcc:	1c3b      	adds	r3, r7, #0
    abce:	3314      	adds	r3, #20
    abd0:	1c18      	adds	r0, r3, #0
    abd2:	f7ff fed5 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
	      _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
    abd6:	6b7b      	ldr	r3, [r7, #52]
    abd8:	3b01      	subs	r3, #1
    abda:	637b      	str	r3, [r7, #52]
    abdc:	6b7b      	ldr	r3, [r7, #52]
    abde:	2b00      	cmp	r3, #0
    abe0:	dc85      	bgt.n	aaee <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x2a>
	  if (__pred(*__first))
	    return __first;
	  ++__first;
	}

      switch (__last - __first)
    abe2:	1c3b      	adds	r3, r7, #0
    abe4:	3310      	adds	r3, #16
    abe6:	1c3a      	adds	r2, r7, #0
    abe8:	3214      	adds	r2, #20
    abea:	1c18      	adds	r0, r3, #0
    abec:	1c11      	adds	r1, r2, #0
    abee:	f7ff fef3 	bl	a9d8 <_ZN9__gnu_cxxmiIPcSsEENS_17__normal_iteratorIT_T0_E15difference_typeERKS5_S8_>
    abf2:	1c03      	adds	r3, r0, #0
    abf4:	607b      	str	r3, [r7, #4]
    abf6:	687b      	ldr	r3, [r7, #4]
    abf8:	2b02      	cmp	r3, #2
    abfa:	d023      	beq.n	ac44 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x180>
    abfc:	687b      	ldr	r3, [r7, #4]
    abfe:	2b03      	cmp	r3, #3
    ac00:	d003      	beq.n	ac0a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x146>
    ac02:	687b      	ldr	r3, [r7, #4]
    ac04:	2b01      	cmp	r3, #1
    ac06:	d03a      	beq.n	ac7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1ba>
    ac08:	e056      	b.n	acb8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f4>
	{
	case 3:
	  if (__pred(*__first))
    ac0a:	1c3b      	adds	r3, r7, #0
    ac0c:	3314      	adds	r3, #20
    ac0e:	1c18      	adds	r0, r3, #0
    ac10:	f7ff fec4 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ac14:	1c03      	adds	r3, r0, #0
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	62bb      	str	r3, [r7, #40]
    ac1a:	1c3b      	adds	r3, r7, #0
    ac1c:	330c      	adds	r3, #12
    ac1e:	1c3a      	adds	r2, r7, #0
    ac20:	3228      	adds	r2, #40
    ac22:	1c18      	adds	r0, r3, #0
    ac24:	1c11      	adds	r1, r2, #0
    ac26:	f7ff ff37 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ac2a:	1c03      	adds	r3, r0, #0
    ac2c:	469c      	mov	ip, r3
    ac2e:	4663      	mov	r3, ip
    ac30:	2b00      	cmp	r3, #0
    ac32:	d002      	beq.n	ac3a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x176>
	    return __first;
    ac34:	697b      	ldr	r3, [r7, #20]
    ac36:	603b      	str	r3, [r7, #0]
    ac38:	e040      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    ac3a:	1c3b      	adds	r3, r7, #0
    ac3c:	3314      	adds	r3, #20
    ac3e:	1c18      	adds	r0, r3, #0
    ac40:	f7ff fe9e 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
	case 2:
	  if (__pred(*__first))
    ac44:	1c3b      	adds	r3, r7, #0
    ac46:	3314      	adds	r3, #20
    ac48:	1c18      	adds	r0, r3, #0
    ac4a:	f7ff fea7 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ac4e:	1c03      	adds	r3, r0, #0
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	62fb      	str	r3, [r7, #44]
    ac54:	1c3b      	adds	r3, r7, #0
    ac56:	330c      	adds	r3, #12
    ac58:	1c3a      	adds	r2, r7, #0
    ac5a:	322c      	adds	r2, #44
    ac5c:	1c18      	adds	r0, r3, #0
    ac5e:	1c11      	adds	r1, r2, #0
    ac60:	f7ff ff1a 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ac64:	1c03      	adds	r3, r0, #0
    ac66:	469c      	mov	ip, r3
    ac68:	4663      	mov	r3, ip
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d002      	beq.n	ac74 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1b0>
	    return __first;
    ac6e:	697b      	ldr	r3, [r7, #20]
    ac70:	603b      	str	r3, [r7, #0]
    ac72:	e023      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    ac74:	1c3b      	adds	r3, r7, #0
    ac76:	3314      	adds	r3, #20
    ac78:	1c18      	adds	r0, r3, #0
    ac7a:	f7ff fe81 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
	case 1:
	  if (__pred(*__first))
    ac7e:	1c3b      	adds	r3, r7, #0
    ac80:	3314      	adds	r3, #20
    ac82:	1c18      	adds	r0, r3, #0
    ac84:	f7ff fe8a 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ac88:	1c03      	adds	r3, r0, #0
    ac8a:	781b      	ldrb	r3, [r3, #0]
    ac8c:	633b      	str	r3, [r7, #48]
    ac8e:	1c3b      	adds	r3, r7, #0
    ac90:	330c      	adds	r3, #12
    ac92:	1c3a      	adds	r2, r7, #0
    ac94:	3230      	adds	r2, #48
    ac96:	1c18      	adds	r0, r3, #0
    ac98:	1c11      	adds	r1, r2, #0
    ac9a:	f7ff fefd 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ac9e:	1c03      	adds	r3, r0, #0
    aca0:	469c      	mov	ip, r3
    aca2:	4663      	mov	r3, ip
    aca4:	2b00      	cmp	r3, #0
    aca6:	d002      	beq.n	acae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1ea>
	    return __first;
    aca8:	697b      	ldr	r3, [r7, #20]
    acaa:	603b      	str	r3, [r7, #0]
    acac:	e006      	b.n	acbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag+0x1f8>
	  ++__first;
    acae:	1c3b      	adds	r3, r7, #0
    acb0:	3314      	adds	r3, #20
    acb2:	1c18      	adds	r0, r3, #0
    acb4:	f7ff fe64 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
	case 0:
	default:
	  return __last;
    acb8:	693b      	ldr	r3, [r7, #16]
    acba:	603b      	str	r3, [r7, #0]
    acbc:	683b      	ldr	r3, [r7, #0]
	}
    }
    acbe:	1c18      	adds	r0, r3, #0
    acc0:	46bd      	mov	sp, r7
    acc2:	b00e      	add	sp, #56
    acc4:	bd80      	pop	{r7, pc}
    acc6:	46c0      	nop			(mov r8, r8)

0000acc8 <_ZSt7find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_>:
   *  such that @p pred(*i) is true, or @p last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
	    _Predicate __pred)
    acc8:	b590      	push	{r4, r7, lr}
    acca:	b085      	sub	sp, #20
    accc:	af00      	add	r7, sp, #0
    acce:	60f8      	str	r0, [r7, #12]
    acd0:	60b9      	str	r1, [r7, #8]
    acd2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	      typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last, __pred,
			    std::__iterator_category(__first));
    acd4:	1c3b      	adds	r3, r7, #0
    acd6:	330c      	adds	r3, #12
    acd8:	1c18      	adds	r0, r3, #0
    acda:	f7ff fe69 	bl	a9b0 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSsEEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
    acde:	68fb      	ldr	r3, [r7, #12]
    ace0:	68ba      	ldr	r2, [r7, #8]
    ace2:	687c      	ldr	r4, [r7, #4]
    ace4:	1c18      	adds	r0, r3, #0
    ace6:	1c11      	adds	r1, r2, #0
    ace8:	1c22      	adds	r2, r4, #0
    acea:	78fb      	ldrb	r3, [r7, #3]
    acec:	f7ff feea 	bl	aac4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_St26random_access_iterator_tag>
    acf0:	1c03      	adds	r3, r0, #0
    acf2:	469c      	mov	ip, r3
    acf4:	4663      	mov	r3, ip
    }
    acf6:	1c18      	adds	r0, r3, #0
    acf8:	46bd      	mov	sp, r7
    acfa:	b005      	add	sp, #20
    acfc:	bd90      	pop	{r4, r7, pc}
    acfe:	46c0      	nop			(mov r8, r8)

0000ad00 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
	      _Predicate __pred)
    ad00:	b590      	push	{r4, r7, lr}
    ad02:	b087      	sub	sp, #28
    ad04:	af00      	add	r7, sp, #0
    ad06:	60f8      	str	r0, [r7, #12]
    ad08:	60b9      	str	r1, [r7, #8]
    ad0a:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      __first = _GLIBCXX_STD_P::find_if(__first, __last, __pred);
    ad0c:	68fb      	ldr	r3, [r7, #12]
    ad0e:	68ba      	ldr	r2, [r7, #8]
    ad10:	687c      	ldr	r4, [r7, #4]
    ad12:	1c18      	adds	r0, r3, #0
    ad14:	1c11      	adds	r1, r2, #0
    ad16:	1c22      	adds	r2, r4, #0
    ad18:	f7ff ffd6 	bl	acc8 <_ZSt7find_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_>
    ad1c:	1c03      	adds	r3, r0, #0
    ad1e:	60fb      	str	r3, [r7, #12]
      if(__first == __last)
    ad20:	1c3b      	adds	r3, r7, #0
    ad22:	330c      	adds	r3, #12
    ad24:	1c3a      	adds	r2, r7, #0
    ad26:	3208      	adds	r2, #8
    ad28:	1c18      	adds	r0, r3, #0
    ad2a:	1c11      	adds	r1, r2, #0
    ad2c:	f7ff fe6c 	bl	aa08 <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>
    ad30:	1c03      	adds	r3, r0, #0
    ad32:	469c      	mov	ip, r3
    ad34:	4663      	mov	r3, ip
    ad36:	2b00      	cmp	r3, #0
    ad38:	d002      	beq.n	ad40 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_+0x40>
        return __first;
    ad3a:	68fb      	ldr	r3, [r7, #12]
    ad3c:	603b      	str	r3, [r7, #0]
    ad3e:	e046      	b.n	adce <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_+0xce>
      _ForwardIterator __result = __first;
    ad40:	68fb      	ldr	r3, [r7, #12]
    ad42:	613b      	str	r3, [r7, #16]
      ++__first;
    ad44:	1c3b      	adds	r3, r7, #0
    ad46:	330c      	adds	r3, #12
    ad48:	1c18      	adds	r0, r3, #0
    ad4a:	f7ff fe19 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
    ad4e:	e02f      	b.n	adb0 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_+0xb0>
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
    ad50:	1c3b      	adds	r3, r7, #0
    ad52:	330c      	adds	r3, #12
    ad54:	1c18      	adds	r0, r3, #0
    ad56:	f7ff fe21 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ad5a:	1c03      	adds	r3, r0, #0
    ad5c:	781b      	ldrb	r3, [r3, #0]
    ad5e:	617b      	str	r3, [r7, #20]
    ad60:	1d3b      	adds	r3, r7, #4
    ad62:	1c3a      	adds	r2, r7, #0
    ad64:	3214      	adds	r2, #20
    ad66:	1c18      	adds	r0, r3, #0
    ad68:	1c11      	adds	r1, r2, #0
    ad6a:	f7ff fe95 	bl	aa98 <_ZNKSt12unary_negateISt25pointer_to_unary_functionIiiEEclERKi>
    ad6e:	1c03      	adds	r3, r0, #0
    ad70:	469c      	mov	ip, r3
    ad72:	4662      	mov	r2, ip
    ad74:	2301      	movs	r3, #1
    ad76:	4053      	eors	r3, r2
    ad78:	061b      	lsls	r3, r3, #24
    ad7a:	0e1b      	lsrs	r3, r3, #24
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d012      	beq.n	ada6 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_+0xa6>
          {
            *__result = _GLIBCXX_MOVE(*__first);
    ad80:	1c3b      	adds	r3, r7, #0
    ad82:	3310      	adds	r3, #16
    ad84:	1c18      	adds	r0, r3, #0
    ad86:	f7ff fe09 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ad8a:	1c04      	adds	r4, r0, #0
    ad8c:	1c3b      	adds	r3, r7, #0
    ad8e:	330c      	adds	r3, #12
    ad90:	1c18      	adds	r0, r3, #0
    ad92:	f7ff fe03 	bl	a99c <_ZNK9__gnu_cxx17__normal_iteratorIPcSsEdeEv>
    ad96:	1c03      	adds	r3, r0, #0
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	7023      	strb	r3, [r4, #0]
            ++__result;
    ad9c:	1c3b      	adds	r3, r7, #0
    ad9e:	3310      	adds	r3, #16
    ada0:	1c18      	adds	r0, r3, #0
    ada2:	f7ff fded 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
      __first = _GLIBCXX_STD_P::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
    ada6:	1c3b      	adds	r3, r7, #0
    ada8:	330c      	adds	r3, #12
    adaa:	1c18      	adds	r0, r3, #0
    adac:	f7ff fde8 	bl	a980 <_ZN9__gnu_cxx17__normal_iteratorIPcSsEppEv>
    adb0:	1c3b      	adds	r3, r7, #0
    adb2:	330c      	adds	r3, #12
    adb4:	1c3a      	adds	r2, r7, #0
    adb6:	3208      	adds	r2, #8
    adb8:	1c18      	adds	r0, r3, #0
    adba:	1c11      	adds	r1, r2, #0
    adbc:	f7ff fe40 	bl	aa40 <_ZN9__gnu_cxxneIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>
    adc0:	1c03      	adds	r3, r0, #0
    adc2:	469c      	mov	ip, r3
    adc4:	4663      	mov	r3, ip
    adc6:	2b00      	cmp	r3, #0
    adc8:	d1c2      	bne.n	ad50 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPcSsEESt12unary_negateISt25pointer_to_unary_functionIiiEEET_S8_S8_T0_+0x50>
        if(!bool(__pred(*__first)))
          {
            *__result = _GLIBCXX_MOVE(*__first);
            ++__result;
          }
      return __result;
    adca:	693b      	ldr	r3, [r7, #16]
    adcc:	603b      	str	r3, [r7, #0]
    adce:	683b      	ldr	r3, [r7, #0]
    }
    add0:	1c18      	adds	r0, r3, #0
    add2:	46bd      	mov	sp, r7
    add4:	b007      	add	sp, #28
    add6:	bd90      	pop	{r4, r7, pc}

0000add8 <_ZN10FfPipelineC2Eh>:
#include "include/ffmpeg_pipeline.h"

FfPipeline::FfPipeline(unsigned char slot_num)
    add8:	b590      	push	{r4, r7, lr}
    adda:	b083      	sub	sp, #12
    addc:	af00      	add	r7, sp, #0
    adde:	6078      	str	r0, [r7, #4]
    ade0:	1c0b      	adds	r3, r1, #0
    ade2:	1cfa      	adds	r2, r7, #3
    ade4:	7013      	strb	r3, [r2, #0]
{
  Slot = slot_num;
    ade6:	687a      	ldr	r2, [r7, #4]
    ade8:	1cfb      	adds	r3, r7, #3
    adea:	781b      	ldrb	r3, [r3, #0]
    adec:	7113      	strb	r3, [r2, #4]
  RecState = REC_NOTINITIALIZED;
    adee:	687a      	ldr	r2, [r7, #4]
    adf0:	2300      	movs	r3, #0
    adf2:	6093      	str	r3, [r2, #8]
  PrevPadTimestamp = 0;
    adf4:	687a      	ldr	r2, [r7, #4]
    adf6:	2300      	movs	r3, #0
    adf8:	60d3      	str	r3, [r2, #12]
  WaitKeyframeFlag = false;
    adfa:	6879      	ldr	r1, [r7, #4]
    adfc:	2229      	movs	r2, #41
    adfe:	2300      	movs	r3, #0
    ae00:	548b      	strb	r3, [r1, r2]
  IsNeedStopFlag = false;
    ae02:	6879      	ldr	r1, [r7, #4]
    ae04:	2228      	movs	r2, #40
    ae06:	2300      	movs	r3, #0
    ae08:	548b      	strb	r3, [r1, r2]
  Index = 0;
    ae0a:	687a      	ldr	r2, [r7, #4]
    ae0c:	2300      	movs	r3, #0
    ae0e:	6253      	str	r3, [r2, #36]
  Ist = NULL;
    ae10:	687a      	ldr	r2, [r7, #4]
    ae12:	2300      	movs	r3, #0
    ae14:	6213      	str	r3, [r2, #32]
  Ost = NULL;
    ae16:	687a      	ldr	r2, [r7, #4]
    ae18:	2300      	movs	r3, #0
    ae1a:	61d3      	str	r3, [r2, #28]
  Iccx = NULL;
    ae1c:	687a      	ldr	r2, [r7, #4]
    ae1e:	2300      	movs	r3, #0
    ae20:	6193      	str	r3, [r2, #24]
  Ofcx = NULL;
    ae22:	687a      	ldr	r2, [r7, #4]
    ae24:	2300      	movs	r3, #0
    ae26:	6153      	str	r3, [r2, #20]
  Ifcx = NULL;
    ae28:	687a      	ldr	r2, [r7, #4]
    ae2a:	2300      	movs	r3, #0
    ae2c:	6113      	str	r3, [r2, #16]
  LastMuxDts = AV_NOPTS_VALUE;
    ae2e:	687a      	ldr	r2, [r7, #4]
    ae30:	4c06      	ldr	r4, [pc, #24]	(ae4c <_ZN10FfPipelineC2Eh+0x74>)
    ae32:	4b05      	ldr	r3, [pc, #20]	(ae48 <_ZN10FfPipelineC2Eh+0x70>)
    ae34:	6313      	str	r3, [r2, #48]
    ae36:	6354      	str	r4, [r2, #52]
}
    ae38:	687b      	ldr	r3, [r7, #4]
    ae3a:	1c18      	adds	r0, r3, #0
    ae3c:	46bd      	mov	sp, r7
    ae3e:	b003      	add	sp, #12
    ae40:	bd90      	pop	{r4, r7, pc}
    ae42:	46c0      	nop			(mov r8, r8)
    ae44:	46c0      	nop			(mov r8, r8)
    ae46:	46c0      	nop			(mov r8, r8)
    ae48:	00000000 	.word	0x00000000
    ae4c:	80000000 	.word	0x80000000

0000ae50 <_ZN10FfPipelineC1Eh>:
#include "include/ffmpeg_pipeline.h"

FfPipeline::FfPipeline(unsigned char slot_num)
    ae50:	b590      	push	{r4, r7, lr}
    ae52:	b083      	sub	sp, #12
    ae54:	af00      	add	r7, sp, #0
    ae56:	6078      	str	r0, [r7, #4]
    ae58:	1c0b      	adds	r3, r1, #0
    ae5a:	1cfa      	adds	r2, r7, #3
    ae5c:	7013      	strb	r3, [r2, #0]
{
  Slot = slot_num;
    ae5e:	687a      	ldr	r2, [r7, #4]
    ae60:	1cfb      	adds	r3, r7, #3
    ae62:	781b      	ldrb	r3, [r3, #0]
    ae64:	7113      	strb	r3, [r2, #4]
  RecState = REC_NOTINITIALIZED;
    ae66:	687a      	ldr	r2, [r7, #4]
    ae68:	2300      	movs	r3, #0
    ae6a:	6093      	str	r3, [r2, #8]
  PrevPadTimestamp = 0;
    ae6c:	687a      	ldr	r2, [r7, #4]
    ae6e:	2300      	movs	r3, #0
    ae70:	60d3      	str	r3, [r2, #12]
  WaitKeyframeFlag = false;
    ae72:	6879      	ldr	r1, [r7, #4]
    ae74:	2229      	movs	r2, #41
    ae76:	2300      	movs	r3, #0
    ae78:	548b      	strb	r3, [r1, r2]
  IsNeedStopFlag = false;
    ae7a:	6879      	ldr	r1, [r7, #4]
    ae7c:	2228      	movs	r2, #40
    ae7e:	2300      	movs	r3, #0
    ae80:	548b      	strb	r3, [r1, r2]
  Index = 0;
    ae82:	687a      	ldr	r2, [r7, #4]
    ae84:	2300      	movs	r3, #0
    ae86:	6253      	str	r3, [r2, #36]
  Ist = NULL;
    ae88:	687a      	ldr	r2, [r7, #4]
    ae8a:	2300      	movs	r3, #0
    ae8c:	6213      	str	r3, [r2, #32]
  Ost = NULL;
    ae8e:	687a      	ldr	r2, [r7, #4]
    ae90:	2300      	movs	r3, #0
    ae92:	61d3      	str	r3, [r2, #28]
  Iccx = NULL;
    ae94:	687a      	ldr	r2, [r7, #4]
    ae96:	2300      	movs	r3, #0
    ae98:	6193      	str	r3, [r2, #24]
  Ofcx = NULL;
    ae9a:	687a      	ldr	r2, [r7, #4]
    ae9c:	2300      	movs	r3, #0
    ae9e:	6153      	str	r3, [r2, #20]
  Ifcx = NULL;
    aea0:	687a      	ldr	r2, [r7, #4]
    aea2:	2300      	movs	r3, #0
    aea4:	6113      	str	r3, [r2, #16]
  LastMuxDts = AV_NOPTS_VALUE;
    aea6:	687a      	ldr	r2, [r7, #4]
    aea8:	4c06      	ldr	r4, [pc, #24]	(aec4 <_ZN10FfPipelineC1Eh+0x74>)
    aeaa:	4b05      	ldr	r3, [pc, #20]	(aec0 <_ZN10FfPipelineC1Eh+0x70>)
    aeac:	6313      	str	r3, [r2, #48]
    aeae:	6354      	str	r4, [r2, #52]
}
    aeb0:	687b      	ldr	r3, [r7, #4]
    aeb2:	1c18      	adds	r0, r3, #0
    aeb4:	46bd      	mov	sp, r7
    aeb6:	b003      	add	sp, #12
    aeb8:	bd90      	pop	{r4, r7, pc}
    aeba:	46c0      	nop			(mov r8, r8)
    aebc:	46c0      	nop			(mov r8, r8)
    aebe:	46c0      	nop			(mov r8, r8)
    aec0:	00000000 	.word	0x00000000
    aec4:	80000000 	.word	0x80000000

0000aec8 <_ZN10FfPipelineD2Ev>:

FfPipeline::~FfPipeline()
    aec8:	b580      	push	{r7, lr}
    aeca:	b082      	sub	sp, #8
    aecc:	af00      	add	r7, sp, #0
    aece:	6078      	str	r0, [r7, #4]
{
}
    aed0:	687b      	ldr	r3, [r7, #4]
    aed2:	1c18      	adds	r0, r3, #0
    aed4:	46bd      	mov	sp, r7
    aed6:	b002      	add	sp, #8
    aed8:	bd80      	pop	{r7, pc}
    aeda:	46c0      	nop			(mov r8, r8)

0000aedc <_ZN10FfPipelineD1Ev>:
  Ofcx = NULL;
  Ifcx = NULL;
  LastMuxDts = AV_NOPTS_VALUE;
}

FfPipeline::~FfPipeline()
    aedc:	b580      	push	{r7, lr}
    aede:	b082      	sub	sp, #8
    aee0:	af00      	add	r7, sp, #0
    aee2:	6078      	str	r0, [r7, #4]
{
}
    aee4:	687b      	ldr	r3, [r7, #4]
    aee6:	1c18      	adds	r0, r3, #0
    aee8:	46bd      	mov	sp, r7
    aeea:	b002      	add	sp, #8
    aeec:	bd80      	pop	{r7, pc}
    aeee:	46c0      	nop			(mov r8, r8)

0000aef0 <_ZN10FfPipeline21SetPartnerPipePointerEPv>:
  pthread_mutex_lock(&mutex);
  IsNeedStopFlag = true;
  pthread_mutex_unlock(&mutex);
}

void FfPipeline::SetPartnerPipePointer(gpointer p)
    aef0:	b580      	push	{r7, lr}
    aef2:	b082      	sub	sp, #8
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
    aef8:	6039      	str	r1, [r7, #0]
{
  PartnerPipePointer = p;
    aefa:	687a      	ldr	r2, [r7, #4]
    aefc:	683b      	ldr	r3, [r7, #0]
    aefe:	6013      	str	r3, [r2, #0]
}
    af00:	46bd      	mov	sp, r7
    af02:	b002      	add	sp, #8
    af04:	bd80      	pop	{r7, pc}
    af06:	46c0      	nop			(mov r8, r8)

0000af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>:

void FfPipeline::SetRecState(RecordingState rst)
    af08:	b580      	push	{r7, lr}
    af0a:	b082      	sub	sp, #8
    af0c:	af00      	add	r7, sp, #0
    af0e:	6078      	str	r0, [r7, #4]
    af10:	6039      	str	r1, [r7, #0]
{
  RecState = rst;
    af12:	687a      	ldr	r2, [r7, #4]
    af14:	683b      	ldr	r3, [r7, #0]
    af16:	6093      	str	r3, [r2, #8]
}
    af18:	46bd      	mov	sp, r7
    af1a:	b002      	add	sp, #8
    af1c:	bd80      	pop	{r7, pc}
    af1e:	46c0      	nop			(mov r8, r8)

0000af20 <_ZN10FfPipeline22SetWaitingKeyframeFlagEv>:
  sprintf(str, "DEBUG: Slot '%d' was marked for stopping by SetNeedStopFlag().\n", Pipe->Slot);
  AppendLog(str, class_name);
  return 0;
}

void FfPipeline::SetWaitingKeyframeFlag()
    af20:	b580      	push	{r7, lr}
    af22:	b082      	sub	sp, #8
    af24:	af00      	add	r7, sp, #0
    af26:	6078      	str	r0, [r7, #4]
{
  WaitKeyframeFlag = true;
    af28:	6879      	ldr	r1, [r7, #4]
    af2a:	2229      	movs	r2, #41
    af2c:	2301      	movs	r3, #1
    af2e:	548b      	strb	r3, [r1, r2]
}
    af30:	46bd      	mov	sp, r7
    af32:	b002      	add	sp, #8
    af34:	bd80      	pop	{r7, pc}
    af36:	46c0      	nop			(mov r8, r8)

0000af38 <_ZN10FfPipeline24ClearWaitingKeyframeFlagEv>:

void FfPipeline::ClearWaitingKeyframeFlag()
    af38:	b580      	push	{r7, lr}
    af3a:	b082      	sub	sp, #8
    af3c:	af00      	add	r7, sp, #0
    af3e:	6078      	str	r0, [r7, #4]
{
  WaitKeyframeFlag = false;
    af40:	6879      	ldr	r1, [r7, #4]
    af42:	2229      	movs	r2, #41
    af44:	2300      	movs	r3, #0
    af46:	548b      	strb	r3, [r1, r2]
}
    af48:	46bd      	mov	sp, r7
    af4a:	b002      	add	sp, #8
    af4c:	bd80      	pop	{r7, pc}
    af4e:	46c0      	nop			(mov r8, r8)

0000af50 <_ZN10FfPipeline17IsWaitingKeyframeEv>:

bool FfPipeline::IsWaitingKeyframe()
    af50:	b580      	push	{r7, lr}
    af52:	b082      	sub	sp, #8
    af54:	af00      	add	r7, sp, #0
    af56:	6078      	str	r0, [r7, #4]
{
  return WaitKeyframeFlag;
    af58:	687a      	ldr	r2, [r7, #4]
    af5a:	2329      	movs	r3, #41
    af5c:	5cd3      	ldrb	r3, [r2, r3]
}
    af5e:	1c18      	adds	r0, r3, #0
    af60:	46bd      	mov	sp, r7
    af62:	b002      	add	sp, #8
    af64:	bd80      	pop	{r7, pc}
    af66:	46c0      	nop			(mov r8, r8)

0000af68 <_ZN10FfPipeline11GetRecStateEv>:
  Pip->DoRecording();

  return pdata;
}

RecordingState FfPipeline::GetRecState()
    af68:	b580      	push	{r7, lr}
    af6a:	b082      	sub	sp, #8
    af6c:	af00      	add	r7, sp, #0
    af6e:	6078      	str	r0, [r7, #4]
{
  return RecState;
    af70:	687b      	ldr	r3, [r7, #4]
    af72:	689b      	ldr	r3, [r3, #8]
}
    af74:	1c18      	adds	r0, r3, #0
    af76:	46bd      	mov	sp, r7
    af78:	b002      	add	sp, #8
    af7a:	bd80      	pop	{r7, pc}

0000af7c <_Z41__static_initialization_and_destruction_0ii>:
  avformat_close_input(&ifcx);

  SetRecState(REC_STOPPED);

  return 0;
}
    af7c:	b580      	push	{r7, lr}
    af7e:	b082      	sub	sp, #8
    af80:	af00      	add	r7, sp, #0
    af82:	6078      	str	r0, [r7, #4]
    af84:	6039      	str	r1, [r7, #0]
    af86:	687b      	ldr	r3, [r7, #4]
    af88:	2b01      	cmp	r3, #1
    af8a:	d10d      	bne.n	afa8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    af8c:	683a      	ldr	r2, [r7, #0]
    af8e:	4b08      	ldr	r3, [pc, #32]	(afb0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    af90:	429a      	cmp	r2, r3
    af92:	d109      	bne.n	afa8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    af94:	4b07      	ldr	r3, [pc, #28]	(afb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    af96:	1c18      	adds	r0, r3, #0
    af98:	f7fe ec9e 	blx	98d8 <_init+0x134>
    af9c:	4906      	ldr	r1, [pc, #24]	(afb8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    af9e:	4b05      	ldr	r3, [pc, #20]	(afb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    afa0:	4a06      	ldr	r2, [pc, #24]	(afbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    afa2:	1c18      	adds	r0, r3, #0
    afa4:	f7fe ed94 	blx	9ad0 <_init+0x32c>
    afa8:	46bd      	mov	sp, r7
    afaa:	b002      	add	sp, #8
    afac:	bd80      	pop	{r7, pc}
    afae:	46c0      	nop			(mov r8, r8)
    afb0:	0000ffff 	.word	0x0000ffff
    afb4:	000167ca 	.word	0x000167ca
    afb8:	00009938 	.word	0x00009938
    afbc:	00016780 	.word	0x00016780

0000afc0 <_GLOBAL__I__ZN10FfPipelineC2Eh>:
    afc0:	b580      	push	{r7, lr}
    afc2:	af00      	add	r7, sp, #0
    afc4:	4b03      	ldr	r3, [pc, #12]	(afd4 <_GLOBAL__I__ZN10FfPipelineC2Eh+0x14>)
    afc6:	2001      	movs	r0, #1
    afc8:	1c19      	adds	r1, r3, #0
    afca:	f7ff ffd7 	bl	af7c <_Z41__static_initialization_and_destruction_0ii>
    afce:	46bd      	mov	sp, r7
    afd0:	bd80      	pop	{r7, pc}
    afd2:	46c0      	nop			(mov r8, r8)
    afd4:	0000ffff 	.word	0x0000ffff

0000afd8 <_ZN10FfPipeline26r_avformat_close_input_v24EPP15AVFormatContext>:

FfPipeline::~FfPipeline()
{
}

void FfPipeline::r_avformat_close_input_v24(AVFormatContext **ps)
    afd8:	b580      	push	{r7, lr}
    afda:	b082      	sub	sp, #8
    afdc:	af00      	add	r7, sp, #0
    afde:	6078      	str	r0, [r7, #4]
    afe0:	6039      	str	r1, [r7, #0]
{
  return avformat_close_input(ps);
    afe2:	683b      	ldr	r3, [r7, #0]
    afe4:	1c18      	adds	r0, r3, #0
    afe6:	f7fe edc8 	blx	9b78 <_init+0x3d4>
}
    afea:	46bd      	mov	sp, r7
    afec:	b002      	add	sp, #8
    afee:	bd80      	pop	{r7, pc}

0000aff0 <_ZN10FfPipeline15RescalePtsDts24EP8AVPacketP8AVStreamS3_>:
      sprintf(str, "ERROR: Error executing av_interleaved_write_frame()...Error code: %d. Error: '%s'.\n", ret, av_err2str(ret));
      AppendLog(str, class_name);
    }
}

void FfPipeline::RescalePtsDts24(AVPacket *pkt, AVStream *in_stream, AVStream *out_stream)
    aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aff2:	4647      	mov	r7, r8
    aff4:	b480      	push	{r7}
    aff6:	b08c      	sub	sp, #48
    aff8:	af02      	add	r7, sp, #8
    affa:	6278      	str	r0, [r7, #36]
    affc:	6239      	str	r1, [r7, #32]
    affe:	61fa      	str	r2, [r7, #28]
    b000:	61bb      	str	r3, [r7, #24]
{
  pkt->pts = av_rescale_q(pkt->pts, in_stream->time_base, out_stream->time_base);
    b002:	6a3b      	ldr	r3, [r7, #32]
    b004:	6899      	ldr	r1, [r3, #8]
    b006:	68da      	ldr	r2, [r3, #12]
    b008:	69fc      	ldr	r4, [r7, #28]
    b00a:	69bb      	ldr	r3, [r7, #24]
    b00c:	4668      	mov	r0, sp
    b00e:	4684      	mov	ip, r0
    b010:	46e0      	mov	r8, ip
    b012:	4645      	mov	r5, r8
    b014:	617d      	str	r5, [r7, #20]
    b016:	1c18      	adds	r0, r3, #0
    b018:	3028      	adds	r0, #40
    b01a:	6138      	str	r0, [r7, #16]
    b01c:	697b      	ldr	r3, [r7, #20]
    b01e:	693d      	ldr	r5, [r7, #16]
    b020:	cd41      	ldmia	r5!, {r0, r6}
    b022:	c341      	stmia	r3!, {r0, r6}
    b024:	1c08      	adds	r0, r1, #0
    b026:	1c11      	adds	r1, r2, #0
    b028:	6aa2      	ldr	r2, [r4, #40]
    b02a:	6ae3      	ldr	r3, [r4, #44]
    b02c:	f7fe ec48 	blx	98c0 <_init+0x11c>
    b030:	1c03      	adds	r3, r0, #0
    b032:	1c0c      	adds	r4, r1, #0
    b034:	6a3a      	ldr	r2, [r7, #32]
    b036:	6093      	str	r3, [r2, #8]
    b038:	60d4      	str	r4, [r2, #12]
  pkt->dts = av_rescale_q(pkt->dts, in_stream->time_base, out_stream->time_base);
    b03a:	6a3b      	ldr	r3, [r7, #32]
    b03c:	6919      	ldr	r1, [r3, #16]
    b03e:	695a      	ldr	r2, [r3, #20]
    b040:	69fc      	ldr	r4, [r7, #28]
    b042:	69bb      	ldr	r3, [r7, #24]
    b044:	466d      	mov	r5, sp
    b046:	46ac      	mov	ip, r5
    b048:	46e0      	mov	r8, ip
    b04a:	4646      	mov	r6, r8
    b04c:	60fe      	str	r6, [r7, #12]
    b04e:	1c18      	adds	r0, r3, #0
    b050:	3028      	adds	r0, #40
    b052:	60b8      	str	r0, [r7, #8]
    b054:	68fb      	ldr	r3, [r7, #12]
    b056:	68bd      	ldr	r5, [r7, #8]
    b058:	cd41      	ldmia	r5!, {r0, r6}
    b05a:	c341      	stmia	r3!, {r0, r6}
    b05c:	1c08      	adds	r0, r1, #0
    b05e:	1c11      	adds	r1, r2, #0
    b060:	6aa2      	ldr	r2, [r4, #40]
    b062:	6ae3      	ldr	r3, [r4, #44]
    b064:	f7fe ec2c 	blx	98c0 <_init+0x11c>
    b068:	1c03      	adds	r3, r0, #0
    b06a:	1c0c      	adds	r4, r1, #0
    b06c:	6a3a      	ldr	r2, [r7, #32]
    b06e:	6113      	str	r3, [r2, #16]
    b070:	6154      	str	r4, [r2, #20]
  pkt->duration = av_rescale_q(pkt->duration, in_stream->time_base, out_stream->time_base);
    b072:	6a3b      	ldr	r3, [r7, #32]
    b074:	6b1a      	ldr	r2, [r3, #48]
    b076:	17d1      	asrs	r1, r2, #31
    b078:	1c13      	adds	r3, r2, #0
    b07a:	1c0c      	adds	r4, r1, #0
    b07c:	69fd      	ldr	r5, [r7, #28]
    b07e:	69ba      	ldr	r2, [r7, #24]
    b080:	4669      	mov	r1, sp
    b082:	468c      	mov	ip, r1
    b084:	46e0      	mov	r8, ip
    b086:	4646      	mov	r6, r8
    b088:	607e      	str	r6, [r7, #4]
    b08a:	1c10      	adds	r0, r2, #0
    b08c:	3028      	adds	r0, #40
    b08e:	6038      	str	r0, [r7, #0]
    b090:	6879      	ldr	r1, [r7, #4]
    b092:	683a      	ldr	r2, [r7, #0]
    b094:	ca41      	ldmia	r2!, {r0, r6}
    b096:	c141      	stmia	r1!, {r0, r6}
    b098:	1c18      	adds	r0, r3, #0
    b09a:	1c21      	adds	r1, r4, #0
    b09c:	6aaa      	ldr	r2, [r5, #40]
    b09e:	6aeb      	ldr	r3, [r5, #44]
    b0a0:	f7fe ec0e 	blx	98c0 <_init+0x11c>
    b0a4:	1c03      	adds	r3, r0, #0
    b0a6:	1c0c      	adds	r4, r1, #0
    b0a8:	1c1a      	adds	r2, r3, #0
    b0aa:	6a3b      	ldr	r3, [r7, #32]
    b0ac:	631a      	str	r2, [r3, #48]
}
    b0ae:	46bd      	mov	sp, r7
    b0b0:	b00a      	add	sp, #40
    b0b2:	bc04      	pop	{r2}
    b0b4:	4690      	mov	r8, r2
    b0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b0b8 <av_make_error_string>:
 * @param errbuf_size    size in bytes of errbuf
 * @param errnum         error code to describe
 * @return the buffer in input, filled with the error description
 * @see av_strerror()
 */
static inline char *av_make_error_string(char *errbuf, size_t errbuf_size, int errnum)
    b0b8:	b590      	push	{r4, r7, lr}
    b0ba:	b085      	sub	sp, #20
    b0bc:	af00      	add	r7, sp, #0
    b0be:	60f8      	str	r0, [r7, #12]
    b0c0:	60b9      	str	r1, [r7, #8]
    b0c2:	607a      	str	r2, [r7, #4]
{
    av_strerror(errnum, errbuf, errbuf_size);
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	68fa      	ldr	r2, [r7, #12]
    b0c8:	68bc      	ldr	r4, [r7, #8]
    b0ca:	1c18      	adds	r0, r3, #0
    b0cc:	1c11      	adds	r1, r2, #0
    b0ce:	1c22      	adds	r2, r4, #0
    b0d0:	f7fe ecaa 	blx	9a28 <_init+0x284>
    return errbuf;
    b0d4:	68fb      	ldr	r3, [r7, #12]
}
    b0d6:	1c18      	adds	r0, r3, #0
    b0d8:	46bd      	mov	sp, r7
    b0da:	b005      	add	sp, #20
    b0dc:	bd90      	pop	{r4, r7, pc}
    b0de:	46c0      	nop			(mov r8, r8)

0000b0e0 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext>:
int FfPipeline::Start()
{
	return ThInitiateRecording();
}

void FfPipeline::WriteFrame_v242(AVFormatContext *s, AVStream *st, AVPacket *pkt, AVBitStreamFilterContext *bsfc)
    b0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0e2:	b0a1      	sub	sp, #132
    b0e4:	af00      	add	r7, sp, #0
    b0e6:	64f8      	str	r0, [r7, #76]
    b0e8:	64b9      	str	r1, [r7, #72]
    b0ea:	647a      	str	r2, [r7, #68]
    b0ec:	643b      	str	r3, [r7, #64]
{
  const char *class_name = "FfPipeline::WriteFrame_v242";
    b0ee:	4b7f      	ldr	r3, [pc, #508]	(b2ec <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x20c>)
    b0f0:	66fb      	str	r3, [r7, #108]
  int ret;
  AVCodecContext *avctx = st->codec;
    b0f2:	6c7b      	ldr	r3, [r7, #68]
    b0f4:	689b      	ldr	r3, [r3, #8]
    b0f6:	677b      	str	r3, [r7, #116]

  if ((avctx->codec_type == AVMEDIA_TYPE_AUDIO || avctx->codec_type == AVMEDIA_TYPE_VIDEO) && pkt->dts != AV_NOPTS_VALUE)
    b0f8:	6f7b      	ldr	r3, [r7, #116]
    b0fa:	689b      	ldr	r3, [r3, #8]
    b0fc:	2b01      	cmp	r3, #1
    b0fe:	d004      	beq.n	b10a <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x2a>
    b100:	6f7b      	ldr	r3, [r7, #116]
    b102:	689b      	ldr	r3, [r3, #8]
    b104:	2b00      	cmp	r3, #0
    b106:	d000      	beq.n	b10a <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x2a>
    b108:	e0aa      	b.n	b260 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x180>
    b10a:	6c3b      	ldr	r3, [r7, #64]
    b10c:	6919      	ldr	r1, [r3, #16]
    b10e:	695a      	ldr	r2, [r3, #20]
    b110:	60b9      	str	r1, [r7, #8]
    b112:	60fa      	str	r2, [r7, #12]
    b114:	68ba      	ldr	r2, [r7, #8]
    b116:	2a00      	cmp	r2, #0
    b118:	d104      	bne.n	b124 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x44>
    b11a:	4b75      	ldr	r3, [pc, #468]	(b2f0 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x210>)
    b11c:	68fc      	ldr	r4, [r7, #12]
    b11e:	429c      	cmp	r4, r3
    b120:	d100      	bne.n	b124 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x44>
    b122:	e09d      	b.n	b260 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x180>
    {
      int64_t max = st->cur_dts + !(s->oformat->flags & AVFMT_TS_NONSTRICT);
    b124:	6c7b      	ldr	r3, [r7, #68]
    b126:	33d8      	adds	r3, #216
    b128:	681d      	ldr	r5, [r3, #0]
    b12a:	685e      	ldr	r6, [r3, #4]
    b12c:	6cbb      	ldr	r3, [r7, #72]
    b12e:	689b      	ldr	r3, [r3, #8]
    b130:	69da      	ldr	r2, [r3, #28]
    b132:	2380      	movs	r3, #128
    b134:	029b      	lsls	r3, r3, #10
    b136:	4013      	ands	r3, r2
    b138:	425a      	negs	r2, r3
    b13a:	415a      	adcs	r2, r3
    b13c:	2100      	movs	r1, #0
    b13e:	1c13      	adds	r3, r2, #0
    b140:	1c0c      	adds	r4, r1, #0
    b142:	195b      	adds	r3, r3, r5
    b144:	4174      	adcs	r4, r6
    b146:	67bb      	str	r3, [r7, #120]
    b148:	67fc      	str	r4, [r7, #124]
      if (st->cur_dts && st->cur_dts != AV_NOPTS_VALUE && max > pkt->dts)
    b14a:	6c7b      	ldr	r3, [r7, #68]
    b14c:	33d8      	adds	r3, #216
    b14e:	6819      	ldr	r1, [r3, #0]
    b150:	685a      	ldr	r2, [r3, #4]
    b152:	1c0b      	adds	r3, r1, #0
    b154:	4313      	orrs	r3, r2
    b156:	2b00      	cmp	r3, #0
    b158:	d100      	bne.n	b15c <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x7c>
    b15a:	e081      	b.n	b260 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x180>
    b15c:	6c7b      	ldr	r3, [r7, #68]
    b15e:	33d8      	adds	r3, #216
    b160:	6819      	ldr	r1, [r3, #0]
    b162:	685a      	ldr	r2, [r3, #4]
    b164:	6139      	str	r1, [r7, #16]
    b166:	617a      	str	r2, [r7, #20]
    b168:	693a      	ldr	r2, [r7, #16]
    b16a:	2a00      	cmp	r2, #0
    b16c:	d104      	bne.n	b178 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x98>
    b16e:	4b60      	ldr	r3, [pc, #384]	(b2f0 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x210>)
    b170:	697c      	ldr	r4, [r7, #20]
    b172:	429c      	cmp	r4, r3
    b174:	d100      	bne.n	b178 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x98>
    b176:	e073      	b.n	b260 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x180>
    b178:	6c3b      	ldr	r3, [r7, #64]
    b17a:	6919      	ldr	r1, [r3, #16]
    b17c:	695a      	ldr	r2, [r3, #20]
    b17e:	61b9      	str	r1, [r7, #24]
    b180:	61fa      	str	r2, [r7, #28]
    b182:	6ffb      	ldr	r3, [r7, #124]
    b184:	69fa      	ldr	r2, [r7, #28]
    b186:	4293      	cmp	r3, r2
    b188:	dc07      	bgt.n	b19a <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0xba>
    b18a:	6ffb      	ldr	r3, [r7, #124]
    b18c:	69fc      	ldr	r4, [r7, #28]
    b18e:	42a3      	cmp	r3, r4
    b190:	d166      	bne.n	b260 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x180>
    b192:	6fbb      	ldr	r3, [r7, #120]
    b194:	69b9      	ldr	r1, [r7, #24]
    b196:	428b      	cmp	r3, r1
    b198:	d962      	bls.n	b260 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x180>
        {
          AppendLog("WARNING: PTS:DTS < PRId64 invalid, clipping\n", class_name);
    b19a:	1c3b      	adds	r3, r7, #0
    b19c:	335f      	adds	r3, #95
    b19e:	1c18      	adds	r0, r3, #0
    b1a0:	f7fe ecf0 	blx	9b84 <_init+0x3e0>
    b1a4:	1c3b      	adds	r3, r7, #0
    b1a6:	3358      	adds	r3, #88
    b1a8:	4a52      	ldr	r2, [pc, #328]	(b2f4 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x214>)
    b1aa:	1c3c      	adds	r4, r7, #0
    b1ac:	345f      	adds	r4, #95
    b1ae:	1c18      	adds	r0, r3, #0
    b1b0:	1c11      	adds	r1, r2, #0
    b1b2:	1c22      	adds	r2, r4, #0
    b1b4:	f7fe ec3e 	blx	9a34 <_init+0x290>
    b1b8:	1c3b      	adds	r3, r7, #0
    b1ba:	3354      	adds	r3, #84
    b1bc:	1c3a      	adds	r2, r7, #0
    b1be:	3258      	adds	r2, #88
    b1c0:	6efc      	ldr	r4, [r7, #108]
    b1c2:	1c18      	adds	r0, r3, #0
    b1c4:	1c11      	adds	r1, r2, #0
    b1c6:	1c22      	adds	r2, r4, #0
    b1c8:	f001 f838 	bl	c23c <_Z9AppendLogSsPKc>
    b1cc:	1c3b      	adds	r3, r7, #0
    b1ce:	3354      	adds	r3, #84
    b1d0:	1c18      	adds	r0, r3, #0
    b1d2:	f7fe ebc4 	blx	995c <_init+0x1b8>
    b1d6:	1c3b      	adds	r3, r7, #0
    b1d8:	3358      	adds	r3, #88
    b1da:	1c18      	adds	r0, r3, #0
    b1dc:	f7fe ebbe 	blx	995c <_init+0x1b8>
    b1e0:	1c3b      	adds	r3, r7, #0
    b1e2:	335f      	adds	r3, #95
    b1e4:	1c18      	adds	r0, r3, #0
    b1e6:	f7fe ec68 	blx	9ab8 <_init+0x314>
          if (pkt->pts >= pkt->dts)
    b1ea:	6c3b      	ldr	r3, [r7, #64]
    b1ec:	6899      	ldr	r1, [r3, #8]
    b1ee:	68da      	ldr	r2, [r3, #12]
    b1f0:	6239      	str	r1, [r7, #32]
    b1f2:	627a      	str	r2, [r7, #36]
    b1f4:	6c3b      	ldr	r3, [r7, #64]
    b1f6:	6919      	ldr	r1, [r3, #16]
    b1f8:	695a      	ldr	r2, [r3, #20]
    b1fa:	62b9      	str	r1, [r7, #40]
    b1fc:	62fa      	str	r2, [r7, #44]
    b1fe:	6afa      	ldr	r2, [r7, #44]
    b200:	6a7b      	ldr	r3, [r7, #36]
    b202:	429a      	cmp	r2, r3
    b204:	dc27      	bgt.n	b256 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x176>
    b206:	6afc      	ldr	r4, [r7, #44]
    b208:	6a79      	ldr	r1, [r7, #36]
    b20a:	428c      	cmp	r4, r1
    b20c:	d103      	bne.n	b216 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x136>
    b20e:	6aba      	ldr	r2, [r7, #40]
    b210:	6a3b      	ldr	r3, [r7, #32]
    b212:	429a      	cmp	r2, r3
    b214:	d81f      	bhi.n	b256 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x176>
            pkt->pts = FFMAX(pkt->pts, max);
    b216:	6c3b      	ldr	r3, [r7, #64]
    b218:	6899      	ldr	r1, [r3, #8]
    b21a:	68da      	ldr	r2, [r3, #12]
    b21c:	63b9      	str	r1, [r7, #56]
    b21e:	63fa      	str	r2, [r7, #60]
    b220:	6ffb      	ldr	r3, [r7, #124]
    b222:	6bfa      	ldr	r2, [r7, #60]
    b224:	4293      	cmp	r3, r2
    b226:	db07      	blt.n	b238 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x158>
    b228:	6ffb      	ldr	r3, [r7, #124]
    b22a:	6bfc      	ldr	r4, [r7, #60]
    b22c:	42a3      	cmp	r3, r4
    b22e:	d109      	bne.n	b244 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x164>
    b230:	6fbb      	ldr	r3, [r7, #120]
    b232:	6bb9      	ldr	r1, [r7, #56]
    b234:	428b      	cmp	r3, r1
    b236:	d205      	bcs.n	b244 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x164>
    b238:	6c3b      	ldr	r3, [r7, #64]
    b23a:	6899      	ldr	r1, [r3, #8]
    b23c:	68da      	ldr	r2, [r3, #12]
    b23e:	6339      	str	r1, [r7, #48]
    b240:	637a      	str	r2, [r7, #52]
    b242:	e003      	b.n	b24c <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x16c>
    b244:	6fba      	ldr	r2, [r7, #120]
    b246:	6ffb      	ldr	r3, [r7, #124]
    b248:	633a      	str	r2, [r7, #48]
    b24a:	637b      	str	r3, [r7, #52]
    b24c:	6c3b      	ldr	r3, [r7, #64]
    b24e:	6b39      	ldr	r1, [r7, #48]
    b250:	6b7a      	ldr	r2, [r7, #52]
    b252:	6099      	str	r1, [r3, #8]
    b254:	60da      	str	r2, [r3, #12]
          pkt->dts = max;
    b256:	6c3a      	ldr	r2, [r7, #64]
    b258:	6fbb      	ldr	r3, [r7, #120]
    b25a:	6ffc      	ldr	r4, [r7, #124]
    b25c:	6113      	str	r3, [r2, #16]
    b25e:	6154      	str	r4, [r2, #20]
        }
    }

  ret = av_interleaved_write_frame(s, pkt);
    b260:	6cbb      	ldr	r3, [r7, #72]
    b262:	6c3a      	ldr	r2, [r7, #64]
    b264:	1c18      	adds	r0, r3, #0
    b266:	1c11      	adds	r1, r2, #0
    b268:	f7fe eb4e 	blx	9908 <_init+0x164>
    b26c:	1c03      	adds	r3, r0, #0
    b26e:	673b      	str	r3, [r7, #112]

  if (ret < 0)
    b270:	6f3b      	ldr	r3, [r7, #112]
    b272:	2b00      	cmp	r3, #0
    b274:	da37      	bge.n	b2e6 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x206>
    {
      sprintf(str, "ERROR: Error executing av_interleaved_write_frame()...Error code: %d. Error: '%s'.\n", ret, av_err2str(ret));
    b276:	4b20      	ldr	r3, [pc, #128]	(b2f8 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x218>)
    b278:	6f3a      	ldr	r2, [r7, #112]
    b27a:	1c18      	adds	r0, r3, #0
    b27c:	2140      	movs	r1, #64
    b27e:	f7ff ff1b 	bl	b0b8 <av_make_error_string>
    b282:	1c05      	adds	r5, r0, #0
    b284:	4b1d      	ldr	r3, [pc, #116]	(b2fc <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x21c>)
    b286:	4a1e      	ldr	r2, [pc, #120]	(b300 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x220>)
    b288:	6f3c      	ldr	r4, [r7, #112]
    b28a:	1c18      	adds	r0, r3, #0
    b28c:	1c11      	adds	r1, r2, #0
    b28e:	1c22      	adds	r2, r4, #0
    b290:	1c2b      	adds	r3, r5, #0
    b292:	f7fe eca8 	blx	9be4 <_init+0x440>
      AppendLog(str, class_name);
    b296:	1c3b      	adds	r3, r7, #0
    b298:	336b      	adds	r3, #107
    b29a:	1c18      	adds	r0, r3, #0
    b29c:	f7fe ec72 	blx	9b84 <_init+0x3e0>
    b2a0:	1c3b      	adds	r3, r7, #0
    b2a2:	3364      	adds	r3, #100
    b2a4:	4a15      	ldr	r2, [pc, #84]	(b2fc <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext+0x21c>)
    b2a6:	1c3c      	adds	r4, r7, #0
    b2a8:	346b      	adds	r4, #107
    b2aa:	1c18      	adds	r0, r3, #0
    b2ac:	1c11      	adds	r1, r2, #0
    b2ae:	1c22      	adds	r2, r4, #0
    b2b0:	f7fe ebc0 	blx	9a34 <_init+0x290>
    b2b4:	1c3b      	adds	r3, r7, #0
    b2b6:	3360      	adds	r3, #96
    b2b8:	1c3a      	adds	r2, r7, #0
    b2ba:	3264      	adds	r2, #100
    b2bc:	6efc      	ldr	r4, [r7, #108]
    b2be:	1c18      	adds	r0, r3, #0
    b2c0:	1c11      	adds	r1, r2, #0
    b2c2:	1c22      	adds	r2, r4, #0
    b2c4:	f000 ffba 	bl	c23c <_Z9AppendLogSsPKc>
    b2c8:	1c3b      	adds	r3, r7, #0
    b2ca:	3360      	adds	r3, #96
    b2cc:	1c18      	adds	r0, r3, #0
    b2ce:	f7fe eb46 	blx	995c <_init+0x1b8>
    b2d2:	1c3b      	adds	r3, r7, #0
    b2d4:	3364      	adds	r3, #100
    b2d6:	1c18      	adds	r0, r3, #0
    b2d8:	f7fe eb40 	blx	995c <_init+0x1b8>
    b2dc:	1c3b      	adds	r3, r7, #0
    b2de:	336b      	adds	r3, #107
    b2e0:	1c18      	adds	r0, r3, #0
    b2e2:	f7fe ebea 	blx	9ab8 <_init+0x314>
    }
}
    b2e6:	46bd      	mov	sp, r7
    b2e8:	b021      	add	sp, #132
    b2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2ec:	0000d8ac 	.word	0x0000d8ac
    b2f0:	80000000 	.word	0x80000000
    b2f4:	0000d8c8 	.word	0x0000d8c8
    b2f8:	00016784 	.word	0x00016784
    b2fc:	000167e8 	.word	0x000167e8
    b300:	0000d8f8 	.word	0x0000d8f8

0000b304 <_ZN10FfPipeline19ThInitiateRecordingEv>:
  pthread_mutex_unlock(&mutex);

  return retval;
}

int FfPipeline::ThInitiateRecording()
    b304:	b590      	push	{r4, r7, lr}
    b306:	b08b      	sub	sp, #44
    b308:	af00      	add	r7, sp, #0
    b30a:	6078      	str	r0, [r7, #4]
{
  const char *class_name = "FfPipeline::ThInitiateRecording";
    b30c:	4b3b      	ldr	r3, [pc, #236]	(b3fc <_ZN10FfPipeline19ThInitiateRecordingEv+0xf8>)
    b30e:	627b      	str	r3, [r7, #36]
  pthread_t ptid;

  sprintf(str, "DEBUG: Pipeline slot '%d'. Try to starting thread with stopping...\n", Slot);
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	791b      	ldrb	r3, [r3, #4]
    b314:	1c1c      	adds	r4, r3, #0
    b316:	4b3a      	ldr	r3, [pc, #232]	(b400 <_ZN10FfPipeline19ThInitiateRecordingEv+0xfc>)
    b318:	4a3a      	ldr	r2, [pc, #232]	(b404 <_ZN10FfPipeline19ThInitiateRecordingEv+0x100>)
    b31a:	1c18      	adds	r0, r3, #0
    b31c:	1c11      	adds	r1, r2, #0
    b31e:	1c22      	adds	r2, r4, #0
    b320:	f7fe ec60 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    b324:	1c3b      	adds	r3, r7, #0
    b326:	3317      	adds	r3, #23
    b328:	1c18      	adds	r0, r3, #0
    b32a:	f7fe ec2c 	blx	9b84 <_init+0x3e0>
    b32e:	1c3b      	adds	r3, r7, #0
    b330:	3310      	adds	r3, #16
    b332:	4a33      	ldr	r2, [pc, #204]	(b400 <_ZN10FfPipeline19ThInitiateRecordingEv+0xfc>)
    b334:	1c3c      	adds	r4, r7, #0
    b336:	3417      	adds	r4, #23
    b338:	1c18      	adds	r0, r3, #0
    b33a:	1c11      	adds	r1, r2, #0
    b33c:	1c22      	adds	r2, r4, #0
    b33e:	f7fe eb7a 	blx	9a34 <_init+0x290>
    b342:	1c3b      	adds	r3, r7, #0
    b344:	330c      	adds	r3, #12
    b346:	1c3a      	adds	r2, r7, #0
    b348:	3210      	adds	r2, #16
    b34a:	6a7c      	ldr	r4, [r7, #36]
    b34c:	1c18      	adds	r0, r3, #0
    b34e:	1c11      	adds	r1, r2, #0
    b350:	1c22      	adds	r2, r4, #0
    b352:	f000 ff73 	bl	c23c <_Z9AppendLogSsPKc>
    b356:	1c3b      	adds	r3, r7, #0
    b358:	330c      	adds	r3, #12
    b35a:	1c18      	adds	r0, r3, #0
    b35c:	f7fe eafe 	blx	995c <_init+0x1b8>
    b360:	1c3b      	adds	r3, r7, #0
    b362:	3310      	adds	r3, #16
    b364:	1c18      	adds	r0, r3, #0
    b366:	f7fe eafa 	blx	995c <_init+0x1b8>
    b36a:	1c3b      	adds	r3, r7, #0
    b36c:	3317      	adds	r3, #23
    b36e:	1c18      	adds	r0, r3, #0
    b370:	f7fe eba2 	blx	9ab8 <_init+0x314>

  pthread_create(&ptid, NULL, &ThRecording, (void *) this);
    b374:	1c3b      	adds	r3, r7, #0
    b376:	3308      	adds	r3, #8
    b378:	4a23      	ldr	r2, [pc, #140]	(b408 <_ZN10FfPipeline19ThInitiateRecordingEv+0x104>)
    b37a:	687c      	ldr	r4, [r7, #4]
    b37c:	1c18      	adds	r0, r3, #0
    b37e:	2100      	movs	r1, #0
    b380:	1c23      	adds	r3, r4, #0
    b382:	f7fe eb40 	blx	9a04 <_init+0x260>

  pthread_detach(ptid);
    b386:	68bb      	ldr	r3, [r7, #8]
    b388:	1c18      	adds	r0, r3, #0
    b38a:	f7fe ec02 	blx	9b90 <_init+0x3ec>

  sprintf(str, "DEBUG: Pipeline slot '%d'. Starting thread ended!\n", Slot);
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	791b      	ldrb	r3, [r3, #4]
    b392:	1c1c      	adds	r4, r3, #0
    b394:	4b1a      	ldr	r3, [pc, #104]	(b400 <_ZN10FfPipeline19ThInitiateRecordingEv+0xfc>)
    b396:	4a1d      	ldr	r2, [pc, #116]	(b40c <_ZN10FfPipeline19ThInitiateRecordingEv+0x108>)
    b398:	1c18      	adds	r0, r3, #0
    b39a:	1c11      	adds	r1, r2, #0
    b39c:	1c22      	adds	r2, r4, #0
    b39e:	f7fe ec22 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    b3a2:	1c3b      	adds	r3, r7, #0
    b3a4:	3323      	adds	r3, #35
    b3a6:	1c18      	adds	r0, r3, #0
    b3a8:	f7fe ebec 	blx	9b84 <_init+0x3e0>
    b3ac:	1c3b      	adds	r3, r7, #0
    b3ae:	331c      	adds	r3, #28
    b3b0:	4a13      	ldr	r2, [pc, #76]	(b400 <_ZN10FfPipeline19ThInitiateRecordingEv+0xfc>)
    b3b2:	1c3c      	adds	r4, r7, #0
    b3b4:	3423      	adds	r4, #35
    b3b6:	1c18      	adds	r0, r3, #0
    b3b8:	1c11      	adds	r1, r2, #0
    b3ba:	1c22      	adds	r2, r4, #0
    b3bc:	f7fe eb3a 	blx	9a34 <_init+0x290>
    b3c0:	1c3b      	adds	r3, r7, #0
    b3c2:	3318      	adds	r3, #24
    b3c4:	1c3a      	adds	r2, r7, #0
    b3c6:	321c      	adds	r2, #28
    b3c8:	6a7c      	ldr	r4, [r7, #36]
    b3ca:	1c18      	adds	r0, r3, #0
    b3cc:	1c11      	adds	r1, r2, #0
    b3ce:	1c22      	adds	r2, r4, #0
    b3d0:	f000 ff34 	bl	c23c <_Z9AppendLogSsPKc>
    b3d4:	1c3b      	adds	r3, r7, #0
    b3d6:	3318      	adds	r3, #24
    b3d8:	1c18      	adds	r0, r3, #0
    b3da:	f7fe eac0 	blx	995c <_init+0x1b8>
    b3de:	1c3b      	adds	r3, r7, #0
    b3e0:	331c      	adds	r3, #28
    b3e2:	1c18      	adds	r0, r3, #0
    b3e4:	f7fe eaba 	blx	995c <_init+0x1b8>
    b3e8:	1c3b      	adds	r3, r7, #0
    b3ea:	3323      	adds	r3, #35
    b3ec:	1c18      	adds	r0, r3, #0
    b3ee:	f7fe eb64 	blx	9ab8 <_init+0x314>

  return 0;
    b3f2:	2300      	movs	r3, #0
}
    b3f4:	1c18      	adds	r0, r3, #0
    b3f6:	46bd      	mov	sp, r7
    b3f8:	b00b      	add	sp, #44
    b3fa:	bd90      	pop	{r4, r7, pc}
    b3fc:	0000d94c 	.word	0x0000d94c
    b400:	000167e8 	.word	0x000167e8
    b404:	0000d96c 	.word	0x0000d96c
    b408:	0000c1c1 	.word	0x0000c1c1
    b40c:	0000d9b0 	.word	0x0000d9b0

0000b410 <_ZN10FfPipeline5StartEv>:
RecordingState FfPipeline::GetRecState()
{
  return RecState;
}

int FfPipeline::Start()
    b410:	b580      	push	{r7, lr}
    b412:	b082      	sub	sp, #8
    b414:	af00      	add	r7, sp, #0
    b416:	6078      	str	r0, [r7, #4]
{
	return ThInitiateRecording();
    b418:	687b      	ldr	r3, [r7, #4]
    b41a:	1c18      	adds	r0, r3, #0
    b41c:	f7ff ff72 	bl	b304 <_ZN10FfPipeline19ThInitiateRecordingEv>
    b420:	1c03      	adds	r3, r0, #0
    b422:	469c      	mov	ip, r3
    b424:	4663      	mov	r3, ip
}
    b426:	1c18      	adds	r0, r3, #0
    b428:	46bd      	mov	sp, r7
    b42a:	b002      	add	sp, #8
    b42c:	bd80      	pop	{r7, pc}
    b42e:	46c0      	nop			(mov r8, r8)

0000b430 <_ZN10FfPipeline10IsNeedStopEv>:
bool FfPipeline::IsWaitingKeyframe()
{
  return WaitKeyframeFlag;
}

bool FfPipeline::IsNeedStop()
    b430:	b580      	push	{r7, lr}
    b432:	b08a      	sub	sp, #40
    b434:	af00      	add	r7, sp, #0
    b436:	6078      	str	r0, [r7, #4]
{
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
    b438:	1c3b      	adds	r3, r7, #0
    b43a:	330c      	adds	r3, #12
    b43c:	603b      	str	r3, [r7, #0]
    b43e:	2300      	movs	r3, #0
    b440:	683a      	ldr	r2, [r7, #0]
    b442:	6013      	str	r3, [r2, #0]
    b444:	683b      	ldr	r3, [r7, #0]
    b446:	3304      	adds	r3, #4
    b448:	603b      	str	r3, [r7, #0]
    b44a:	2300      	movs	r3, #0
    b44c:	683a      	ldr	r2, [r7, #0]
    b44e:	6013      	str	r3, [r2, #0]
    b450:	683b      	ldr	r3, [r7, #0]
    b452:	3304      	adds	r3, #4
    b454:	603b      	str	r3, [r7, #0]
    b456:	2300      	movs	r3, #0
    b458:	683a      	ldr	r2, [r7, #0]
    b45a:	6013      	str	r3, [r2, #0]
    b45c:	683b      	ldr	r3, [r7, #0]
    b45e:	3304      	adds	r3, #4
    b460:	603b      	str	r3, [r7, #0]
    b462:	2300      	movs	r3, #0
    b464:	683a      	ldr	r2, [r7, #0]
    b466:	6013      	str	r3, [r2, #0]
    b468:	683b      	ldr	r3, [r7, #0]
    b46a:	3304      	adds	r3, #4
    b46c:	603b      	str	r3, [r7, #0]
    b46e:	2300      	movs	r3, #0
    b470:	683a      	ldr	r2, [r7, #0]
    b472:	6013      	str	r3, [r2, #0]
    b474:	683b      	ldr	r3, [r7, #0]
    b476:	3304      	adds	r3, #4
    b478:	603b      	str	r3, [r7, #0]
    b47a:	2300      	movs	r3, #0
    b47c:	683a      	ldr	r2, [r7, #0]
    b47e:	6013      	str	r3, [r2, #0]
    b480:	683b      	ldr	r3, [r7, #0]
    b482:	3304      	adds	r3, #4
  bool retval;

  pthread_mutex_lock(&mutex);
    b484:	1c3b      	adds	r3, r7, #0
    b486:	330c      	adds	r3, #12
    b488:	1c18      	adds	r0, r3, #0
    b48a:	f7fe eaaa 	blx	99e0 <_init+0x23c>
  retval = IsNeedStopFlag;
    b48e:	1c39      	adds	r1, r7, #0
    b490:	3127      	adds	r1, #39
    b492:	687a      	ldr	r2, [r7, #4]
    b494:	2328      	movs	r3, #40
    b496:	5cd3      	ldrb	r3, [r2, r3]
    b498:	700b      	strb	r3, [r1, #0]
  pthread_mutex_unlock(&mutex);
    b49a:	1c3b      	adds	r3, r7, #0
    b49c:	330c      	adds	r3, #12
    b49e:	1c18      	adds	r0, r3, #0
    b4a0:	f7fe ea86 	blx	99b0 <_init+0x20c>

  return retval;
    b4a4:	1c3b      	adds	r3, r7, #0
    b4a6:	3327      	adds	r3, #39
    b4a8:	781b      	ldrb	r3, [r3, #0]
}
    b4aa:	1c18      	adds	r0, r3, #0
    b4ac:	46bd      	mov	sp, r7
    b4ae:	b00a      	add	sp, #40
    b4b0:	bd80      	pop	{r7, pc}
    b4b2:	46c0      	nop			(mov r8, r8)

0000b4b4 <_ZN10FfPipeline11SetNeedStopEv>:
  pthread_mutex_lock(&mutex);
  IsNeedStopFlag = false;
  pthread_mutex_unlock(&mutex);
}

void FfPipeline::SetNeedStop()
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b088      	sub	sp, #32
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	6078      	str	r0, [r7, #4]
{
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
    b4bc:	1c3b      	adds	r3, r7, #0
    b4be:	3308      	adds	r3, #8
    b4c0:	603b      	str	r3, [r7, #0]
    b4c2:	2300      	movs	r3, #0
    b4c4:	683a      	ldr	r2, [r7, #0]
    b4c6:	6013      	str	r3, [r2, #0]
    b4c8:	683b      	ldr	r3, [r7, #0]
    b4ca:	3304      	adds	r3, #4
    b4cc:	603b      	str	r3, [r7, #0]
    b4ce:	2300      	movs	r3, #0
    b4d0:	683a      	ldr	r2, [r7, #0]
    b4d2:	6013      	str	r3, [r2, #0]
    b4d4:	683b      	ldr	r3, [r7, #0]
    b4d6:	3304      	adds	r3, #4
    b4d8:	603b      	str	r3, [r7, #0]
    b4da:	2300      	movs	r3, #0
    b4dc:	683a      	ldr	r2, [r7, #0]
    b4de:	6013      	str	r3, [r2, #0]
    b4e0:	683b      	ldr	r3, [r7, #0]
    b4e2:	3304      	adds	r3, #4
    b4e4:	603b      	str	r3, [r7, #0]
    b4e6:	2300      	movs	r3, #0
    b4e8:	683a      	ldr	r2, [r7, #0]
    b4ea:	6013      	str	r3, [r2, #0]
    b4ec:	683b      	ldr	r3, [r7, #0]
    b4ee:	3304      	adds	r3, #4
    b4f0:	603b      	str	r3, [r7, #0]
    b4f2:	2300      	movs	r3, #0
    b4f4:	683a      	ldr	r2, [r7, #0]
    b4f6:	6013      	str	r3, [r2, #0]
    b4f8:	683b      	ldr	r3, [r7, #0]
    b4fa:	3304      	adds	r3, #4
    b4fc:	603b      	str	r3, [r7, #0]
    b4fe:	2300      	movs	r3, #0
    b500:	683a      	ldr	r2, [r7, #0]
    b502:	6013      	str	r3, [r2, #0]
    b504:	683b      	ldr	r3, [r7, #0]
    b506:	3304      	adds	r3, #4

  pthread_mutex_lock(&mutex);
    b508:	1c3b      	adds	r3, r7, #0
    b50a:	3308      	adds	r3, #8
    b50c:	1c18      	adds	r0, r3, #0
    b50e:	f7fe ea68 	blx	99e0 <_init+0x23c>
  IsNeedStopFlag = true;
    b512:	6879      	ldr	r1, [r7, #4]
    b514:	2228      	movs	r2, #40
    b516:	2301      	movs	r3, #1
    b518:	548b      	strb	r3, [r1, r2]
  pthread_mutex_unlock(&mutex);
    b51a:	1c3b      	adds	r3, r7, #0
    b51c:	3308      	adds	r3, #8
    b51e:	1c18      	adds	r0, r3, #0
    b520:	f7fe ea46 	blx	99b0 <_init+0x20c>
}
    b524:	46bd      	mov	sp, r7
    b526:	b008      	add	sp, #32
    b528:	bd80      	pop	{r7, pc}
    b52a:	46c0      	nop			(mov r8, r8)

0000b52c <_ZN10FfPipeline16SetPartnerToStopEv>:
void FfPipeline::SetRecState(RecordingState rst)
{
  RecState = rst;
}

int FfPipeline::SetPartnerToStop()
    b52c:	b590      	push	{r4, r7, lr}
    b52e:	b089      	sub	sp, #36
    b530:	af00      	add	r7, sp, #0
    b532:	6078      	str	r0, [r7, #4]
{
  const char *class_name = "FfPipeline::SetPartnerToStop";
    b534:	4b1f      	ldr	r3, [pc, #124]	(b5b4 <_ZN10FfPipeline16SetPartnerToStopEv+0x88>)
    b536:	61bb      	str	r3, [r7, #24]
  FfPipeline *Pipe = (FfPipeline *) PartnerPipePointer;
    b538:	687b      	ldr	r3, [r7, #4]
    b53a:	681b      	ldr	r3, [r3, #0]
    b53c:	61fb      	str	r3, [r7, #28]

  Pipe->SetNeedStop();
    b53e:	69fb      	ldr	r3, [r7, #28]
    b540:	1c18      	adds	r0, r3, #0
    b542:	f7ff ffb7 	bl	b4b4 <_ZN10FfPipeline11SetNeedStopEv>

  sprintf(str, "DEBUG: Slot '%d' was marked for stopping by SetNeedStopFlag().\n", Pipe->Slot);
    b546:	69fb      	ldr	r3, [r7, #28]
    b548:	791b      	ldrb	r3, [r3, #4]
    b54a:	1c1c      	adds	r4, r3, #0
    b54c:	4b1a      	ldr	r3, [pc, #104]	(b5b8 <_ZN10FfPipeline16SetPartnerToStopEv+0x8c>)
    b54e:	4a1b      	ldr	r2, [pc, #108]	(b5bc <_ZN10FfPipeline16SetPartnerToStopEv+0x90>)
    b550:	1c18      	adds	r0, r3, #0
    b552:	1c11      	adds	r1, r2, #0
    b554:	1c22      	adds	r2, r4, #0
    b556:	f7fe eb46 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    b55a:	1c3b      	adds	r3, r7, #0
    b55c:	3317      	adds	r3, #23
    b55e:	1c18      	adds	r0, r3, #0
    b560:	f7fe eb10 	blx	9b84 <_init+0x3e0>
    b564:	1c3b      	adds	r3, r7, #0
    b566:	3310      	adds	r3, #16
    b568:	4a13      	ldr	r2, [pc, #76]	(b5b8 <_ZN10FfPipeline16SetPartnerToStopEv+0x8c>)
    b56a:	1c3c      	adds	r4, r7, #0
    b56c:	3417      	adds	r4, #23
    b56e:	1c18      	adds	r0, r3, #0
    b570:	1c11      	adds	r1, r2, #0
    b572:	1c22      	adds	r2, r4, #0
    b574:	f7fe ea5e 	blx	9a34 <_init+0x290>
    b578:	1c3b      	adds	r3, r7, #0
    b57a:	330c      	adds	r3, #12
    b57c:	1c3a      	adds	r2, r7, #0
    b57e:	3210      	adds	r2, #16
    b580:	69bc      	ldr	r4, [r7, #24]
    b582:	1c18      	adds	r0, r3, #0
    b584:	1c11      	adds	r1, r2, #0
    b586:	1c22      	adds	r2, r4, #0
    b588:	f000 fe58 	bl	c23c <_Z9AppendLogSsPKc>
    b58c:	1c3b      	adds	r3, r7, #0
    b58e:	330c      	adds	r3, #12
    b590:	1c18      	adds	r0, r3, #0
    b592:	f7fe e9e4 	blx	995c <_init+0x1b8>
    b596:	1c3b      	adds	r3, r7, #0
    b598:	3310      	adds	r3, #16
    b59a:	1c18      	adds	r0, r3, #0
    b59c:	f7fe e9de 	blx	995c <_init+0x1b8>
    b5a0:	1c3b      	adds	r3, r7, #0
    b5a2:	3317      	adds	r3, #23
    b5a4:	1c18      	adds	r0, r3, #0
    b5a6:	f7fe ea88 	blx	9ab8 <_init+0x314>
  return 0;
    b5aa:	2300      	movs	r3, #0
}
    b5ac:	1c18      	adds	r0, r3, #0
    b5ae:	46bd      	mov	sp, r7
    b5b0:	b009      	add	sp, #36
    b5b2:	bd90      	pop	{r4, r7, pc}
    b5b4:	0000d9e4 	.word	0x0000d9e4
    b5b8:	000167e8 	.word	0x000167e8
    b5bc:	0000da04 	.word	0x0000da04

0000b5c0 <_ZN10FfPipeline13ClearNeedStopEv>:
void FfPipeline::r_avformat_close_input_v24(AVFormatContext **ps)
{
  return avformat_close_input(ps);
}

void FfPipeline::ClearNeedStop()
    b5c0:	b580      	push	{r7, lr}
    b5c2:	b088      	sub	sp, #32
    b5c4:	af00      	add	r7, sp, #0
    b5c6:	6078      	str	r0, [r7, #4]
{
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
    b5c8:	1c3b      	adds	r3, r7, #0
    b5ca:	3308      	adds	r3, #8
    b5cc:	603b      	str	r3, [r7, #0]
    b5ce:	2300      	movs	r3, #0
    b5d0:	683a      	ldr	r2, [r7, #0]
    b5d2:	6013      	str	r3, [r2, #0]
    b5d4:	683b      	ldr	r3, [r7, #0]
    b5d6:	3304      	adds	r3, #4
    b5d8:	603b      	str	r3, [r7, #0]
    b5da:	2300      	movs	r3, #0
    b5dc:	683a      	ldr	r2, [r7, #0]
    b5de:	6013      	str	r3, [r2, #0]
    b5e0:	683b      	ldr	r3, [r7, #0]
    b5e2:	3304      	adds	r3, #4
    b5e4:	603b      	str	r3, [r7, #0]
    b5e6:	2300      	movs	r3, #0
    b5e8:	683a      	ldr	r2, [r7, #0]
    b5ea:	6013      	str	r3, [r2, #0]
    b5ec:	683b      	ldr	r3, [r7, #0]
    b5ee:	3304      	adds	r3, #4
    b5f0:	603b      	str	r3, [r7, #0]
    b5f2:	2300      	movs	r3, #0
    b5f4:	683a      	ldr	r2, [r7, #0]
    b5f6:	6013      	str	r3, [r2, #0]
    b5f8:	683b      	ldr	r3, [r7, #0]
    b5fa:	3304      	adds	r3, #4
    b5fc:	603b      	str	r3, [r7, #0]
    b5fe:	2300      	movs	r3, #0
    b600:	683a      	ldr	r2, [r7, #0]
    b602:	6013      	str	r3, [r2, #0]
    b604:	683b      	ldr	r3, [r7, #0]
    b606:	3304      	adds	r3, #4
    b608:	603b      	str	r3, [r7, #0]
    b60a:	2300      	movs	r3, #0
    b60c:	683a      	ldr	r2, [r7, #0]
    b60e:	6013      	str	r3, [r2, #0]
    b610:	683b      	ldr	r3, [r7, #0]
    b612:	3304      	adds	r3, #4

  pthread_mutex_lock(&mutex);
    b614:	1c3b      	adds	r3, r7, #0
    b616:	3308      	adds	r3, #8
    b618:	1c18      	adds	r0, r3, #0
    b61a:	f7fe e9e2 	blx	99e0 <_init+0x23c>
  IsNeedStopFlag = false;
    b61e:	6879      	ldr	r1, [r7, #4]
    b620:	2228      	movs	r2, #40
    b622:	2300      	movs	r3, #0
    b624:	548b      	strb	r3, [r1, r2]
  pthread_mutex_unlock(&mutex);
    b626:	1c3b      	adds	r3, r7, #0
    b628:	3308      	adds	r3, #8
    b62a:	1c18      	adds	r0, r3, #0
    b62c:	f7fe e9c0 	blx	99b0 <_init+0x20c>
}
    b630:	46bd      	mov	sp, r7
    b632:	b008      	add	sp, #32
    b634:	bd80      	pop	{r7, pc}
    b636:	46c0      	nop			(mov r8, r8)

0000b638 <_ZN10FfPipeline11DoRecordingEv>:
  pkt->pts = av_rescale_q(pkt->pts, in_stream->time_base, out_stream->time_base);
  pkt->dts = av_rescale_q(pkt->dts, in_stream->time_base, out_stream->time_base);
  pkt->duration = av_rescale_q(pkt->duration, in_stream->time_base, out_stream->time_base);
}

int FfPipeline::DoRecording(void)
    b638:	b5b0      	push	{r4, r5, r7, lr}
    b63a:	4ceb      	ldr	r4, [pc, #940]	(b9e8 <_ZN10FfPipeline11DoRecordingEv+0x3b0>)
    b63c:	44a5      	add	sp, r4
    b63e:	af02      	add	r7, sp, #8
    b640:	60f8      	str	r0, [r7, #12]
{
  const char *class_name = "FfPipeline::DoRecording";
    b642:	4bea      	ldr	r3, [pc, #936]	(b9ec <_ZN10FfPipeline11DoRecordingEv+0x3b4>)
    b644:	208f      	movs	r0, #143
    b646:	0100      	lsls	r0, r0, #4
    b648:	19c0      	adds	r0, r0, r7
    b64a:	6003      	str	r3, [r0, #0]
  AVFormatContext *ifcx = NULL;
    b64c:	2300      	movs	r3, #0
    b64e:	49e8      	ldr	r1, [pc, #928]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b650:	19c9      	adds	r1, r1, r7
    b652:	600b      	str	r3, [r1, #0]
  AVFormatContext *ofcx = NULL;
    b654:	2300      	movs	r3, #0
    b656:	4ae7      	ldr	r2, [pc, #924]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b658:	19d2      	adds	r2, r2, r7
    b65a:	6013      	str	r3, [r2, #0]
  AVDictionary *opts = NULL;
    b65c:	2300      	movs	r3, #0
    b65e:	2086      	movs	r0, #134
    b660:	0100      	lsls	r0, r0, #4
    b662:	19c0      	adds	r0, r0, r7
    b664:	6003      	str	r3, [r0, #0]
  AVOutputFormat *ofmt = NULL;
    b666:	2300      	movs	r3, #0
    b668:	49e3      	ldr	r1, [pc, #908]	(b9f8 <_ZN10FfPipeline11DoRecordingEv+0x3c0>)
    b66a:	19c9      	adds	r1, r1, r7
    b66c:	600b      	str	r3, [r1, #0]
  AVPacket pkt;
  uint64_t a_packets = 0, v_packets = 0;
    b66e:	2300      	movs	r3, #0
    b670:	2400      	movs	r4, #0
    b672:	4ae2      	ldr	r2, [pc, #904]	(b9fc <_ZN10FfPipeline11DoRecordingEv+0x3c4>)
    b674:	19d2      	adds	r2, r2, r7
    b676:	6013      	str	r3, [r2, #0]
    b678:	6054      	str	r4, [r2, #4]
    b67a:	2300      	movs	r3, #0
    b67c:	2400      	movs	r4, #0
    b67e:	2090      	movs	r0, #144
    b680:	0100      	lsls	r0, r0, #4
    b682:	19c0      	adds	r0, r0, r7
    b684:	6003      	str	r3, [r0, #0]
    b686:	6044      	str	r4, [r0, #4]
  size_t i;
  int ret;
  char path[BUF_SIZE];

  sprintf(path, "%s_%d.mkv", SAVE_PATH, ++Count);
    b688:	4bdd      	ldr	r3, [pc, #884]	(ba00 <_ZN10FfPipeline11DoRecordingEv+0x3c8>)
    b68a:	681b      	ldr	r3, [r3, #0]
    b68c:	1c5a      	adds	r2, r3, #1
    b68e:	4bdc      	ldr	r3, [pc, #880]	(ba00 <_ZN10FfPipeline11DoRecordingEv+0x3c8>)
    b690:	601a      	str	r2, [r3, #0]
    b692:	4bdb      	ldr	r3, [pc, #876]	(ba00 <_ZN10FfPipeline11DoRecordingEv+0x3c8>)
    b694:	681d      	ldr	r5, [r3, #0]
    b696:	1c3b      	adds	r3, r7, #0
    b698:	3310      	adds	r3, #16
    b69a:	4ada      	ldr	r2, [pc, #872]	(ba04 <_ZN10FfPipeline11DoRecordingEv+0x3cc>)
    b69c:	4cda      	ldr	r4, [pc, #872]	(ba08 <_ZN10FfPipeline11DoRecordingEv+0x3d0>)
    b69e:	1c18      	adds	r0, r3, #0
    b6a0:	1c11      	adds	r1, r2, #0
    b6a2:	1c22      	adds	r2, r4, #0
    b6a4:	1c2b      	adds	r3, r5, #0
    b6a6:	f7fe ea9e 	blx	9be4 <_init+0x440>

  sprintf(str, "DEBUG: Output path: '%s'\n", path);
    b6aa:	4bd8      	ldr	r3, [pc, #864]	(ba0c <_ZN10FfPipeline11DoRecordingEv+0x3d4>)
    b6ac:	4ad8      	ldr	r2, [pc, #864]	(ba10 <_ZN10FfPipeline11DoRecordingEv+0x3d8>)
    b6ae:	1c3c      	adds	r4, r7, #0
    b6b0:	3410      	adds	r4, #16
    b6b2:	1c18      	adds	r0, r3, #0
    b6b4:	1c11      	adds	r1, r2, #0
    b6b6:	1c22      	adds	r2, r4, #0
    b6b8:	f7fe ea94 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    b6bc:	49d5      	ldr	r1, [pc, #852]	(ba14 <_ZN10FfPipeline11DoRecordingEv+0x3dc>)
    b6be:	187b      	adds	r3, r7, r1
    b6c0:	1c18      	adds	r0, r3, #0
    b6c2:	f7fe ea60 	blx	9b84 <_init+0x3e0>
    b6c6:	2287      	movs	r2, #135
    b6c8:	0112      	lsls	r2, r2, #4
    b6ca:	18bb      	adds	r3, r7, r2
    b6cc:	4acf      	ldr	r2, [pc, #828]	(ba0c <_ZN10FfPipeline11DoRecordingEv+0x3d4>)
    b6ce:	48d1      	ldr	r0, [pc, #836]	(ba14 <_ZN10FfPipeline11DoRecordingEv+0x3dc>)
    b6d0:	183c      	adds	r4, r7, r0
    b6d2:	1c18      	adds	r0, r3, #0
    b6d4:	1c11      	adds	r1, r2, #0
    b6d6:	1c22      	adds	r2, r4, #0
    b6d8:	f7fe e9ac 	blx	9a34 <_init+0x290>
    b6dc:	49ce      	ldr	r1, [pc, #824]	(ba18 <_ZN10FfPipeline11DoRecordingEv+0x3e0>)
    b6de:	187b      	adds	r3, r7, r1
    b6e0:	2087      	movs	r0, #135
    b6e2:	0100      	lsls	r0, r0, #4
    b6e4:	183a      	adds	r2, r7, r0
    b6e6:	218f      	movs	r1, #143
    b6e8:	0109      	lsls	r1, r1, #4
    b6ea:	19c9      	adds	r1, r1, r7
    b6ec:	680c      	ldr	r4, [r1, #0]
    b6ee:	1c18      	adds	r0, r3, #0
    b6f0:	1c11      	adds	r1, r2, #0
    b6f2:	1c22      	adds	r2, r4, #0
    b6f4:	f000 fda2 	bl	c23c <_Z9AppendLogSsPKc>
    b6f8:	4ac7      	ldr	r2, [pc, #796]	(ba18 <_ZN10FfPipeline11DoRecordingEv+0x3e0>)
    b6fa:	18bb      	adds	r3, r7, r2
    b6fc:	1c18      	adds	r0, r3, #0
    b6fe:	f7fe e92e 	blx	995c <_init+0x1b8>
    b702:	2087      	movs	r0, #135
    b704:	0100      	lsls	r0, r0, #4
    b706:	183b      	adds	r3, r7, r0
    b708:	1c18      	adds	r0, r3, #0
    b70a:	f7fe e928 	blx	995c <_init+0x1b8>
    b70e:	49c1      	ldr	r1, [pc, #772]	(ba14 <_ZN10FfPipeline11DoRecordingEv+0x3dc>)
    b710:	187b      	adds	r3, r7, r1
    b712:	1c18      	adds	r0, r3, #0
    b714:	f7fe e9d0 	blx	9ab8 <_init+0x314>

  av_dict_set(&opts, "rtsp_transport", "tcp", 0);
    b718:	2286      	movs	r2, #134
    b71a:	0112      	lsls	r2, r2, #4
    b71c:	18bb      	adds	r3, r7, r2
    b71e:	4abf      	ldr	r2, [pc, #764]	(ba1c <_ZN10FfPipeline11DoRecordingEv+0x3e4>)
    b720:	4cbf      	ldr	r4, [pc, #764]	(ba20 <_ZN10FfPipeline11DoRecordingEv+0x3e8>)
    b722:	1c18      	adds	r0, r3, #0
    b724:	1c11      	adds	r1, r2, #0
    b726:	1c22      	adds	r2, r4, #0
    b728:	2300      	movs	r3, #0
    b72a:	f7fe e85e 	blx	97e8 <_init+0x44>

  if (avformat_open_input(&ifcx, CAM_URL, NULL, &opts) < 0)
    b72e:	48b0      	ldr	r0, [pc, #704]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b730:	183b      	adds	r3, r7, r0
    b732:	4abc      	ldr	r2, [pc, #752]	(ba24 <_ZN10FfPipeline11DoRecordingEv+0x3ec>)
    b734:	2186      	movs	r1, #134
    b736:	0109      	lsls	r1, r1, #4
    b738:	187c      	adds	r4, r7, r1
    b73a:	1c18      	adds	r0, r3, #0
    b73c:	1c11      	adds	r1, r2, #0
    b73e:	2200      	movs	r2, #0
    b740:	1c23      	adds	r3, r4, #0
    b742:	f7fe e930 	blx	99a4 <_init+0x200>
    b746:	1c03      	adds	r3, r0, #0
    b748:	0fdb      	lsrs	r3, r3, #31
    b74a:	061b      	lsls	r3, r3, #24
    b74c:	0e1b      	lsrs	r3, r3, #24
    b74e:	2b00      	cmp	r3, #0
    b750:	d015      	beq.n	b77e <_ZN10FfPipeline11DoRecordingEv+0x146>
    {
      avformat_close_input(&ifcx);
    b752:	4aa7      	ldr	r2, [pc, #668]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b754:	18bb      	adds	r3, r7, r2
    b756:	1c18      	adds	r0, r3, #0
    b758:	f7fe ea0e 	blx	9b78 <_init+0x3d4>
      ifcx = NULL;
    b75c:	2300      	movs	r3, #0
    b75e:	48a4      	ldr	r0, [pc, #656]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b760:	19c0      	adds	r0, r0, r7
    b762:	6003      	str	r3, [r0, #0]

      av_dict_free(&opts);
    b764:	2186      	movs	r1, #134
    b766:	0109      	lsls	r1, r1, #4
    b768:	187b      	adds	r3, r7, r1
    b76a:	1c18      	adds	r0, r3, #0
    b76c:	f7fe e914 	blx	9998 <_init+0x1f4>

      return -1;
    b770:	2201      	movs	r2, #1
    b772:	603a      	str	r2, [r7, #0]
    b774:	683b      	ldr	r3, [r7, #0]
    b776:	425b      	negs	r3, r3
    b778:	603b      	str	r3, [r7, #0]
    b77a:	f000 fce6 	bl	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
    }
  else
    {
    }

  av_dict_free(&opts);
    b77e:	2086      	movs	r0, #134
    b780:	0100      	lsls	r0, r0, #4
    b782:	183b      	adds	r3, r7, r0
    b784:	1c18      	adds	r0, r3, #0
    b786:	f7fe e908 	blx	9998 <_init+0x1f4>

  if (avformat_find_stream_info(ifcx, NULL) < 0)
    b78a:	4999      	ldr	r1, [pc, #612]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b78c:	19c9      	adds	r1, r1, r7
    b78e:	680b      	ldr	r3, [r1, #0]
    b790:	1c18      	adds	r0, r3, #0
    b792:	2100      	movs	r1, #0
    b794:	f7fe e8ac 	blx	98f0 <_init+0x14c>
    b798:	1c03      	adds	r3, r0, #0
    b79a:	0fdb      	lsrs	r3, r3, #31
    b79c:	061b      	lsls	r3, r3, #24
    b79e:	0e1b      	lsrs	r3, r3, #24
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d00f      	beq.n	b7c4 <_ZN10FfPipeline11DoRecordingEv+0x18c>
    {
      avformat_close_input(&ifcx);
    b7a4:	4a92      	ldr	r2, [pc, #584]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b7a6:	18bb      	adds	r3, r7, r2
    b7a8:	1c18      	adds	r0, r3, #0
    b7aa:	f7fe e9e6 	blx	9b78 <_init+0x3d4>
      ifcx = NULL;
    b7ae:	2300      	movs	r3, #0
    b7b0:	488f      	ldr	r0, [pc, #572]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b7b2:	19c0      	adds	r0, r0, r7
    b7b4:	6003      	str	r3, [r0, #0]

      return -1;
    b7b6:	2101      	movs	r1, #1
    b7b8:	6039      	str	r1, [r7, #0]
    b7ba:	683a      	ldr	r2, [r7, #0]
    b7bc:	4252      	negs	r2, r2
    b7be:	603a      	str	r2, [r7, #0]
    b7c0:	f000 fcc3 	bl	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
    }

  avformat_alloc_output_context2(&ofcx, NULL, NULL, path);
    b7c4:	488b      	ldr	r0, [pc, #556]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b7c6:	183b      	adds	r3, r7, r0
    b7c8:	1c3c      	adds	r4, r7, #0
    b7ca:	3410      	adds	r4, #16
    b7cc:	1c18      	adds	r0, r3, #0
    b7ce:	2100      	movs	r1, #0
    b7d0:	2200      	movs	r2, #0
    b7d2:	1c23      	adds	r3, r4, #0
    b7d4:	f7fe e958 	blx	9a88 <_init+0x2e4>

  if (ofcx == NULL)
    b7d8:	4986      	ldr	r1, [pc, #536]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b7da:	19c9      	adds	r1, r1, r7
    b7dc:	680b      	ldr	r3, [r1, #0]
    b7de:	2b00      	cmp	r3, #0
    b7e0:	d106      	bne.n	b7f0 <_ZN10FfPipeline11DoRecordingEv+0x1b8>
    {
      return -1;
    b7e2:	2201      	movs	r2, #1
    b7e4:	603a      	str	r2, [r7, #0]
    b7e6:	683b      	ldr	r3, [r7, #0]
    b7e8:	425b      	negs	r3, r3
    b7ea:	603b      	str	r3, [r7, #0]
    b7ec:	f000 fcad 	bl	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
    }
  else
    {
    }

  ofmt = ofcx->oformat;
    b7f0:	4880      	ldr	r0, [pc, #512]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b7f2:	19c0      	adds	r0, r0, r7
    b7f4:	6803      	ldr	r3, [r0, #0]
    b7f6:	689b      	ldr	r3, [r3, #8]
    b7f8:	497f      	ldr	r1, [pc, #508]	(b9f8 <_ZN10FfPipeline11DoRecordingEv+0x3c0>)
    b7fa:	19c9      	adds	r1, r1, r7
    b7fc:	600b      	str	r3, [r1, #0]

  if (ofmt == NULL)
    b7fe:	4a7e      	ldr	r2, [pc, #504]	(b9f8 <_ZN10FfPipeline11DoRecordingEv+0x3c0>)
    b800:	19d2      	adds	r2, r2, r7
    b802:	6813      	ldr	r3, [r2, #0]
    b804:	2b00      	cmp	r3, #0
    b806:	d106      	bne.n	b816 <_ZN10FfPipeline11DoRecordingEv+0x1de>
    {
      return -1;
    b808:	2301      	movs	r3, #1
    b80a:	603b      	str	r3, [r7, #0]
    b80c:	6838      	ldr	r0, [r7, #0]
    b80e:	4240      	negs	r0, r0
    b810:	6038      	str	r0, [r7, #0]
    b812:	f000 fc9a 	bl	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
    }

  for (i = 0; i < ifcx->nb_streams; i++)
    b816:	2300      	movs	r3, #0
    b818:	4983      	ldr	r1, [pc, #524]	(ba28 <_ZN10FfPipeline11DoRecordingEv+0x3f0>)
    b81a:	19c9      	adds	r1, r1, r7
    b81c:	600b      	str	r3, [r1, #0]
    b81e:	e0b2      	b.n	b986 <_ZN10FfPipeline11DoRecordingEv+0x34e>
    {
      AVStream *in_stream = ifcx->streams[i];
    b820:	4a73      	ldr	r2, [pc, #460]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b822:	19d2      	adds	r2, r2, r7
    b824:	6813      	ldr	r3, [r2, #0]
    b826:	69da      	ldr	r2, [r3, #28]
    b828:	487f      	ldr	r0, [pc, #508]	(ba28 <_ZN10FfPipeline11DoRecordingEv+0x3f0>)
    b82a:	19c0      	adds	r0, r0, r7
    b82c:	6803      	ldr	r3, [r0, #0]
    b82e:	009b      	lsls	r3, r3, #2
    b830:	18d3      	adds	r3, r2, r3
    b832:	681b      	ldr	r3, [r3, #0]
    b834:	2191      	movs	r1, #145
    b836:	0109      	lsls	r1, r1, #4
    b838:	19c9      	adds	r1, r1, r7
    b83a:	600b      	str	r3, [r1, #0]
      AVStream *out_stream = avformat_new_stream(ofcx, in_stream->codec->codec);
    b83c:	4b6d      	ldr	r3, [pc, #436]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b83e:	19db      	adds	r3, r3, r7
    b840:	681a      	ldr	r2, [r3, #0]
    b842:	2091      	movs	r0, #145
    b844:	0100      	lsls	r0, r0, #4
    b846:	19c0      	adds	r0, r0, r7
    b848:	6803      	ldr	r3, [r0, #0]
    b84a:	689b      	ldr	r3, [r3, #8]
    b84c:	68db      	ldr	r3, [r3, #12]
    b84e:	1c10      	adds	r0, r2, #0
    b850:	1c19      	adds	r1, r3, #0
    b852:	f7fe e866 	blx	9920 <_init+0x17c>
    b856:	1c03      	adds	r3, r0, #0
    b858:	4974      	ldr	r1, [pc, #464]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b85a:	19c9      	adds	r1, r1, r7
    b85c:	600b      	str	r3, [r1, #0]

      if (!out_stream)
    b85e:	4a73      	ldr	r2, [pc, #460]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b860:	19d2      	adds	r2, r2, r7
    b862:	6813      	ldr	r3, [r2, #0]
    b864:	2b00      	cmp	r3, #0
    b866:	d131      	bne.n	b8cc <_ZN10FfPipeline11DoRecordingEv+0x294>
        {
          AppendLog("Failed allocating output stream\n", class_name);
    b868:	4871      	ldr	r0, [pc, #452]	(ba30 <_ZN10FfPipeline11DoRecordingEv+0x3f8>)
    b86a:	183b      	adds	r3, r7, r0
    b86c:	1c18      	adds	r0, r3, #0
    b86e:	f7fe e98a 	blx	9b84 <_init+0x3e0>
    b872:	4970      	ldr	r1, [pc, #448]	(ba34 <_ZN10FfPipeline11DoRecordingEv+0x3fc>)
    b874:	187b      	adds	r3, r7, r1
    b876:	4a70      	ldr	r2, [pc, #448]	(ba38 <_ZN10FfPipeline11DoRecordingEv+0x400>)
    b878:	486d      	ldr	r0, [pc, #436]	(ba30 <_ZN10FfPipeline11DoRecordingEv+0x3f8>)
    b87a:	183c      	adds	r4, r7, r0
    b87c:	1c18      	adds	r0, r3, #0
    b87e:	1c11      	adds	r1, r2, #0
    b880:	1c22      	adds	r2, r4, #0
    b882:	f7fe e8d8 	blx	9a34 <_init+0x290>
    b886:	496d      	ldr	r1, [pc, #436]	(ba3c <_ZN10FfPipeline11DoRecordingEv+0x404>)
    b888:	187b      	adds	r3, r7, r1
    b88a:	486a      	ldr	r0, [pc, #424]	(ba34 <_ZN10FfPipeline11DoRecordingEv+0x3fc>)
    b88c:	183a      	adds	r2, r7, r0
    b88e:	218f      	movs	r1, #143
    b890:	0109      	lsls	r1, r1, #4
    b892:	19c9      	adds	r1, r1, r7
    b894:	680c      	ldr	r4, [r1, #0]
    b896:	1c18      	adds	r0, r3, #0
    b898:	1c11      	adds	r1, r2, #0
    b89a:	1c22      	adds	r2, r4, #0
    b89c:	f000 fcce 	bl	c23c <_Z9AppendLogSsPKc>
    b8a0:	4a66      	ldr	r2, [pc, #408]	(ba3c <_ZN10FfPipeline11DoRecordingEv+0x404>)
    b8a2:	18bb      	adds	r3, r7, r2
    b8a4:	1c18      	adds	r0, r3, #0
    b8a6:	f7fe e85a 	blx	995c <_init+0x1b8>
    b8aa:	4862      	ldr	r0, [pc, #392]	(ba34 <_ZN10FfPipeline11DoRecordingEv+0x3fc>)
    b8ac:	183b      	adds	r3, r7, r0
    b8ae:	1c18      	adds	r0, r3, #0
    b8b0:	f7fe e854 	blx	995c <_init+0x1b8>
    b8b4:	495e      	ldr	r1, [pc, #376]	(ba30 <_ZN10FfPipeline11DoRecordingEv+0x3f8>)
    b8b6:	187b      	adds	r3, r7, r1
    b8b8:	1c18      	adds	r0, r3, #0
    b8ba:	f7fe e8fe 	blx	9ab8 <_init+0x314>
          return -1;
    b8be:	2201      	movs	r2, #1
    b8c0:	603a      	str	r2, [r7, #0]
    b8c2:	683b      	ldr	r3, [r7, #0]
    b8c4:	425b      	negs	r3, r3
    b8c6:	603b      	str	r3, [r7, #0]
    b8c8:	f000 fc3f 	bl	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
        }

      ret = avcodec_copy_context(out_stream->codec, in_stream->codec);
    b8cc:	4857      	ldr	r0, [pc, #348]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b8ce:	19c0      	adds	r0, r0, r7
    b8d0:	6803      	ldr	r3, [r0, #0]
    b8d2:	689a      	ldr	r2, [r3, #8]
    b8d4:	2191      	movs	r1, #145
    b8d6:	0109      	lsls	r1, r1, #4
    b8d8:	19c9      	adds	r1, r1, r7
    b8da:	680b      	ldr	r3, [r1, #0]
    b8dc:	689b      	ldr	r3, [r3, #8]
    b8de:	1c10      	adds	r0, r2, #0
    b8e0:	1c19      	adds	r1, r3, #0
    b8e2:	f7fe e974 	blx	9bcc <_init+0x428>
    b8e6:	1c03      	adds	r3, r0, #0
    b8e8:	4a55      	ldr	r2, [pc, #340]	(ba40 <_ZN10FfPipeline11DoRecordingEv+0x408>)
    b8ea:	19d2      	adds	r2, r2, r7
    b8ec:	6013      	str	r3, [r2, #0]

      if (ret < 0)
    b8ee:	4854      	ldr	r0, [pc, #336]	(ba40 <_ZN10FfPipeline11DoRecordingEv+0x408>)
    b8f0:	19c0      	adds	r0, r0, r7
    b8f2:	6803      	ldr	r3, [r0, #0]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	da05      	bge.n	b904 <_ZN10FfPipeline11DoRecordingEv+0x2cc>
        {
          return ret;
    b8f8:	4951      	ldr	r1, [pc, #324]	(ba40 <_ZN10FfPipeline11DoRecordingEv+0x408>)
    b8fa:	19c9      	adds	r1, r1, r7
    b8fc:	6809      	ldr	r1, [r1, #0]
    b8fe:	6039      	str	r1, [r7, #0]
    b900:	f000 fc23 	bl	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
        }

      out_stream->time_base = in_stream->time_base;
    b904:	4a49      	ldr	r2, [pc, #292]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b906:	19d2      	adds	r2, r2, r7
    b908:	6813      	ldr	r3, [r2, #0]
    b90a:	2091      	movs	r0, #145
    b90c:	0100      	lsls	r0, r0, #4
    b90e:	19c0      	adds	r0, r0, r7
    b910:	6802      	ldr	r2, [r0, #0]
    b912:	3328      	adds	r3, #40
    b914:	3228      	adds	r2, #40
    b916:	2408      	movs	r4, #8
    b918:	1c18      	adds	r0, r3, #0
    b91a:	1c11      	adds	r1, r2, #0
    b91c:	1c22      	adds	r2, r4, #0
    b91e:	f7fe e878 	blx	9a10 <_init+0x26c>
      out_stream->codec->time_base = out_stream->time_base;
    b922:	4942      	ldr	r1, [pc, #264]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b924:	19c9      	adds	r1, r1, r7
    b926:	680b      	ldr	r3, [r1, #0]
    b928:	689b      	ldr	r3, [r3, #8]
    b92a:	4840      	ldr	r0, [pc, #256]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b92c:	19c0      	adds	r0, r0, r7
    b92e:	6802      	ldr	r2, [r0, #0]
    b930:	3368      	adds	r3, #104
    b932:	3228      	adds	r2, #40
    b934:	2408      	movs	r4, #8
    b936:	1c18      	adds	r0, r3, #0
    b938:	1c11      	adds	r1, r2, #0
    b93a:	1c22      	adds	r2, r4, #0
    b93c:	f7fe e868 	blx	9a10 <_init+0x26c>
      out_stream->codec->codec_tag = 0;
    b940:	493a      	ldr	r1, [pc, #232]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b942:	19c9      	adds	r1, r1, r7
    b944:	680b      	ldr	r3, [r1, #0]
    b946:	689a      	ldr	r2, [r3, #8]
    b948:	2300      	movs	r3, #0
    b94a:	6353      	str	r3, [r2, #52]

      if (ofcx->oformat->flags & AVFMT_GLOBALHEADER)
    b94c:	4a29      	ldr	r2, [pc, #164]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b94e:	19d2      	adds	r2, r2, r7
    b950:	6813      	ldr	r3, [r2, #0]
    b952:	689b      	ldr	r3, [r3, #8]
    b954:	69da      	ldr	r2, [r3, #28]
    b956:	2340      	movs	r3, #64
    b958:	4013      	ands	r3, r2
    b95a:	2b00      	cmp	r3, #0
    b95c:	d00c      	beq.n	b978 <_ZN10FfPipeline11DoRecordingEv+0x340>
        out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
    b95e:	4833      	ldr	r0, [pc, #204]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b960:	19c0      	adds	r0, r0, r7
    b962:	6803      	ldr	r3, [r0, #0]
    b964:	6899      	ldr	r1, [r3, #8]
    b966:	4a31      	ldr	r2, [pc, #196]	(ba2c <_ZN10FfPipeline11DoRecordingEv+0x3f4>)
    b968:	19d2      	adds	r2, r2, r7
    b96a:	6813      	ldr	r3, [r2, #0]
    b96c:	689b      	ldr	r3, [r3, #8]
    b96e:	6d9a      	ldr	r2, [r3, #88]
    b970:	2380      	movs	r3, #128
    b972:	03db      	lsls	r3, r3, #15
    b974:	4313      	orrs	r3, r2
    b976:	658b      	str	r3, [r1, #88]
  if (ofmt == NULL)
    {
      return -1;
    }

  for (i = 0; i < ifcx->nb_streams; i++)
    b978:	482b      	ldr	r0, [pc, #172]	(ba28 <_ZN10FfPipeline11DoRecordingEv+0x3f0>)
    b97a:	19c0      	adds	r0, r0, r7
    b97c:	6803      	ldr	r3, [r0, #0]
    b97e:	3301      	adds	r3, #1
    b980:	4929      	ldr	r1, [pc, #164]	(ba28 <_ZN10FfPipeline11DoRecordingEv+0x3f0>)
    b982:	19c9      	adds	r1, r1, r7
    b984:	600b      	str	r3, [r1, #0]
    b986:	4a1a      	ldr	r2, [pc, #104]	(b9f0 <_ZN10FfPipeline11DoRecordingEv+0x3b8>)
    b988:	19d2      	adds	r2, r2, r7
    b98a:	6813      	ldr	r3, [r2, #0]
    b98c:	699a      	ldr	r2, [r3, #24]
    b98e:	4826      	ldr	r0, [pc, #152]	(ba28 <_ZN10FfPipeline11DoRecordingEv+0x3f0>)
    b990:	19c0      	adds	r0, r0, r7
    b992:	6803      	ldr	r3, [r0, #0]
    b994:	429a      	cmp	r2, r3
    b996:	d900      	bls.n	b99a <_ZN10FfPipeline11DoRecordingEv+0x362>
    b998:	e742      	b.n	b820 <_ZN10FfPipeline11DoRecordingEv+0x1e8>
      if (ofcx->oformat->flags & AVFMT_GLOBALHEADER)
        out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;

    }   // End of for streams

  if (!(ofmt->flags & AVFMT_NOFILE))
    b99a:	4917      	ldr	r1, [pc, #92]	(b9f8 <_ZN10FfPipeline11DoRecordingEv+0x3c0>)
    b99c:	19c9      	adds	r1, r1, r7
    b99e:	680b      	ldr	r3, [r1, #0]
    b9a0:	69da      	ldr	r2, [r3, #28]
    b9a2:	2301      	movs	r3, #1
    b9a4:	4013      	ands	r3, r2
    b9a6:	061b      	lsls	r3, r3, #24
    b9a8:	0e1a      	lsrs	r2, r3, #24
    b9aa:	2301      	movs	r3, #1
    b9ac:	4053      	eors	r3, r2
    b9ae:	061b      	lsls	r3, r3, #24
    b9b0:	0e1b      	lsrs	r3, r3, #24
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d046      	beq.n	ba44 <_ZN10FfPipeline11DoRecordingEv+0x40c>
    {
      ret = avio_open(&ofcx->pb, path, AVIO_FLAG_WRITE);
    b9b6:	4a0f      	ldr	r2, [pc, #60]	(b9f4 <_ZN10FfPipeline11DoRecordingEv+0x3bc>)
    b9b8:	19d2      	adds	r2, r2, r7
    b9ba:	6813      	ldr	r3, [r2, #0]
    b9bc:	3310      	adds	r3, #16
    b9be:	1c3a      	adds	r2, r7, #0
    b9c0:	3210      	adds	r2, #16
    b9c2:	1c18      	adds	r0, r3, #0
    b9c4:	1c11      	adds	r1, r2, #0
    b9c6:	2202      	movs	r2, #2
    b9c8:	f7fd ef74 	blx	98b4 <_init+0x110>
    b9cc:	1c03      	adds	r3, r0, #0
    b9ce:	481c      	ldr	r0, [pc, #112]	(ba40 <_ZN10FfPipeline11DoRecordingEv+0x408>)
    b9d0:	19c0      	adds	r0, r0, r7
    b9d2:	6003      	str	r3, [r0, #0]
      if (ret < 0)
    b9d4:	491a      	ldr	r1, [pc, #104]	(ba40 <_ZN10FfPipeline11DoRecordingEv+0x408>)
    b9d6:	19c9      	adds	r1, r1, r7
    b9d8:	680b      	ldr	r3, [r1, #0]
    b9da:	2b00      	cmp	r3, #0
    b9dc:	da5d      	bge.n	ba9a <_ZN10FfPipeline11DoRecordingEv+0x462>
        {
          return ret;
    b9de:	4a18      	ldr	r2, [pc, #96]	(ba40 <_ZN10FfPipeline11DoRecordingEv+0x408>)
    b9e0:	19d2      	adds	r2, r2, r7
    b9e2:	6812      	ldr	r2, [r2, #0]
    b9e4:	603a      	str	r2, [r7, #0]
    b9e6:	e3b0      	b.n	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
    b9e8:	fffff6d8 	.word	0xfffff6d8
    b9ec:	0000da44 	.word	0x0000da44
    b9f0:	00000868 	.word	0x00000868
    b9f4:	00000864 	.word	0x00000864
    b9f8:	000008f4 	.word	0x000008f4
    b9fc:	000008f8 	.word	0x000008f8
    ba00:	00016ff0 	.word	0x00016ff0
    ba04:	0000da5c 	.word	0x0000da5c
    ba08:	0000da68 	.word	0x0000da68
    ba0c:	000167e8 	.word	0x000167e8
    ba10:	0000da80 	.word	0x0000da80
    ba14:	00000877 	.word	0x00000877
    ba18:	0000086c 	.word	0x0000086c
    ba1c:	0000da9c 	.word	0x0000da9c
    ba20:	0000daac 	.word	0x0000daac
    ba24:	0000dab0 	.word	0x0000dab0
    ba28:	00000908 	.word	0x00000908
    ba2c:	00000914 	.word	0x00000914
    ba30:	00000883 	.word	0x00000883
    ba34:	0000087c 	.word	0x0000087c
    ba38:	0000dae0 	.word	0x0000dae0
    ba3c:	00000878 	.word	0x00000878
    ba40:	0000090c 	.word	0x0000090c
        }
    }
  else
    {
      AppendLog("WARNING: for ofmt set flag AVFMT_NOFILE so we skip open file.\n", class_name);
    ba44:	48da      	ldr	r0, [pc, #872]	(bdb0 <_ZN10FfPipeline11DoRecordingEv+0x778>)
    ba46:	183b      	adds	r3, r7, r0
    ba48:	1c18      	adds	r0, r3, #0
    ba4a:	f7fe e89c 	blx	9b84 <_init+0x3e0>
    ba4e:	49d9      	ldr	r1, [pc, #868]	(bdb4 <_ZN10FfPipeline11DoRecordingEv+0x77c>)
    ba50:	187b      	adds	r3, r7, r1
    ba52:	4ad9      	ldr	r2, [pc, #868]	(bdb8 <_ZN10FfPipeline11DoRecordingEv+0x780>)
    ba54:	48d6      	ldr	r0, [pc, #856]	(bdb0 <_ZN10FfPipeline11DoRecordingEv+0x778>)
    ba56:	183c      	adds	r4, r7, r0
    ba58:	1c18      	adds	r0, r3, #0
    ba5a:	1c11      	adds	r1, r2, #0
    ba5c:	1c22      	adds	r2, r4, #0
    ba5e:	f7fd efea 	blx	9a34 <_init+0x290>
    ba62:	49d6      	ldr	r1, [pc, #856]	(bdbc <_ZN10FfPipeline11DoRecordingEv+0x784>)
    ba64:	187b      	adds	r3, r7, r1
    ba66:	48d3      	ldr	r0, [pc, #844]	(bdb4 <_ZN10FfPipeline11DoRecordingEv+0x77c>)
    ba68:	183a      	adds	r2, r7, r0
    ba6a:	218f      	movs	r1, #143
    ba6c:	0109      	lsls	r1, r1, #4
    ba6e:	19c9      	adds	r1, r1, r7
    ba70:	680c      	ldr	r4, [r1, #0]
    ba72:	1c18      	adds	r0, r3, #0
    ba74:	1c11      	adds	r1, r2, #0
    ba76:	1c22      	adds	r2, r4, #0
    ba78:	f000 fbe0 	bl	c23c <_Z9AppendLogSsPKc>
    ba7c:	4acf      	ldr	r2, [pc, #828]	(bdbc <_ZN10FfPipeline11DoRecordingEv+0x784>)
    ba7e:	18bb      	adds	r3, r7, r2
    ba80:	1c18      	adds	r0, r3, #0
    ba82:	f7fd ef6c 	blx	995c <_init+0x1b8>
    ba86:	48cb      	ldr	r0, [pc, #812]	(bdb4 <_ZN10FfPipeline11DoRecordingEv+0x77c>)
    ba88:	183b      	adds	r3, r7, r0
    ba8a:	1c18      	adds	r0, r3, #0
    ba8c:	f7fd ef66 	blx	995c <_init+0x1b8>
    ba90:	49c7      	ldr	r1, [pc, #796]	(bdb0 <_ZN10FfPipeline11DoRecordingEv+0x778>)
    ba92:	187b      	adds	r3, r7, r1
    ba94:	1c18      	adds	r0, r3, #0
    ba96:	f7fe e810 	blx	9ab8 <_init+0x314>
    }

  ret = avformat_write_header(ofcx, NULL);
    ba9a:	4ac9      	ldr	r2, [pc, #804]	(bdc0 <_ZN10FfPipeline11DoRecordingEv+0x788>)
    ba9c:	19d2      	adds	r2, r2, r7
    ba9e:	6813      	ldr	r3, [r2, #0]
    baa0:	1c18      	adds	r0, r3, #0
    baa2:	2100      	movs	r1, #0
    baa4:	f7fd ef90 	blx	99c8 <_init+0x224>
    baa8:	1c03      	adds	r3, r0, #0
    baaa:	48c6      	ldr	r0, [pc, #792]	(bdc4 <_ZN10FfPipeline11DoRecordingEv+0x78c>)
    baac:	19c0      	adds	r0, r0, r7
    baae:	6003      	str	r3, [r0, #0]

  if (ret < 0)
    bab0:	49c4      	ldr	r1, [pc, #784]	(bdc4 <_ZN10FfPipeline11DoRecordingEv+0x78c>)
    bab2:	19c9      	adds	r1, r1, r7
    bab4:	680b      	ldr	r3, [r1, #0]
    bab6:	2b00      	cmp	r3, #0
    bab8:	da04      	bge.n	bac4 <_ZN10FfPipeline11DoRecordingEv+0x48c>
    {
      return ret;
    baba:	4ac2      	ldr	r2, [pc, #776]	(bdc4 <_ZN10FfPipeline11DoRecordingEv+0x78c>)
    babc:	19d2      	adds	r2, r2, r7
    babe:	6812      	ldr	r2, [r2, #0]
    bac0:	603a      	str	r2, [r7, #0]
    bac2:	e342      	b.n	c14a <_ZN10FfPipeline11DoRecordingEv+0xb12>
    }

  SetWaitingKeyframeFlag();
    bac4:	68fb      	ldr	r3, [r7, #12]
    bac6:	1c18      	adds	r0, r3, #0
    bac8:	f7ff fa2a 	bl	af20 <_ZN10FfPipeline22SetWaitingKeyframeFlagEv>
  ClearNeedStop();
    bacc:	68fb      	ldr	r3, [r7, #12]
    bace:	1c18      	adds	r0, r3, #0
    bad0:	f7ff fd76 	bl	b5c0 <_ZN10FfPipeline13ClearNeedStopEv>
    bad4:	e147      	b.n	bd66 <_ZN10FfPipeline11DoRecordingEv+0x72e>

  while((av_read_frame(ifcx, &pkt) >= 0) && (!IsNeedStop()))
    {
      AVStream *in_stream = NULL, *out_stream = NULL;
    bad6:	2300      	movs	r3, #0
    bad8:	48bb      	ldr	r0, [pc, #748]	(bdc8 <_ZN10FfPipeline11DoRecordingEv+0x790>)
    bada:	19c0      	adds	r0, r0, r7
    badc:	6003      	str	r3, [r0, #0]
    bade:	2300      	movs	r3, #0
    bae0:	49ba      	ldr	r1, [pc, #744]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bae2:	19c9      	adds	r1, r1, r7
    bae4:	600b      	str	r3, [r1, #0]

      if ((IsWaitingKeyframe() && !(pkt.flags & AV_PKT_FLAG_KEY)))
    bae6:	68fb      	ldr	r3, [r7, #12]
    bae8:	1c18      	adds	r0, r3, #0
    baea:	f7ff fa31 	bl	af50 <_ZN10FfPipeline17IsWaitingKeyframeEv>
    baee:	1c03      	adds	r3, r0, #0
    baf0:	469c      	mov	ip, r3
    baf2:	4662      	mov	r2, ip
    baf4:	2301      	movs	r3, #1
    baf6:	4053      	eors	r3, r2
    baf8:	061b      	lsls	r3, r3, #24
    bafa:	0e1b      	lsrs	r3, r3, #24
    bafc:	2b00      	cmp	r3, #0
    bafe:	d116      	bne.n	bb2e <_ZN10FfPipeline11DoRecordingEv+0x4f6>
    bb00:	4bb3      	ldr	r3, [pc, #716]	(bdd0 <_ZN10FfPipeline11DoRecordingEv+0x798>)
    bb02:	2292      	movs	r2, #146
    bb04:	0112      	lsls	r2, r2, #4
    bb06:	19d2      	adds	r2, r2, r7
    bb08:	18d3      	adds	r3, r2, r3
    bb0a:	6a5a      	ldr	r2, [r3, #36]
    bb0c:	2301      	movs	r3, #1
    bb0e:	4013      	ands	r3, r2
    bb10:	061b      	lsls	r3, r3, #24
    bb12:	0e1a      	lsrs	r2, r3, #24
    bb14:	2301      	movs	r3, #1
    bb16:	4053      	eors	r3, r2
    bb18:	061b      	lsls	r3, r3, #24
    bb1a:	0e1a      	lsrs	r2, r3, #24
    bb1c:	2301      	movs	r3, #1
    bb1e:	4053      	eors	r3, r2
    bb20:	061b      	lsls	r3, r3, #24
    bb22:	0e1b      	lsrs	r3, r3, #24
    bb24:	2b00      	cmp	r3, #0
    bb26:	d102      	bne.n	bb2e <_ZN10FfPipeline11DoRecordingEv+0x4f6>
    bb28:	2301      	movs	r3, #1
    bb2a:	60bb      	str	r3, [r7, #8]
    bb2c:	e001      	b.n	bb32 <_ZN10FfPipeline11DoRecordingEv+0x4fa>
    bb2e:	2000      	movs	r0, #0
    bb30:	60b8      	str	r0, [r7, #8]
    bb32:	68bb      	ldr	r3, [r7, #8]
    bb34:	2b00      	cmp	r3, #0
    bb36:	d006      	beq.n	bb46 <_ZN10FfPipeline11DoRecordingEv+0x50e>
        {
          av_free_packet(&pkt);
    bb38:	2181      	movs	r1, #129
    bb3a:	0109      	lsls	r1, r1, #4
    bb3c:	187b      	adds	r3, r7, r1
    bb3e:	1c18      	adds	r0, r3, #0
    bb40:	f7fd ee58 	blx	97f4 <_init+0x50>
    bb44:	e10f      	b.n	bd66 <_ZN10FfPipeline11DoRecordingEv+0x72e>
          continue;
        }

      if (IsWaitingKeyframe())
    bb46:	68fb      	ldr	r3, [r7, #12]
    bb48:	1c18      	adds	r0, r3, #0
    bb4a:	f7ff fa01 	bl	af50 <_ZN10FfPipeline17IsWaitingKeyframeEv>
    bb4e:	1c03      	adds	r3, r0, #0
    bb50:	469c      	mov	ip, r3
    bb52:	4663      	mov	r3, ip
    bb54:	2b00      	cmp	r3, #0
    bb56:	d023      	beq.n	bba0 <_ZN10FfPipeline11DoRecordingEv+0x568>
        {
          ClearWaitingKeyframeFlag();
    bb58:	68fb      	ldr	r3, [r7, #12]
    bb5a:	1c18      	adds	r0, r3, #0
    bb5c:	f7ff f9ec 	bl	af38 <_ZN10FfPipeline24ClearWaitingKeyframeFlagEv>
          pkt.pts = pkt.dts = AV_NOPTS_VALUE;
    bb60:	4b9b      	ldr	r3, [pc, #620]	(bdd0 <_ZN10FfPipeline11DoRecordingEv+0x798>)
    bb62:	2092      	movs	r0, #146
    bb64:	0100      	lsls	r0, r0, #4
    bb66:	19c0      	adds	r0, r0, r7
    bb68:	18c2      	adds	r2, r0, r3
    bb6a:	4c90      	ldr	r4, [pc, #576]	(bdac <_ZN10FfPipeline11DoRecordingEv+0x774>)
    bb6c:	4b8e      	ldr	r3, [pc, #568]	(bda8 <_ZN10FfPipeline11DoRecordingEv+0x770>)
    bb6e:	6113      	str	r3, [r2, #16]
    bb70:	6154      	str	r4, [r2, #20]
    bb72:	4b97      	ldr	r3, [pc, #604]	(bdd0 <_ZN10FfPipeline11DoRecordingEv+0x798>)
    bb74:	2192      	movs	r1, #146
    bb76:	0109      	lsls	r1, r1, #4
    bb78:	19c9      	adds	r1, r1, r7
    bb7a:	18cb      	adds	r3, r1, r3
    bb7c:	6919      	ldr	r1, [r3, #16]
    bb7e:	695a      	ldr	r2, [r3, #20]
    bb80:	4b93      	ldr	r3, [pc, #588]	(bdd0 <_ZN10FfPipeline11DoRecordingEv+0x798>)
    bb82:	2092      	movs	r0, #146
    bb84:	0100      	lsls	r0, r0, #4
    bb86:	19c0      	adds	r0, r0, r7
    bb88:	18c3      	adds	r3, r0, r3
    bb8a:	6099      	str	r1, [r3, #8]
    bb8c:	60da      	str	r2, [r3, #12]
          SetRecState(REC_WRITING);
    bb8e:	68fb      	ldr	r3, [r7, #12]
    bb90:	1c18      	adds	r0, r3, #0
    bb92:	2103      	movs	r1, #3
    bb94:	f7ff f9b8 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>
          SetPartnerToStop();
    bb98:	68fb      	ldr	r3, [r7, #12]
    bb9a:	1c18      	adds	r0, r3, #0
    bb9c:	f7ff fcc6 	bl	b52c <_ZN10FfPipeline16SetPartnerToStopEv>
        }

      in_stream  = ifcx->streams[pkt.stream_index];
    bba0:	498c      	ldr	r1, [pc, #560]	(bdd4 <_ZN10FfPipeline11DoRecordingEv+0x79c>)
    bba2:	19c9      	adds	r1, r1, r7
    bba4:	680b      	ldr	r3, [r1, #0]
    bba6:	69da      	ldr	r2, [r3, #28]
    bba8:	4b89      	ldr	r3, [pc, #548]	(bdd0 <_ZN10FfPipeline11DoRecordingEv+0x798>)
    bbaa:	2092      	movs	r0, #146
    bbac:	0100      	lsls	r0, r0, #4
    bbae:	19c0      	adds	r0, r0, r7
    bbb0:	18c3      	adds	r3, r0, r3
    bbb2:	6a1b      	ldr	r3, [r3, #32]
    bbb4:	009b      	lsls	r3, r3, #2
    bbb6:	18d3      	adds	r3, r2, r3
    bbb8:	681b      	ldr	r3, [r3, #0]
    bbba:	4983      	ldr	r1, [pc, #524]	(bdc8 <_ZN10FfPipeline11DoRecordingEv+0x790>)
    bbbc:	19c9      	adds	r1, r1, r7
    bbbe:	600b      	str	r3, [r1, #0]
      out_stream = ofcx->streams[pkt.stream_index];
    bbc0:	4a7f      	ldr	r2, [pc, #508]	(bdc0 <_ZN10FfPipeline11DoRecordingEv+0x788>)
    bbc2:	19d2      	adds	r2, r2, r7
    bbc4:	6813      	ldr	r3, [r2, #0]
    bbc6:	69da      	ldr	r2, [r3, #28]
    bbc8:	4b81      	ldr	r3, [pc, #516]	(bdd0 <_ZN10FfPipeline11DoRecordingEv+0x798>)
    bbca:	2092      	movs	r0, #146
    bbcc:	0100      	lsls	r0, r0, #4
    bbce:	19c0      	adds	r0, r0, r7
    bbd0:	18c3      	adds	r3, r0, r3
    bbd2:	6a1b      	ldr	r3, [r3, #32]
    bbd4:	009b      	lsls	r3, r3, #2
    bbd6:	18d3      	adds	r3, r2, r3
    bbd8:	681b      	ldr	r3, [r3, #0]
    bbda:	497c      	ldr	r1, [pc, #496]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bbdc:	19c9      	adds	r1, r1, r7
    bbde:	600b      	str	r3, [r1, #0]

      if (!in_stream)
    bbe0:	4a79      	ldr	r2, [pc, #484]	(bdc8 <_ZN10FfPipeline11DoRecordingEv+0x790>)
    bbe2:	19d2      	adds	r2, r2, r7
    bbe4:	6813      	ldr	r3, [r2, #0]
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	d133      	bne.n	bc52 <_ZN10FfPipeline11DoRecordingEv+0x61a>
        {
          AppendLog("ERROR: in_stream is NULL pointer! Skip this packet!\n", class_name);
    bbea:	487b      	ldr	r0, [pc, #492]	(bdd8 <_ZN10FfPipeline11DoRecordingEv+0x7a0>)
    bbec:	183b      	adds	r3, r7, r0
    bbee:	1c18      	adds	r0, r3, #0
    bbf0:	f7fd efc8 	blx	9b84 <_init+0x3e0>
    bbf4:	4979      	ldr	r1, [pc, #484]	(bddc <_ZN10FfPipeline11DoRecordingEv+0x7a4>)
    bbf6:	187b      	adds	r3, r7, r1
    bbf8:	4a79      	ldr	r2, [pc, #484]	(bde0 <_ZN10FfPipeline11DoRecordingEv+0x7a8>)
    bbfa:	4877      	ldr	r0, [pc, #476]	(bdd8 <_ZN10FfPipeline11DoRecordingEv+0x7a0>)
    bbfc:	183c      	adds	r4, r7, r0
    bbfe:	1c18      	adds	r0, r3, #0
    bc00:	1c11      	adds	r1, r2, #0
    bc02:	1c22      	adds	r2, r4, #0
    bc04:	f7fd ef16 	blx	9a34 <_init+0x290>
    bc08:	2189      	movs	r1, #137
    bc0a:	0109      	lsls	r1, r1, #4
    bc0c:	187b      	adds	r3, r7, r1
    bc0e:	4873      	ldr	r0, [pc, #460]	(bddc <_ZN10FfPipeline11DoRecordingEv+0x7a4>)
    bc10:	183a      	adds	r2, r7, r0
    bc12:	218f      	movs	r1, #143
    bc14:	0109      	lsls	r1, r1, #4
    bc16:	19c9      	adds	r1, r1, r7
    bc18:	680c      	ldr	r4, [r1, #0]
    bc1a:	1c18      	adds	r0, r3, #0
    bc1c:	1c11      	adds	r1, r2, #0
    bc1e:	1c22      	adds	r2, r4, #0
    bc20:	f000 fb0c 	bl	c23c <_Z9AppendLogSsPKc>
    bc24:	2289      	movs	r2, #137
    bc26:	0112      	lsls	r2, r2, #4
    bc28:	18bb      	adds	r3, r7, r2
    bc2a:	1c18      	adds	r0, r3, #0
    bc2c:	f7fd ee96 	blx	995c <_init+0x1b8>
    bc30:	486a      	ldr	r0, [pc, #424]	(bddc <_ZN10FfPipeline11DoRecordingEv+0x7a4>)
    bc32:	183b      	adds	r3, r7, r0
    bc34:	1c18      	adds	r0, r3, #0
    bc36:	f7fd ee92 	blx	995c <_init+0x1b8>
    bc3a:	4967      	ldr	r1, [pc, #412]	(bdd8 <_ZN10FfPipeline11DoRecordingEv+0x7a0>)
    bc3c:	187b      	adds	r3, r7, r1
    bc3e:	1c18      	adds	r0, r3, #0
    bc40:	f7fd ef3a 	blx	9ab8 <_init+0x314>
          av_free_packet(&pkt);
    bc44:	2281      	movs	r2, #129
    bc46:	0112      	lsls	r2, r2, #4
    bc48:	18bb      	adds	r3, r7, r2
    bc4a:	1c18      	adds	r0, r3, #0
    bc4c:	f7fd edd2 	blx	97f4 <_init+0x50>
    bc50:	e089      	b.n	bd66 <_ZN10FfPipeline11DoRecordingEv+0x72e>

          continue;
        }

      if (!out_stream)
    bc52:	485e      	ldr	r0, [pc, #376]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bc54:	19c0      	adds	r0, r0, r7
    bc56:	6803      	ldr	r3, [r0, #0]
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d134      	bne.n	bcc6 <_ZN10FfPipeline11DoRecordingEv+0x68e>
        {
          AppendLog("ERROR: out_stream is NULL pointer! Skip this packet!\n", class_name);
    bc5c:	4961      	ldr	r1, [pc, #388]	(bde4 <_ZN10FfPipeline11DoRecordingEv+0x7ac>)
    bc5e:	187b      	adds	r3, r7, r1
    bc60:	1c18      	adds	r0, r3, #0
    bc62:	f7fd ef90 	blx	9b84 <_init+0x3e0>
    bc66:	228a      	movs	r2, #138
    bc68:	0112      	lsls	r2, r2, #4
    bc6a:	18bb      	adds	r3, r7, r2
    bc6c:	4a5e      	ldr	r2, [pc, #376]	(bde8 <_ZN10FfPipeline11DoRecordingEv+0x7b0>)
    bc6e:	485d      	ldr	r0, [pc, #372]	(bde4 <_ZN10FfPipeline11DoRecordingEv+0x7ac>)
    bc70:	183c      	adds	r4, r7, r0
    bc72:	1c18      	adds	r0, r3, #0
    bc74:	1c11      	adds	r1, r2, #0
    bc76:	1c22      	adds	r2, r4, #0
    bc78:	f7fd eedc 	blx	9a34 <_init+0x290>
    bc7c:	495b      	ldr	r1, [pc, #364]	(bdec <_ZN10FfPipeline11DoRecordingEv+0x7b4>)
    bc7e:	187b      	adds	r3, r7, r1
    bc80:	208a      	movs	r0, #138
    bc82:	0100      	lsls	r0, r0, #4
    bc84:	183a      	adds	r2, r7, r0
    bc86:	218f      	movs	r1, #143
    bc88:	0109      	lsls	r1, r1, #4
    bc8a:	19c9      	adds	r1, r1, r7
    bc8c:	680c      	ldr	r4, [r1, #0]
    bc8e:	1c18      	adds	r0, r3, #0
    bc90:	1c11      	adds	r1, r2, #0
    bc92:	1c22      	adds	r2, r4, #0
    bc94:	f000 fad2 	bl	c23c <_Z9AppendLogSsPKc>
    bc98:	4a54      	ldr	r2, [pc, #336]	(bdec <_ZN10FfPipeline11DoRecordingEv+0x7b4>)
    bc9a:	18bb      	adds	r3, r7, r2
    bc9c:	1c18      	adds	r0, r3, #0
    bc9e:	f7fd ee5e 	blx	995c <_init+0x1b8>
    bca2:	208a      	movs	r0, #138
    bca4:	0100      	lsls	r0, r0, #4
    bca6:	183b      	adds	r3, r7, r0
    bca8:	1c18      	adds	r0, r3, #0
    bcaa:	f7fd ee58 	blx	995c <_init+0x1b8>
    bcae:	494d      	ldr	r1, [pc, #308]	(bde4 <_ZN10FfPipeline11DoRecordingEv+0x7ac>)
    bcb0:	187b      	adds	r3, r7, r1
    bcb2:	1c18      	adds	r0, r3, #0
    bcb4:	f7fd ef00 	blx	9ab8 <_init+0x314>
          av_free_packet(&pkt);
    bcb8:	2281      	movs	r2, #129
    bcba:	0112      	lsls	r2, r2, #4
    bcbc:	18bb      	adds	r3, r7, r2
    bcbe:	1c18      	adds	r0, r3, #0
    bcc0:	f7fd ed98 	blx	97f4 <_init+0x50>
    bcc4:	e04f      	b.n	bd66 <_ZN10FfPipeline11DoRecordingEv+0x72e>

          continue;
        }

      if (out_stream->codec->codec_type == AVMEDIA_TYPE_AUDIO)
    bcc6:	4841      	ldr	r0, [pc, #260]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bcc8:	19c0      	adds	r0, r0, r7
    bcca:	6803      	ldr	r3, [r0, #0]
    bccc:	689b      	ldr	r3, [r3, #8]
    bcce:	689b      	ldr	r3, [r3, #8]
    bcd0:	2b01      	cmp	r3, #1
    bcd2:	d10c      	bne.n	bcee <_ZN10FfPipeline11DoRecordingEv+0x6b6>
        a_packets++;
    bcd4:	4946      	ldr	r1, [pc, #280]	(bdf0 <_ZN10FfPipeline11DoRecordingEv+0x7b8>)
    bcd6:	19c9      	adds	r1, r1, r7
    bcd8:	680b      	ldr	r3, [r1, #0]
    bcda:	684c      	ldr	r4, [r1, #4]
    bcdc:	2101      	movs	r1, #1
    bcde:	2200      	movs	r2, #0
    bce0:	185b      	adds	r3, r3, r1
    bce2:	4154      	adcs	r4, r2
    bce4:	4a42      	ldr	r2, [pc, #264]	(bdf0 <_ZN10FfPipeline11DoRecordingEv+0x7b8>)
    bce6:	19d2      	adds	r2, r2, r7
    bce8:	6013      	str	r3, [r2, #0]
    bcea:	6054      	str	r4, [r2, #4]
    bcec:	e014      	b.n	bd18 <_ZN10FfPipeline11DoRecordingEv+0x6e0>
      else if (out_stream->codec->codec_type == AVMEDIA_TYPE_VIDEO)
    bcee:	4837      	ldr	r0, [pc, #220]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bcf0:	19c0      	adds	r0, r0, r7
    bcf2:	6803      	ldr	r3, [r0, #0]
    bcf4:	689b      	ldr	r3, [r3, #8]
    bcf6:	689b      	ldr	r3, [r3, #8]
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d10d      	bne.n	bd18 <_ZN10FfPipeline11DoRecordingEv+0x6e0>
        v_packets++;
    bcfc:	2190      	movs	r1, #144
    bcfe:	0109      	lsls	r1, r1, #4
    bd00:	19c9      	adds	r1, r1, r7
    bd02:	680b      	ldr	r3, [r1, #0]
    bd04:	684c      	ldr	r4, [r1, #4]
    bd06:	2101      	movs	r1, #1
    bd08:	2200      	movs	r2, #0
    bd0a:	185b      	adds	r3, r3, r1
    bd0c:	4154      	adcs	r4, r2
    bd0e:	2290      	movs	r2, #144
    bd10:	0112      	lsls	r2, r2, #4
    bd12:	19d2      	adds	r2, r2, r7
    bd14:	6013      	str	r3, [r2, #0]
    bd16:	6054      	str	r4, [r2, #4]

      RescalePtsDts24(&pkt, in_stream, out_stream);
    bd18:	68fb      	ldr	r3, [r7, #12]
    bd1a:	2081      	movs	r0, #129
    bd1c:	0100      	lsls	r0, r0, #4
    bd1e:	183a      	adds	r2, r7, r0
    bd20:	4929      	ldr	r1, [pc, #164]	(bdc8 <_ZN10FfPipeline11DoRecordingEv+0x790>)
    bd22:	19c9      	adds	r1, r1, r7
    bd24:	680c      	ldr	r4, [r1, #0]
    bd26:	4829      	ldr	r0, [pc, #164]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bd28:	19c0      	adds	r0, r0, r7
    bd2a:	6805      	ldr	r5, [r0, #0]
    bd2c:	1c18      	adds	r0, r3, #0
    bd2e:	1c11      	adds	r1, r2, #0
    bd30:	1c22      	adds	r2, r4, #0
    bd32:	1c2b      	adds	r3, r5, #0
    bd34:	f7ff f95c 	bl	aff0 <_ZN10FfPipeline15RescalePtsDts24EP8AVPacketP8AVStreamS3_>

      WriteFrame_v242(ofcx, out_stream, &pkt, NULL);
    bd38:	4a21      	ldr	r2, [pc, #132]	(bdc0 <_ZN10FfPipeline11DoRecordingEv+0x788>)
    bd3a:	19d2      	adds	r2, r2, r7
    bd3c:	6811      	ldr	r1, [r2, #0]
    bd3e:	68fa      	ldr	r2, [r7, #12]
    bd40:	4b22      	ldr	r3, [pc, #136]	(bdcc <_ZN10FfPipeline11DoRecordingEv+0x794>)
    bd42:	19db      	adds	r3, r3, r7
    bd44:	681c      	ldr	r4, [r3, #0]
    bd46:	2081      	movs	r0, #129
    bd48:	0100      	lsls	r0, r0, #4
    bd4a:	183d      	adds	r5, r7, r0
    bd4c:	2300      	movs	r3, #0
    bd4e:	9300      	str	r3, [sp, #0]
    bd50:	1c10      	adds	r0, r2, #0
    bd52:	1c22      	adds	r2, r4, #0
    bd54:	1c2b      	adds	r3, r5, #0
    bd56:	f7ff f9c3 	bl	b0e0 <_ZN10FfPipeline15WriteFrame_v242EP15AVFormatContextP8AVStreamP8AVPacketP24AVBitStreamFilterContext>

      av_free_packet(&pkt);
    bd5a:	2181      	movs	r1, #129
    bd5c:	0109      	lsls	r1, r1, #4
    bd5e:	187b      	adds	r3, r7, r1
    bd60:	1c18      	adds	r0, r3, #0
    bd62:	f7fd ed48 	blx	97f4 <_init+0x50>
    }

  SetWaitingKeyframeFlag();
  ClearNeedStop();

  while((av_read_frame(ifcx, &pkt) >= 0) && (!IsNeedStop()))
    bd66:	4a1b      	ldr	r2, [pc, #108]	(bdd4 <_ZN10FfPipeline11DoRecordingEv+0x79c>)
    bd68:	19d2      	adds	r2, r2, r7
    bd6a:	6813      	ldr	r3, [r2, #0]
    bd6c:	2081      	movs	r0, #129
    bd6e:	0100      	lsls	r0, r0, #4
    bd70:	183a      	adds	r2, r7, r0
    bd72:	1c18      	adds	r0, r3, #0
    bd74:	1c11      	adds	r1, r2, #0
    bd76:	f7fd ed26 	blx	97c4 <_init+0x20>
    bd7a:	1c03      	adds	r3, r0, #0
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	db39      	blt.n	bdf4 <_ZN10FfPipeline11DoRecordingEv+0x7bc>
    bd80:	68fb      	ldr	r3, [r7, #12]
    bd82:	1c18      	adds	r0, r3, #0
    bd84:	f7ff fb54 	bl	b430 <_ZN10FfPipeline10IsNeedStopEv>
    bd88:	1c03      	adds	r3, r0, #0
    bd8a:	469c      	mov	ip, r3
    bd8c:	4662      	mov	r2, ip
    bd8e:	2301      	movs	r3, #1
    bd90:	4053      	eors	r3, r2
    bd92:	061b      	lsls	r3, r3, #24
    bd94:	0e1a      	lsrs	r2, r3, #24
    bd96:	2301      	movs	r3, #1
    bd98:	4053      	eors	r3, r2
    bd9a:	061b      	lsls	r3, r3, #24
    bd9c:	0e1b      	lsrs	r3, r3, #24
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d128      	bne.n	bdf4 <_ZN10FfPipeline11DoRecordingEv+0x7bc>
    bda2:	2101      	movs	r1, #1
    bda4:	6079      	str	r1, [r7, #4]
    bda6:	e027      	b.n	bdf8 <_ZN10FfPipeline11DoRecordingEv+0x7c0>
    bda8:	00000000 	.word	0x00000000
    bdac:	80000000 	.word	0x80000000
    bdb0:	0000088f 	.word	0x0000088f
    bdb4:	00000888 	.word	0x00000888
    bdb8:	0000db04 	.word	0x0000db04
    bdbc:	00000884 	.word	0x00000884
    bdc0:	00000864 	.word	0x00000864
    bdc4:	0000090c 	.word	0x0000090c
    bdc8:	00000918 	.word	0x00000918
    bdcc:	0000091c 	.word	0x0000091c
    bdd0:	fffffef0 	.word	0xfffffef0
    bdd4:	00000868 	.word	0x00000868
    bdd8:	0000089b 	.word	0x0000089b
    bddc:	00000894 	.word	0x00000894
    bde0:	0000db44 	.word	0x0000db44
    bde4:	000008a7 	.word	0x000008a7
    bde8:	0000db7c 	.word	0x0000db7c
    bdec:	0000089c 	.word	0x0000089c
    bdf0:	000008f8 	.word	0x000008f8
    bdf4:	2200      	movs	r2, #0
    bdf6:	607a      	str	r2, [r7, #4]
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d000      	beq.n	be00 <_ZN10FfPipeline11DoRecordingEv+0x7c8>
    bdfe:	e66a      	b.n	bad6 <_ZN10FfPipeline11DoRecordingEv+0x49e>

      av_free_packet(&pkt);
    }

  // Now we stopping
  sprintf(str, "DEBUG: Now we stopping Slot %d\n", Slot);
    be00:	68fb      	ldr	r3, [r7, #12]
    be02:	791b      	ldrb	r3, [r3, #4]
    be04:	1c1c      	adds	r4, r3, #0
    be06:	4bd4      	ldr	r3, [pc, #848]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    be08:	4ad4      	ldr	r2, [pc, #848]	(c15c <_ZN10FfPipeline11DoRecordingEv+0xb24>)
    be0a:	1c18      	adds	r0, r3, #0
    be0c:	1c11      	adds	r1, r2, #0
    be0e:	1c22      	adds	r2, r4, #0
    be10:	f7fd eee8 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    be14:	48d2      	ldr	r0, [pc, #840]	(c160 <_ZN10FfPipeline11DoRecordingEv+0xb28>)
    be16:	183b      	adds	r3, r7, r0
    be18:	1c18      	adds	r0, r3, #0
    be1a:	f7fd eeb4 	blx	9b84 <_init+0x3e0>
    be1e:	49d1      	ldr	r1, [pc, #836]	(c164 <_ZN10FfPipeline11DoRecordingEv+0xb2c>)
    be20:	187b      	adds	r3, r7, r1
    be22:	4acd      	ldr	r2, [pc, #820]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    be24:	48ce      	ldr	r0, [pc, #824]	(c160 <_ZN10FfPipeline11DoRecordingEv+0xb28>)
    be26:	183c      	adds	r4, r7, r0
    be28:	1c18      	adds	r0, r3, #0
    be2a:	1c11      	adds	r1, r2, #0
    be2c:	1c22      	adds	r2, r4, #0
    be2e:	f7fd ee02 	blx	9a34 <_init+0x290>
    be32:	49cd      	ldr	r1, [pc, #820]	(c168 <_ZN10FfPipeline11DoRecordingEv+0xb30>)
    be34:	187b      	adds	r3, r7, r1
    be36:	48cb      	ldr	r0, [pc, #812]	(c164 <_ZN10FfPipeline11DoRecordingEv+0xb2c>)
    be38:	183a      	adds	r2, r7, r0
    be3a:	218f      	movs	r1, #143
    be3c:	0109      	lsls	r1, r1, #4
    be3e:	19c9      	adds	r1, r1, r7
    be40:	680c      	ldr	r4, [r1, #0]
    be42:	1c18      	adds	r0, r3, #0
    be44:	1c11      	adds	r1, r2, #0
    be46:	1c22      	adds	r2, r4, #0
    be48:	f000 f9f8 	bl	c23c <_Z9AppendLogSsPKc>
    be4c:	4ac6      	ldr	r2, [pc, #792]	(c168 <_ZN10FfPipeline11DoRecordingEv+0xb30>)
    be4e:	18bb      	adds	r3, r7, r2
    be50:	1c18      	adds	r0, r3, #0
    be52:	f7fd ed84 	blx	995c <_init+0x1b8>
    be56:	48c3      	ldr	r0, [pc, #780]	(c164 <_ZN10FfPipeline11DoRecordingEv+0xb2c>)
    be58:	183b      	adds	r3, r7, r0
    be5a:	1c18      	adds	r0, r3, #0
    be5c:	f7fd ed7e 	blx	995c <_init+0x1b8>
    be60:	49bf      	ldr	r1, [pc, #764]	(c160 <_ZN10FfPipeline11DoRecordingEv+0xb28>)
    be62:	187b      	adds	r3, r7, r1
    be64:	1c18      	adds	r0, r3, #0
    be66:	f7fd ee28 	blx	9ab8 <_init+0x314>

  if (!IsNeedStop())
    be6a:	68fb      	ldr	r3, [r7, #12]
    be6c:	1c18      	adds	r0, r3, #0
    be6e:	f7ff fadf 	bl	b430 <_ZN10FfPipeline10IsNeedStopEv>
    be72:	1c03      	adds	r3, r0, #0
    be74:	469c      	mov	ip, r3
    be76:	4662      	mov	r2, ip
    be78:	2301      	movs	r3, #1
    be7a:	4053      	eors	r3, r2
    be7c:	061b      	lsls	r3, r3, #24
    be7e:	0e1b      	lsrs	r3, r3, #24
    be80:	2b00      	cmp	r3, #0
    be82:	d005      	beq.n	be90 <_ZN10FfPipeline11DoRecordingEv+0x858>
    av_free_packet(&pkt);
    be84:	2281      	movs	r2, #129
    be86:	0112      	lsls	r2, r2, #4
    be88:	18bb      	adds	r3, r7, r2
    be8a:	1c18      	adds	r0, r3, #0
    be8c:	f7fd ecb2 	blx	97f4 <_init+0x50>

  sprintf(str, "DEBUG: Try to av_write_trailer() for Slot %d\n", Slot);
    be90:	68fb      	ldr	r3, [r7, #12]
    be92:	791b      	ldrb	r3, [r3, #4]
    be94:	1c1c      	adds	r4, r3, #0
    be96:	4bb0      	ldr	r3, [pc, #704]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    be98:	4ab4      	ldr	r2, [pc, #720]	(c16c <_ZN10FfPipeline11DoRecordingEv+0xb34>)
    be9a:	1c18      	adds	r0, r3, #0
    be9c:	1c11      	adds	r1, r2, #0
    be9e:	1c22      	adds	r2, r4, #0
    bea0:	f7fd eea0 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    bea4:	48b2      	ldr	r0, [pc, #712]	(c170 <_ZN10FfPipeline11DoRecordingEv+0xb38>)
    bea6:	183b      	adds	r3, r7, r0
    bea8:	1c18      	adds	r0, r3, #0
    beaa:	f7fd ee6c 	blx	9b84 <_init+0x3e0>
    beae:	49b1      	ldr	r1, [pc, #708]	(c174 <_ZN10FfPipeline11DoRecordingEv+0xb3c>)
    beb0:	187b      	adds	r3, r7, r1
    beb2:	4aa9      	ldr	r2, [pc, #676]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    beb4:	48ae      	ldr	r0, [pc, #696]	(c170 <_ZN10FfPipeline11DoRecordingEv+0xb38>)
    beb6:	183c      	adds	r4, r7, r0
    beb8:	1c18      	adds	r0, r3, #0
    beba:	1c11      	adds	r1, r2, #0
    bebc:	1c22      	adds	r2, r4, #0
    bebe:	f7fd edba 	blx	9a34 <_init+0x290>
    bec2:	49ad      	ldr	r1, [pc, #692]	(c178 <_ZN10FfPipeline11DoRecordingEv+0xb40>)
    bec4:	187b      	adds	r3, r7, r1
    bec6:	48ab      	ldr	r0, [pc, #684]	(c174 <_ZN10FfPipeline11DoRecordingEv+0xb3c>)
    bec8:	183a      	adds	r2, r7, r0
    beca:	218f      	movs	r1, #143
    becc:	0109      	lsls	r1, r1, #4
    bece:	19c9      	adds	r1, r1, r7
    bed0:	680c      	ldr	r4, [r1, #0]
    bed2:	1c18      	adds	r0, r3, #0
    bed4:	1c11      	adds	r1, r2, #0
    bed6:	1c22      	adds	r2, r4, #0
    bed8:	f000 f9b0 	bl	c23c <_Z9AppendLogSsPKc>
    bedc:	4aa6      	ldr	r2, [pc, #664]	(c178 <_ZN10FfPipeline11DoRecordingEv+0xb40>)
    bede:	18bb      	adds	r3, r7, r2
    bee0:	1c18      	adds	r0, r3, #0
    bee2:	f7fd ed3c 	blx	995c <_init+0x1b8>
    bee6:	48a3      	ldr	r0, [pc, #652]	(c174 <_ZN10FfPipeline11DoRecordingEv+0xb3c>)
    bee8:	183b      	adds	r3, r7, r0
    beea:	1c18      	adds	r0, r3, #0
    beec:	f7fd ed36 	blx	995c <_init+0x1b8>
    bef0:	499f      	ldr	r1, [pc, #636]	(c170 <_ZN10FfPipeline11DoRecordingEv+0xb38>)
    bef2:	187b      	adds	r3, r7, r1
    bef4:	1c18      	adds	r0, r3, #0
    bef6:	f7fd ede0 	blx	9ab8 <_init+0x314>

  av_write_trailer(ofcx);
    befa:	4aa0      	ldr	r2, [pc, #640]	(c17c <_ZN10FfPipeline11DoRecordingEv+0xb44>)
    befc:	19d2      	adds	r2, r2, r7
    befe:	6813      	ldr	r3, [r2, #0]
    bf00:	1c18      	adds	r0, r3, #0
    bf02:	f7fd ed5c 	blx	99bc <_init+0x218>

  sprintf(str, "DEBUG: Try to close all streams codec for Slot %d\n", Slot);
    bf06:	68fb      	ldr	r3, [r7, #12]
    bf08:	791b      	ldrb	r3, [r3, #4]
    bf0a:	1c1c      	adds	r4, r3, #0
    bf0c:	4b92      	ldr	r3, [pc, #584]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    bf0e:	4a9c      	ldr	r2, [pc, #624]	(c180 <_ZN10FfPipeline11DoRecordingEv+0xb48>)
    bf10:	1c18      	adds	r0, r3, #0
    bf12:	1c11      	adds	r1, r2, #0
    bf14:	1c22      	adds	r2, r4, #0
    bf16:	f7fd ee66 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    bf1a:	489a      	ldr	r0, [pc, #616]	(c184 <_ZN10FfPipeline11DoRecordingEv+0xb4c>)
    bf1c:	183b      	adds	r3, r7, r0
    bf1e:	1c18      	adds	r0, r3, #0
    bf20:	f7fd ee30 	blx	9b84 <_init+0x3e0>
    bf24:	4998      	ldr	r1, [pc, #608]	(c188 <_ZN10FfPipeline11DoRecordingEv+0xb50>)
    bf26:	187b      	adds	r3, r7, r1
    bf28:	4a8b      	ldr	r2, [pc, #556]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    bf2a:	4896      	ldr	r0, [pc, #600]	(c184 <_ZN10FfPipeline11DoRecordingEv+0xb4c>)
    bf2c:	183c      	adds	r4, r7, r0
    bf2e:	1c18      	adds	r0, r3, #0
    bf30:	1c11      	adds	r1, r2, #0
    bf32:	1c22      	adds	r2, r4, #0
    bf34:	f7fd ed7e 	blx	9a34 <_init+0x290>
    bf38:	218c      	movs	r1, #140
    bf3a:	0109      	lsls	r1, r1, #4
    bf3c:	187b      	adds	r3, r7, r1
    bf3e:	4892      	ldr	r0, [pc, #584]	(c188 <_ZN10FfPipeline11DoRecordingEv+0xb50>)
    bf40:	183a      	adds	r2, r7, r0
    bf42:	218f      	movs	r1, #143
    bf44:	0109      	lsls	r1, r1, #4
    bf46:	19c9      	adds	r1, r1, r7
    bf48:	680c      	ldr	r4, [r1, #0]
    bf4a:	1c18      	adds	r0, r3, #0
    bf4c:	1c11      	adds	r1, r2, #0
    bf4e:	1c22      	adds	r2, r4, #0
    bf50:	f000 f974 	bl	c23c <_Z9AppendLogSsPKc>
    bf54:	228c      	movs	r2, #140
    bf56:	0112      	lsls	r2, r2, #4
    bf58:	18bb      	adds	r3, r7, r2
    bf5a:	1c18      	adds	r0, r3, #0
    bf5c:	f7fd ecfe 	blx	995c <_init+0x1b8>
    bf60:	4889      	ldr	r0, [pc, #548]	(c188 <_ZN10FfPipeline11DoRecordingEv+0xb50>)
    bf62:	183b      	adds	r3, r7, r0
    bf64:	1c18      	adds	r0, r3, #0
    bf66:	f7fd ecfa 	blx	995c <_init+0x1b8>
    bf6a:	4986      	ldr	r1, [pc, #536]	(c184 <_ZN10FfPipeline11DoRecordingEv+0xb4c>)
    bf6c:	187b      	adds	r3, r7, r1
    bf6e:	1c18      	adds	r0, r3, #0
    bf70:	f7fd eda2 	blx	9ab8 <_init+0x314>

  for (i = 0; i < ofcx->nb_streams; i++)
    bf74:	2300      	movs	r3, #0
    bf76:	4a85      	ldr	r2, [pc, #532]	(c18c <_ZN10FfPipeline11DoRecordingEv+0xb54>)
    bf78:	19d2      	adds	r2, r2, r7
    bf7a:	6013      	str	r3, [r2, #0]
    bf7c:	e021      	b.n	bfc2 <_ZN10FfPipeline11DoRecordingEv+0x98a>
    {
      avcodec_close(ofcx->streams[i]->codec);
    bf7e:	487f      	ldr	r0, [pc, #508]	(c17c <_ZN10FfPipeline11DoRecordingEv+0xb44>)
    bf80:	19c0      	adds	r0, r0, r7
    bf82:	6803      	ldr	r3, [r0, #0]
    bf84:	69da      	ldr	r2, [r3, #28]
    bf86:	4981      	ldr	r1, [pc, #516]	(c18c <_ZN10FfPipeline11DoRecordingEv+0xb54>)
    bf88:	19c9      	adds	r1, r1, r7
    bf8a:	680b      	ldr	r3, [r1, #0]
    bf8c:	009b      	lsls	r3, r3, #2
    bf8e:	18d3      	adds	r3, r2, r3
    bf90:	681b      	ldr	r3, [r3, #0]
    bf92:	689b      	ldr	r3, [r3, #8]
    bf94:	1c18      	adds	r0, r3, #0
    bf96:	f7fd ec52 	blx	983c <_init+0x98>
      av_freep(ofcx->streams[i]);
    bf9a:	4a78      	ldr	r2, [pc, #480]	(c17c <_ZN10FfPipeline11DoRecordingEv+0xb44>)
    bf9c:	19d2      	adds	r2, r2, r7
    bf9e:	6813      	ldr	r3, [r2, #0]
    bfa0:	69da      	ldr	r2, [r3, #28]
    bfa2:	487a      	ldr	r0, [pc, #488]	(c18c <_ZN10FfPipeline11DoRecordingEv+0xb54>)
    bfa4:	19c0      	adds	r0, r0, r7
    bfa6:	6803      	ldr	r3, [r0, #0]
    bfa8:	009b      	lsls	r3, r3, #2
    bfaa:	18d3      	adds	r3, r2, r3
    bfac:	681b      	ldr	r3, [r3, #0]
    bfae:	1c18      	adds	r0, r3, #0
    bfb0:	f7fd ec4a 	blx	9848 <_init+0xa4>
  av_write_trailer(ofcx);

  sprintf(str, "DEBUG: Try to close all streams codec for Slot %d\n", Slot);
  AppendLog(str, class_name);

  for (i = 0; i < ofcx->nb_streams; i++)
    bfb4:	4975      	ldr	r1, [pc, #468]	(c18c <_ZN10FfPipeline11DoRecordingEv+0xb54>)
    bfb6:	19c9      	adds	r1, r1, r7
    bfb8:	680b      	ldr	r3, [r1, #0]
    bfba:	3301      	adds	r3, #1
    bfbc:	4a73      	ldr	r2, [pc, #460]	(c18c <_ZN10FfPipeline11DoRecordingEv+0xb54>)
    bfbe:	19d2      	adds	r2, r2, r7
    bfc0:	6013      	str	r3, [r2, #0]
    bfc2:	486e      	ldr	r0, [pc, #440]	(c17c <_ZN10FfPipeline11DoRecordingEv+0xb44>)
    bfc4:	19c0      	adds	r0, r0, r7
    bfc6:	6803      	ldr	r3, [r0, #0]
    bfc8:	699a      	ldr	r2, [r3, #24]
    bfca:	4970      	ldr	r1, [pc, #448]	(c18c <_ZN10FfPipeline11DoRecordingEv+0xb54>)
    bfcc:	19c9      	adds	r1, r1, r7
    bfce:	680b      	ldr	r3, [r1, #0]
    bfd0:	429a      	cmp	r2, r3
    bfd2:	d8d4      	bhi.n	bf7e <_ZN10FfPipeline11DoRecordingEv+0x946>
    {
      avcodec_close(ofcx->streams[i]->codec);
      av_freep(ofcx->streams[i]);
    }

  sprintf(str, "DEBUG: Try to avio_close() for Slot %d\n", Slot);
    bfd4:	68fb      	ldr	r3, [r7, #12]
    bfd6:	791b      	ldrb	r3, [r3, #4]
    bfd8:	1c1c      	adds	r4, r3, #0
    bfda:	4b5f      	ldr	r3, [pc, #380]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    bfdc:	4a6c      	ldr	r2, [pc, #432]	(c190 <_ZN10FfPipeline11DoRecordingEv+0xb58>)
    bfde:	1c18      	adds	r0, r3, #0
    bfe0:	1c11      	adds	r1, r2, #0
    bfe2:	1c22      	adds	r2, r4, #0
    bfe4:	f7fd edfe 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    bfe8:	4a6a      	ldr	r2, [pc, #424]	(c194 <_ZN10FfPipeline11DoRecordingEv+0xb5c>)
    bfea:	18bb      	adds	r3, r7, r2
    bfec:	1c18      	adds	r0, r3, #0
    bfee:	f7fd edca 	blx	9b84 <_init+0x3e0>
    bff2:	208d      	movs	r0, #141
    bff4:	0100      	lsls	r0, r0, #4
    bff6:	183b      	adds	r3, r7, r0
    bff8:	4a57      	ldr	r2, [pc, #348]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    bffa:	4966      	ldr	r1, [pc, #408]	(c194 <_ZN10FfPipeline11DoRecordingEv+0xb5c>)
    bffc:	187c      	adds	r4, r7, r1
    bffe:	1c18      	adds	r0, r3, #0
    c000:	1c11      	adds	r1, r2, #0
    c002:	1c22      	adds	r2, r4, #0
    c004:	f7fd ed16 	blx	9a34 <_init+0x290>
    c008:	4a63      	ldr	r2, [pc, #396]	(c198 <_ZN10FfPipeline11DoRecordingEv+0xb60>)
    c00a:	18bb      	adds	r3, r7, r2
    c00c:	208d      	movs	r0, #141
    c00e:	0100      	lsls	r0, r0, #4
    c010:	183a      	adds	r2, r7, r0
    c012:	218f      	movs	r1, #143
    c014:	0109      	lsls	r1, r1, #4
    c016:	19c9      	adds	r1, r1, r7
    c018:	680c      	ldr	r4, [r1, #0]
    c01a:	1c18      	adds	r0, r3, #0
    c01c:	1c11      	adds	r1, r2, #0
    c01e:	1c22      	adds	r2, r4, #0
    c020:	f000 f90c 	bl	c23c <_Z9AppendLogSsPKc>
    c024:	4a5c      	ldr	r2, [pc, #368]	(c198 <_ZN10FfPipeline11DoRecordingEv+0xb60>)
    c026:	18bb      	adds	r3, r7, r2
    c028:	1c18      	adds	r0, r3, #0
    c02a:	f7fd ec98 	blx	995c <_init+0x1b8>
    c02e:	208d      	movs	r0, #141
    c030:	0100      	lsls	r0, r0, #4
    c032:	183b      	adds	r3, r7, r0
    c034:	1c18      	adds	r0, r3, #0
    c036:	f7fd ec92 	blx	995c <_init+0x1b8>
    c03a:	4956      	ldr	r1, [pc, #344]	(c194 <_ZN10FfPipeline11DoRecordingEv+0xb5c>)
    c03c:	187b      	adds	r3, r7, r1
    c03e:	1c18      	adds	r0, r3, #0
    c040:	f7fd ed3a 	blx	9ab8 <_init+0x314>

  avio_close(ofcx->pb);
    c044:	4a4d      	ldr	r2, [pc, #308]	(c17c <_ZN10FfPipeline11DoRecordingEv+0xb44>)
    c046:	19d2      	adds	r2, r2, r7
    c048:	6813      	ldr	r3, [r2, #0]
    c04a:	691b      	ldr	r3, [r3, #16]
    c04c:	1c18      	adds	r0, r3, #0
    c04e:	f7fd ec80 	blx	9950 <_init+0x1ac>

  sprintf(str, "DEBUG: Try to av_free() for Slot %d\n", Slot);
    c052:	68fb      	ldr	r3, [r7, #12]
    c054:	791b      	ldrb	r3, [r3, #4]
    c056:	1c1c      	adds	r4, r3, #0
    c058:	4b3f      	ldr	r3, [pc, #252]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    c05a:	4a50      	ldr	r2, [pc, #320]	(c19c <_ZN10FfPipeline11DoRecordingEv+0xb64>)
    c05c:	1c18      	adds	r0, r3, #0
    c05e:	1c11      	adds	r1, r2, #0
    c060:	1c22      	adds	r2, r4, #0
    c062:	f7fd edc0 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    c066:	484e      	ldr	r0, [pc, #312]	(c1a0 <_ZN10FfPipeline11DoRecordingEv+0xb68>)
    c068:	183b      	adds	r3, r7, r0
    c06a:	1c18      	adds	r0, r3, #0
    c06c:	f7fd ed8a 	blx	9b84 <_init+0x3e0>
    c070:	494c      	ldr	r1, [pc, #304]	(c1a4 <_ZN10FfPipeline11DoRecordingEv+0xb6c>)
    c072:	187b      	adds	r3, r7, r1
    c074:	4a38      	ldr	r2, [pc, #224]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    c076:	484a      	ldr	r0, [pc, #296]	(c1a0 <_ZN10FfPipeline11DoRecordingEv+0xb68>)
    c078:	183c      	adds	r4, r7, r0
    c07a:	1c18      	adds	r0, r3, #0
    c07c:	1c11      	adds	r1, r2, #0
    c07e:	1c22      	adds	r2, r4, #0
    c080:	f7fd ecd8 	blx	9a34 <_init+0x290>
    c084:	4948      	ldr	r1, [pc, #288]	(c1a8 <_ZN10FfPipeline11DoRecordingEv+0xb70>)
    c086:	187b      	adds	r3, r7, r1
    c088:	4846      	ldr	r0, [pc, #280]	(c1a4 <_ZN10FfPipeline11DoRecordingEv+0xb6c>)
    c08a:	183a      	adds	r2, r7, r0
    c08c:	218f      	movs	r1, #143
    c08e:	0109      	lsls	r1, r1, #4
    c090:	19c9      	adds	r1, r1, r7
    c092:	680c      	ldr	r4, [r1, #0]
    c094:	1c18      	adds	r0, r3, #0
    c096:	1c11      	adds	r1, r2, #0
    c098:	1c22      	adds	r2, r4, #0
    c09a:	f000 f8cf 	bl	c23c <_Z9AppendLogSsPKc>
    c09e:	4a42      	ldr	r2, [pc, #264]	(c1a8 <_ZN10FfPipeline11DoRecordingEv+0xb70>)
    c0a0:	18bb      	adds	r3, r7, r2
    c0a2:	1c18      	adds	r0, r3, #0
    c0a4:	f7fd ec5a 	blx	995c <_init+0x1b8>
    c0a8:	483e      	ldr	r0, [pc, #248]	(c1a4 <_ZN10FfPipeline11DoRecordingEv+0xb6c>)
    c0aa:	183b      	adds	r3, r7, r0
    c0ac:	1c18      	adds	r0, r3, #0
    c0ae:	f7fd ec56 	blx	995c <_init+0x1b8>
    c0b2:	493b      	ldr	r1, [pc, #236]	(c1a0 <_ZN10FfPipeline11DoRecordingEv+0xb68>)
    c0b4:	187b      	adds	r3, r7, r1
    c0b6:	1c18      	adds	r0, r3, #0
    c0b8:	f7fd ecfe 	blx	9ab8 <_init+0x314>

  av_free(ofcx);
    c0bc:	4a2f      	ldr	r2, [pc, #188]	(c17c <_ZN10FfPipeline11DoRecordingEv+0xb44>)
    c0be:	19d2      	adds	r2, r2, r7
    c0c0:	6813      	ldr	r3, [r2, #0]
    c0c2:	1c18      	adds	r0, r3, #0
    c0c4:	f7fd eb84 	blx	97d0 <_init+0x2c>

  sprintf(str, "DEBUG: Try to avformat_close_input() for Slot %d\n", Slot);
    c0c8:	68fb      	ldr	r3, [r7, #12]
    c0ca:	791b      	ldrb	r3, [r3, #4]
    c0cc:	1c1c      	adds	r4, r3, #0
    c0ce:	4b22      	ldr	r3, [pc, #136]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    c0d0:	4a36      	ldr	r2, [pc, #216]	(c1ac <_ZN10FfPipeline11DoRecordingEv+0xb74>)
    c0d2:	1c18      	adds	r0, r3, #0
    c0d4:	1c11      	adds	r1, r2, #0
    c0d6:	1c22      	adds	r2, r4, #0
    c0d8:	f7fd ed84 	blx	9be4 <_init+0x440>
  AppendLog(str, class_name);
    c0dc:	4834      	ldr	r0, [pc, #208]	(c1b0 <_ZN10FfPipeline11DoRecordingEv+0xb78>)
    c0de:	183b      	adds	r3, r7, r0
    c0e0:	1c18      	adds	r0, r3, #0
    c0e2:	f7fd ed50 	blx	9b84 <_init+0x3e0>
    c0e6:	4933      	ldr	r1, [pc, #204]	(c1b4 <_ZN10FfPipeline11DoRecordingEv+0xb7c>)
    c0e8:	187b      	adds	r3, r7, r1
    c0ea:	4a1b      	ldr	r2, [pc, #108]	(c158 <_ZN10FfPipeline11DoRecordingEv+0xb20>)
    c0ec:	4830      	ldr	r0, [pc, #192]	(c1b0 <_ZN10FfPipeline11DoRecordingEv+0xb78>)
    c0ee:	183c      	adds	r4, r7, r0
    c0f0:	1c18      	adds	r0, r3, #0
    c0f2:	1c11      	adds	r1, r2, #0
    c0f4:	1c22      	adds	r2, r4, #0
    c0f6:	f7fd ec9e 	blx	9a34 <_init+0x290>
    c0fa:	492f      	ldr	r1, [pc, #188]	(c1b8 <_ZN10FfPipeline11DoRecordingEv+0xb80>)
    c0fc:	187b      	adds	r3, r7, r1
    c0fe:	482d      	ldr	r0, [pc, #180]	(c1b4 <_ZN10FfPipeline11DoRecordingEv+0xb7c>)
    c100:	183a      	adds	r2, r7, r0
    c102:	218f      	movs	r1, #143
    c104:	0109      	lsls	r1, r1, #4
    c106:	19c9      	adds	r1, r1, r7
    c108:	680c      	ldr	r4, [r1, #0]
    c10a:	1c18      	adds	r0, r3, #0
    c10c:	1c11      	adds	r1, r2, #0
    c10e:	1c22      	adds	r2, r4, #0
    c110:	f000 f894 	bl	c23c <_Z9AppendLogSsPKc>
    c114:	4a28      	ldr	r2, [pc, #160]	(c1b8 <_ZN10FfPipeline11DoRecordingEv+0xb80>)
    c116:	18bb      	adds	r3, r7, r2
    c118:	1c18      	adds	r0, r3, #0
    c11a:	f7fd ec20 	blx	995c <_init+0x1b8>
    c11e:	4825      	ldr	r0, [pc, #148]	(c1b4 <_ZN10FfPipeline11DoRecordingEv+0xb7c>)
    c120:	183b      	adds	r3, r7, r0
    c122:	1c18      	adds	r0, r3, #0
    c124:	f7fd ec1a 	blx	995c <_init+0x1b8>
    c128:	4921      	ldr	r1, [pc, #132]	(c1b0 <_ZN10FfPipeline11DoRecordingEv+0xb78>)
    c12a:	187b      	adds	r3, r7, r1
    c12c:	1c18      	adds	r0, r3, #0
    c12e:	f7fd ecc4 	blx	9ab8 <_init+0x314>

  avformat_close_input(&ifcx);
    c132:	4a22      	ldr	r2, [pc, #136]	(c1bc <_ZN10FfPipeline11DoRecordingEv+0xb84>)
    c134:	18bb      	adds	r3, r7, r2
    c136:	1c18      	adds	r0, r3, #0
    c138:	f7fd ed1e 	blx	9b78 <_init+0x3d4>

  SetRecState(REC_STOPPED);
    c13c:	68fb      	ldr	r3, [r7, #12]
    c13e:	1c18      	adds	r0, r3, #0
    c140:	2102      	movs	r1, #2
    c142:	f7fe fee1 	bl	af08 <_ZN10FfPipeline11SetRecStateE14RecordingState>

  return 0;
    c146:	2300      	movs	r3, #0
    c148:	603b      	str	r3, [r7, #0]
    c14a:	683b      	ldr	r3, [r7, #0]
}
    c14c:	1c18      	adds	r0, r3, #0
    c14e:	46bd      	mov	sp, r7
    c150:	2392      	movs	r3, #146
    c152:	011b      	lsls	r3, r3, #4
    c154:	449d      	add	sp, r3
    c156:	bdb0      	pop	{r4, r5, r7, pc}
    c158:	000167e8 	.word	0x000167e8
    c15c:	0000dbb4 	.word	0x0000dbb4
    c160:	000008b3 	.word	0x000008b3
    c164:	000008ac 	.word	0x000008ac
    c168:	000008a8 	.word	0x000008a8
    c16c:	0000dbd4 	.word	0x0000dbd4
    c170:	000008bf 	.word	0x000008bf
    c174:	000008b8 	.word	0x000008b8
    c178:	000008b4 	.word	0x000008b4
    c17c:	00000864 	.word	0x00000864
    c180:	0000dc04 	.word	0x0000dc04
    c184:	000008cb 	.word	0x000008cb
    c188:	000008c4 	.word	0x000008c4
    c18c:	00000908 	.word	0x00000908
    c190:	0000dc38 	.word	0x0000dc38
    c194:	000008d7 	.word	0x000008d7
    c198:	000008cc 	.word	0x000008cc
    c19c:	0000dc60 	.word	0x0000dc60
    c1a0:	000008e3 	.word	0x000008e3
    c1a4:	000008dc 	.word	0x000008dc
    c1a8:	000008d8 	.word	0x000008d8
    c1ac:	0000dc88 	.word	0x0000dc88
    c1b0:	000008ef 	.word	0x000008ef
    c1b4:	000008e8 	.word	0x000008e8
    c1b8:	000008e4 	.word	0x000008e4
    c1bc:	00000868 	.word	0x00000868

0000c1c0 <_ZN10FfPipeline11ThRecordingEPv>:
  AppendLog(str, class_name);

  return 0;
}

void *FfPipeline::ThRecording(void *pdata)
    c1c0:	b580      	push	{r7, lr}
    c1c2:	b084      	sub	sp, #16
    c1c4:	af00      	add	r7, sp, #0
    c1c6:	6078      	str	r0, [r7, #4]
{
  FfPipeline *Pip = (FfPipeline *) pdata;
    c1c8:	687b      	ldr	r3, [r7, #4]
    c1ca:	60fb      	str	r3, [r7, #12]

  Pip->DoRecording();
    c1cc:	68fb      	ldr	r3, [r7, #12]
    c1ce:	1c18      	adds	r0, r3, #0
    c1d0:	f7ff fa32 	bl	b638 <_ZN10FfPipeline11DoRecordingEv>

  return pdata;
    c1d4:	687b      	ldr	r3, [r7, #4]
}
    c1d6:	1c18      	adds	r0, r3, #0
    c1d8:	46bd      	mov	sp, r7
    c1da:	b004      	add	sp, #16
    c1dc:	bd80      	pop	{r7, pc}
    c1de:	46c0      	nop			(mov r8, r8)

0000c1e0 <_Z41__static_initialization_and_destruction_0ii>:
  if (level <= PRINT_LEVEL)
    {
      std::printf("%s", print_str.c_str());
    }
  return txt;
}
    c1e0:	b580      	push	{r7, lr}
    c1e2:	b082      	sub	sp, #8
    c1e4:	af00      	add	r7, sp, #0
    c1e6:	6078      	str	r0, [r7, #4]
    c1e8:	6039      	str	r1, [r7, #0]
    c1ea:	687b      	ldr	r3, [r7, #4]
    c1ec:	2b01      	cmp	r3, #1
    c1ee:	d10d      	bne.n	c20c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c1f0:	683a      	ldr	r2, [r7, #0]
    c1f2:	4b08      	ldr	r3, [pc, #32]	(c214 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c1f4:	429a      	cmp	r2, r3
    c1f6:	d109      	bne.n	c20c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c1f8:	4b07      	ldr	r3, [pc, #28]	(c218 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c1fa:	1c18      	adds	r0, r3, #0
    c1fc:	f7fd eb6c 	blx	98d8 <_init+0x134>
    c200:	4906      	ldr	r1, [pc, #24]	(c21c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    c202:	4b05      	ldr	r3, [pc, #20]	(c218 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c204:	4a06      	ldr	r2, [pc, #24]	(c220 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    c206:	1c18      	adds	r0, r3, #0
    c208:	f7fd ec62 	blx	9ad0 <_init+0x32c>
    c20c:	46bd      	mov	sp, r7
    c20e:	b002      	add	sp, #8
    c210:	bd80      	pop	{r7, pc}
    c212:	46c0      	nop			(mov r8, r8)
    c214:	0000ffff 	.word	0x0000ffff
    c218:	000167cb 	.word	0x000167cb
    c21c:	00009938 	.word	0x00009938
    c220:	00016780 	.word	0x00016780

0000c224 <_GLOBAL__I__Z9AppendLogSsPKc>:
    c224:	b580      	push	{r7, lr}
    c226:	af00      	add	r7, sp, #0
    c228:	4b03      	ldr	r3, [pc, #12]	(c238 <_GLOBAL__I__Z9AppendLogSsPKc+0x14>)
    c22a:	2001      	movs	r0, #1
    c22c:	1c19      	adds	r1, r3, #0
    c22e:	f7ff ffd7 	bl	c1e0 <_Z41__static_initialization_and_destruction_0ii>
    c232:	46bd      	mov	sp, r7
    c234:	bd80      	pop	{r7, pc}
    c236:	46c0      	nop			(mov r8, r8)
    c238:	0000ffff 	.word	0x0000ffff

0000c23c <_Z9AppendLogSsPKc>:
{
	return "";
}
*/

string AppendLog(string txt, const char *module)
    c23c:	b5b0      	push	{r4, r5, r7, lr}
    c23e:	b098      	sub	sp, #96
    c240:	af00      	add	r7, sp, #0
    c242:	6278      	str	r0, [r7, #36]
    c244:	62f9      	str	r1, [r7, #44]
    c246:	62ba      	str	r2, [r7, #40]
{
  size_t level = 0;
    c248:	2300      	movs	r3, #0
    c24a:	65fb      	str	r3, [r7, #92]
  string print_str = string("<") + string(module) + string("> ") + txt;
    c24c:	1c3b      	adds	r3, r7, #0
    c24e:	3343      	adds	r3, #67
    c250:	1c18      	adds	r0, r3, #0
    c252:	f7fd ec98 	blx	9b84 <_init+0x3e0>
    c256:	1c3b      	adds	r3, r7, #0
    c258:	333c      	adds	r3, #60
    c25a:	4aab      	ldr	r2, [pc, #684]	(c508 <_Z9AppendLogSsPKc+0x2cc>)
    c25c:	1c3c      	adds	r4, r7, #0
    c25e:	3443      	adds	r4, #67
    c260:	1c18      	adds	r0, r3, #0
    c262:	1c11      	adds	r1, r2, #0
    c264:	1c22      	adds	r2, r4, #0
    c266:	f7fd ebe6 	blx	9a34 <_init+0x290>
    c26a:	1c3b      	adds	r3, r7, #0
    c26c:	334b      	adds	r3, #75
    c26e:	1c18      	adds	r0, r3, #0
    c270:	f7fd ec88 	blx	9b84 <_init+0x3e0>
    c274:	1c3b      	adds	r3, r7, #0
    c276:	3344      	adds	r3, #68
    c278:	6aba      	ldr	r2, [r7, #40]
    c27a:	1c3c      	adds	r4, r7, #0
    c27c:	344b      	adds	r4, #75
    c27e:	1c18      	adds	r0, r3, #0
    c280:	1c11      	adds	r1, r2, #0
    c282:	1c22      	adds	r2, r4, #0
    c284:	f7fd ebd6 	blx	9a34 <_init+0x290>
    c288:	1c3b      	adds	r3, r7, #0
    c28a:	3338      	adds	r3, #56
    c28c:	1c3a      	adds	r2, r7, #0
    c28e:	323c      	adds	r2, #60
    c290:	1c3c      	adds	r4, r7, #0
    c292:	3444      	adds	r4, #68
    c294:	1c18      	adds	r0, r3, #0
    c296:	1c11      	adds	r1, r2, #0
    c298:	1c22      	adds	r2, r4, #0
    c29a:	f000 f951 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    c29e:	1c3b      	adds	r3, r7, #0
    c2a0:	3352      	adds	r3, #82
    c2a2:	1c18      	adds	r0, r3, #0
    c2a4:	f7fd ec6e 	blx	9b84 <_init+0x3e0>
    c2a8:	1c3b      	adds	r3, r7, #0
    c2aa:	334c      	adds	r3, #76
    c2ac:	4a97      	ldr	r2, [pc, #604]	(c50c <_Z9AppendLogSsPKc+0x2d0>)
    c2ae:	1c3c      	adds	r4, r7, #0
    c2b0:	3452      	adds	r4, #82
    c2b2:	1c18      	adds	r0, r3, #0
    c2b4:	1c11      	adds	r1, r2, #0
    c2b6:	1c22      	adds	r2, r4, #0
    c2b8:	f7fd ebbc 	blx	9a34 <_init+0x290>
    c2bc:	1c3b      	adds	r3, r7, #0
    c2be:	3334      	adds	r3, #52
    c2c0:	1c3a      	adds	r2, r7, #0
    c2c2:	3238      	adds	r2, #56
    c2c4:	1c3c      	adds	r4, r7, #0
    c2c6:	344c      	adds	r4, #76
    c2c8:	1c18      	adds	r0, r3, #0
    c2ca:	1c11      	adds	r1, r2, #0
    c2cc:	1c22      	adds	r2, r4, #0
    c2ce:	f000 f937 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    c2d2:	1c3b      	adds	r3, r7, #0
    c2d4:	3330      	adds	r3, #48
    c2d6:	1c3a      	adds	r2, r7, #0
    c2d8:	3234      	adds	r2, #52
    c2da:	6afc      	ldr	r4, [r7, #44]
    c2dc:	1c18      	adds	r0, r3, #0
    c2de:	1c11      	adds	r1, r2, #0
    c2e0:	1c22      	adds	r2, r4, #0
    c2e2:	f000 f92d 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    c2e6:	1c3b      	adds	r3, r7, #0
    c2e8:	3334      	adds	r3, #52
    c2ea:	1c18      	adds	r0, r3, #0
    c2ec:	f7fd eb36 	blx	995c <_init+0x1b8>
    c2f0:	1c3b      	adds	r3, r7, #0
    c2f2:	334c      	adds	r3, #76
    c2f4:	1c18      	adds	r0, r3, #0
    c2f6:	f7fd eb32 	blx	995c <_init+0x1b8>
    c2fa:	1c3b      	adds	r3, r7, #0
    c2fc:	3352      	adds	r3, #82
    c2fe:	1c18      	adds	r0, r3, #0
    c300:	f7fd ebda 	blx	9ab8 <_init+0x314>
    c304:	1c3b      	adds	r3, r7, #0
    c306:	3338      	adds	r3, #56
    c308:	1c18      	adds	r0, r3, #0
    c30a:	f7fd eb28 	blx	995c <_init+0x1b8>
    c30e:	1c3b      	adds	r3, r7, #0
    c310:	3344      	adds	r3, #68
    c312:	1c18      	adds	r0, r3, #0
    c314:	f7fd eb22 	blx	995c <_init+0x1b8>
    c318:	1c3b      	adds	r3, r7, #0
    c31a:	334b      	adds	r3, #75
    c31c:	1c18      	adds	r0, r3, #0
    c31e:	f7fd ebcc 	blx	9ab8 <_init+0x314>
    c322:	1c3b      	adds	r3, r7, #0
    c324:	333c      	adds	r3, #60
    c326:	1c18      	adds	r0, r3, #0
    c328:	f7fd eb18 	blx	995c <_init+0x1b8>
    c32c:	1c3b      	adds	r3, r7, #0
    c32e:	3343      	adds	r3, #67
    c330:	1c18      	adds	r0, r3, #0
    c332:	f7fd ebc2 	blx	9ab8 <_init+0x314>


  if (txt.find("EMERGENCY") != string::npos)
    c336:	6afb      	ldr	r3, [r7, #44]
    c338:	4a75      	ldr	r2, [pc, #468]	(c510 <_Z9AppendLogSsPKc+0x2d4>)
    c33a:	1c18      	adds	r0, r3, #0
    c33c:	1c11      	adds	r1, r2, #0
    c33e:	2200      	movs	r2, #0
    c340:	f7fd eb00 	blx	9944 <_init+0x1a0>
    c344:	1c03      	adds	r3, r0, #0
    c346:	3301      	adds	r3, #1
    c348:	1e5a      	subs	r2, r3, #1
    c34a:	4193      	sbcs	r3, r2
    c34c:	061b      	lsls	r3, r3, #24
    c34e:	0e1b      	lsrs	r3, r3, #24
    c350:	2b00      	cmp	r3, #0
    c352:	d002      	beq.n	c35a <_Z9AppendLogSsPKc+0x11e>
    level = 0;
    c354:	2300      	movs	r3, #0
    c356:	65fb      	str	r3, [r7, #92]
    c358:	e07f      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("ALERT") != string::npos)
    c35a:	6afb      	ldr	r3, [r7, #44]
    c35c:	4a6d      	ldr	r2, [pc, #436]	(c514 <_Z9AppendLogSsPKc+0x2d8>)
    c35e:	1c18      	adds	r0, r3, #0
    c360:	1c11      	adds	r1, r2, #0
    c362:	2200      	movs	r2, #0
    c364:	f7fd eaee 	blx	9944 <_init+0x1a0>
    c368:	1c03      	adds	r3, r0, #0
    c36a:	3301      	adds	r3, #1
    c36c:	1e5a      	subs	r2, r3, #1
    c36e:	4193      	sbcs	r3, r2
    c370:	061b      	lsls	r3, r3, #24
    c372:	0e1b      	lsrs	r3, r3, #24
    c374:	2b00      	cmp	r3, #0
    c376:	d002      	beq.n	c37e <_Z9AppendLogSsPKc+0x142>
    level = 1;
    c378:	2301      	movs	r3, #1
    c37a:	65fb      	str	r3, [r7, #92]
    c37c:	e06d      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("CRITICAL") != string::npos)
    c37e:	6afb      	ldr	r3, [r7, #44]
    c380:	4a65      	ldr	r2, [pc, #404]	(c518 <_Z9AppendLogSsPKc+0x2dc>)
    c382:	1c18      	adds	r0, r3, #0
    c384:	1c11      	adds	r1, r2, #0
    c386:	2200      	movs	r2, #0
    c388:	f7fd eadc 	blx	9944 <_init+0x1a0>
    c38c:	1c03      	adds	r3, r0, #0
    c38e:	3301      	adds	r3, #1
    c390:	1e5a      	subs	r2, r3, #1
    c392:	4193      	sbcs	r3, r2
    c394:	061b      	lsls	r3, r3, #24
    c396:	0e1b      	lsrs	r3, r3, #24
    c398:	2b00      	cmp	r3, #0
    c39a:	d002      	beq.n	c3a2 <_Z9AppendLogSsPKc+0x166>
    level = 2;
    c39c:	2302      	movs	r3, #2
    c39e:	65fb      	str	r3, [r7, #92]
    c3a0:	e05b      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("ERROR") != string::npos)
    c3a2:	6afb      	ldr	r3, [r7, #44]
    c3a4:	4a5d      	ldr	r2, [pc, #372]	(c51c <_Z9AppendLogSsPKc+0x2e0>)
    c3a6:	1c18      	adds	r0, r3, #0
    c3a8:	1c11      	adds	r1, r2, #0
    c3aa:	2200      	movs	r2, #0
    c3ac:	f7fd eaca 	blx	9944 <_init+0x1a0>
    c3b0:	1c03      	adds	r3, r0, #0
    c3b2:	3301      	adds	r3, #1
    c3b4:	1e5a      	subs	r2, r3, #1
    c3b6:	4193      	sbcs	r3, r2
    c3b8:	061b      	lsls	r3, r3, #24
    c3ba:	0e1b      	lsrs	r3, r3, #24
    c3bc:	2b00      	cmp	r3, #0
    c3be:	d002      	beq.n	c3c6 <_Z9AppendLogSsPKc+0x18a>
    level = 3;
    c3c0:	2303      	movs	r3, #3
    c3c2:	65fb      	str	r3, [r7, #92]
    c3c4:	e049      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("WARNING") != string::npos)
    c3c6:	6afb      	ldr	r3, [r7, #44]
    c3c8:	4a55      	ldr	r2, [pc, #340]	(c520 <_Z9AppendLogSsPKc+0x2e4>)
    c3ca:	1c18      	adds	r0, r3, #0
    c3cc:	1c11      	adds	r1, r2, #0
    c3ce:	2200      	movs	r2, #0
    c3d0:	f7fd eab8 	blx	9944 <_init+0x1a0>
    c3d4:	1c03      	adds	r3, r0, #0
    c3d6:	3301      	adds	r3, #1
    c3d8:	1e5a      	subs	r2, r3, #1
    c3da:	4193      	sbcs	r3, r2
    c3dc:	061b      	lsls	r3, r3, #24
    c3de:	0e1b      	lsrs	r3, r3, #24
    c3e0:	2b00      	cmp	r3, #0
    c3e2:	d002      	beq.n	c3ea <_Z9AppendLogSsPKc+0x1ae>
    level = 4;
    c3e4:	2304      	movs	r3, #4
    c3e6:	65fb      	str	r3, [r7, #92]
    c3e8:	e037      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("NOTICE") != string::npos)
    c3ea:	6afb      	ldr	r3, [r7, #44]
    c3ec:	4a4d      	ldr	r2, [pc, #308]	(c524 <_Z9AppendLogSsPKc+0x2e8>)
    c3ee:	1c18      	adds	r0, r3, #0
    c3f0:	1c11      	adds	r1, r2, #0
    c3f2:	2200      	movs	r2, #0
    c3f4:	f7fd eaa6 	blx	9944 <_init+0x1a0>
    c3f8:	1c03      	adds	r3, r0, #0
    c3fa:	3301      	adds	r3, #1
    c3fc:	1e5a      	subs	r2, r3, #1
    c3fe:	4193      	sbcs	r3, r2
    c400:	061b      	lsls	r3, r3, #24
    c402:	0e1b      	lsrs	r3, r3, #24
    c404:	2b00      	cmp	r3, #0
    c406:	d002      	beq.n	c40e <_Z9AppendLogSsPKc+0x1d2>
    level = 5;
    c408:	2305      	movs	r3, #5
    c40a:	65fb      	str	r3, [r7, #92]
    c40c:	e025      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("INFO") != string::npos)
    c40e:	6afb      	ldr	r3, [r7, #44]
    c410:	4a45      	ldr	r2, [pc, #276]	(c528 <_Z9AppendLogSsPKc+0x2ec>)
    c412:	1c18      	adds	r0, r3, #0
    c414:	1c11      	adds	r1, r2, #0
    c416:	2200      	movs	r2, #0
    c418:	f7fd ea94 	blx	9944 <_init+0x1a0>
    c41c:	1c03      	adds	r3, r0, #0
    c41e:	3301      	adds	r3, #1
    c420:	1e5a      	subs	r2, r3, #1
    c422:	4193      	sbcs	r3, r2
    c424:	061b      	lsls	r3, r3, #24
    c426:	0e1b      	lsrs	r3, r3, #24
    c428:	2b00      	cmp	r3, #0
    c42a:	d002      	beq.n	c432 <_Z9AppendLogSsPKc+0x1f6>
    level = 6;
    c42c:	2306      	movs	r3, #6
    c42e:	65fb      	str	r3, [r7, #92]
    c430:	e013      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else if (txt.find("DEBUG") != string::npos)
    c432:	6afb      	ldr	r3, [r7, #44]
    c434:	4a3d      	ldr	r2, [pc, #244]	(c52c <_Z9AppendLogSsPKc+0x2f0>)
    c436:	1c18      	adds	r0, r3, #0
    c438:	1c11      	adds	r1, r2, #0
    c43a:	2200      	movs	r2, #0
    c43c:	f7fd ea82 	blx	9944 <_init+0x1a0>
    c440:	1c03      	adds	r3, r0, #0
    c442:	3301      	adds	r3, #1
    c444:	1e5a      	subs	r2, r3, #1
    c446:	4193      	sbcs	r3, r2
    c448:	061b      	lsls	r3, r3, #24
    c44a:	0e1b      	lsrs	r3, r3, #24
    c44c:	2b00      	cmp	r3, #0
    c44e:	d002      	beq.n	c456 <_Z9AppendLogSsPKc+0x21a>
    level = 7;
    c450:	2307      	movs	r3, #7
    c452:	65fb      	str	r3, [r7, #92]
    c454:	e001      	b.n	c45a <_Z9AppendLogSsPKc+0x21e>
  else
    level = 7;
    c456:	2307      	movs	r3, #7
    c458:	65fb      	str	r3, [r7, #92]

  if (Log == NULL)
    c45a:	4b35      	ldr	r3, [pc, #212]	(c530 <_Z9AppendLogSsPKc+0x2f4>)
    c45c:	681b      	ldr	r3, [r3, #0]
    c45e:	2b00      	cmp	r3, #0
    c460:	d116      	bne.n	c490 <_Z9AppendLogSsPKc+0x254>
    {
      printf("ERROR! Log pointer is NULL! Skip.\n");
    c462:	4b34      	ldr	r3, [pc, #208]	(c534 <_Z9AppendLogSsPKc+0x2f8>)
    c464:	1c18      	adds	r0, r3, #0
    c466:	f7fd eb4c 	blx	9b00 <_init+0x35c>
      return "";
    c46a:	6a7c      	ldr	r4, [r7, #36]
    c46c:	1c3b      	adds	r3, r7, #0
    c46e:	3353      	adds	r3, #83
    c470:	1c18      	adds	r0, r3, #0
    c472:	f7fd eb88 	blx	9b84 <_init+0x3e0>
    c476:	4b30      	ldr	r3, [pc, #192]	(c538 <_Z9AppendLogSsPKc+0x2fc>)
    c478:	1c3a      	adds	r2, r7, #0
    c47a:	3253      	adds	r2, #83
    c47c:	1c20      	adds	r0, r4, #0
    c47e:	1c19      	adds	r1, r3, #0
    c480:	f7fd ead8 	blx	9a34 <_init+0x290>
    c484:	1c3b      	adds	r3, r7, #0
    c486:	3353      	adds	r3, #83
    c488:	1c18      	adds	r0, r3, #0
    c48a:	f7fd eb16 	blx	9ab8 <_init+0x314>
    c48e:	e031      	b.n	c4f4 <_Z9AppendLogSsPKc+0x2b8>
    }

  Log->AppendLog(print_str, level);
    c490:	4b27      	ldr	r3, [pc, #156]	(c530 <_Z9AppendLogSsPKc+0x2f4>)
    c492:	681c      	ldr	r4, [r3, #0]
    c494:	1c3b      	adds	r3, r7, #0
    c496:	3358      	adds	r3, #88
    c498:	1c3a      	adds	r2, r7, #0
    c49a:	3230      	adds	r2, #48
    c49c:	1c18      	adds	r0, r3, #0
    c49e:	1c11      	adds	r1, r2, #0
    c4a0:	f7fd ea2c 	blx	98fc <_init+0x158>
    c4a4:	6dfd      	ldr	r5, [r7, #92]
    c4a6:	1c3b      	adds	r3, r7, #0
    c4a8:	3354      	adds	r3, #84
    c4aa:	1c3a      	adds	r2, r7, #0
    c4ac:	3258      	adds	r2, #88
    c4ae:	1c18      	adds	r0, r3, #0
    c4b0:	1c21      	adds	r1, r4, #0
    c4b2:	1c2b      	adds	r3, r5, #0
    c4b4:	f000 fa52 	bl	c95c <_ZN9arlogging7Logging9AppendLogESsi>
    c4b8:	1c3b      	adds	r3, r7, #0
    c4ba:	3354      	adds	r3, #84
    c4bc:	1c18      	adds	r0, r3, #0
    c4be:	f7fd ea4e 	blx	995c <_init+0x1b8>
    c4c2:	1c3b      	adds	r3, r7, #0
    c4c4:	3358      	adds	r3, #88
    c4c6:	1c18      	adds	r0, r3, #0
    c4c8:	f7fd ea48 	blx	995c <_init+0x1b8>
  if (level <= PRINT_LEVEL)
    c4cc:	6dfb      	ldr	r3, [r7, #92]
    c4ce:	2b07      	cmp	r3, #7
    c4d0:	d80a      	bhi.n	c4e8 <_Z9AppendLogSsPKc+0x2ac>
    {
      std::printf("%s", print_str.c_str());
    c4d2:	1c3b      	adds	r3, r7, #0
    c4d4:	3330      	adds	r3, #48
    c4d6:	1c18      	adds	r0, r3, #0
    c4d8:	f7fd e9e0 	blx	989c <_init+0xf8>
    c4dc:	1c02      	adds	r2, r0, #0
    c4de:	4b17      	ldr	r3, [pc, #92]	(c53c <_Z9AppendLogSsPKc+0x300>)
    c4e0:	1c18      	adds	r0, r3, #0
    c4e2:	1c11      	adds	r1, r2, #0
    c4e4:	f7fd eab8 	blx	9a58 <_init+0x2b4>
    }
  return txt;
    c4e8:	6a7b      	ldr	r3, [r7, #36]
    c4ea:	6afa      	ldr	r2, [r7, #44]
    c4ec:	1c18      	adds	r0, r3, #0
    c4ee:	1c11      	adds	r1, r2, #0
    c4f0:	f7fd ea04 	blx	98fc <_init+0x158>
    c4f4:	1c3b      	adds	r3, r7, #0
    c4f6:	3330      	adds	r3, #48
    c4f8:	1c18      	adds	r0, r3, #0
    c4fa:	f7fd ea30 	blx	995c <_init+0x1b8>
}
    c4fe:	6a78      	ldr	r0, [r7, #36]
    c500:	6a78      	ldr	r0, [r7, #36]
    c502:	46bd      	mov	sp, r7
    c504:	b018      	add	sp, #96
    c506:	bdb0      	pop	{r4, r5, r7, pc}
    c508:	0000dcbc 	.word	0x0000dcbc
    c50c:	0000dcc0 	.word	0x0000dcc0
    c510:	0000dcc4 	.word	0x0000dcc4
    c514:	0000dcd0 	.word	0x0000dcd0
    c518:	0000dcd8 	.word	0x0000dcd8
    c51c:	0000dce4 	.word	0x0000dce4
    c520:	0000dcec 	.word	0x0000dcec
    c524:	0000dcf4 	.word	0x0000dcf4
    c528:	0000dcfc 	.word	0x0000dcfc
    c52c:	0000dd04 	.word	0x0000dd04
    c530:	00016fec 	.word	0x00016fec
    c534:	0000dd0c 	.word	0x0000dd0c
    c538:	0000dd30 	.word	0x0000dd30
    c53c:	0000dd34 	.word	0x0000dd34

0000c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
   *  @return  New string with value of @a lhs followed by @a rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    c540:	b590      	push	{r4, r7, lr}
    c542:	b085      	sub	sp, #20
    c544:	af00      	add	r7, sp, #0
    c546:	1c04      	adds	r4, r0, #0
    c548:	6079      	str	r1, [r7, #4]
    c54a:	603a      	str	r2, [r7, #0]
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
    c54c:	1c23      	adds	r3, r4, #0
    c54e:	687a      	ldr	r2, [r7, #4]
    c550:	1c18      	adds	r0, r3, #0
    c552:	1c11      	adds	r1, r2, #0
    c554:	f7fd e9d2 	blx	98fc <_init+0x158>
      __str.append(__rhs);
    c558:	1c23      	adds	r3, r4, #0
    c55a:	683a      	ldr	r2, [r7, #0]
    c55c:	1c18      	adds	r0, r3, #0
    c55e:	1c11      	adds	r1, r2, #0
    c560:	f7fd eb2e 	blx	9bc0 <_init+0x41c>
      return __str;
    }
    c564:	1c20      	adds	r0, r4, #0
    c566:	1c20      	adds	r0, r4, #0
    c568:	46bd      	mov	sp, r7
    c56a:	b005      	add	sp, #20
    c56c:	bd90      	pop	{r4, r7, pc}
    c56e:	46c0      	nop			(mov r8, r8)

0000c570 <_Z41__static_initialization_and_destruction_0ii>:
		Memory = mem;
		PWriter->TimerCounter = 0;
		PWriter->Continue();
	}
	return true;
}
    c570:	b580      	push	{r7, lr}
    c572:	b082      	sub	sp, #8
    c574:	af00      	add	r7, sp, #0
    c576:	6078      	str	r0, [r7, #4]
    c578:	6039      	str	r1, [r7, #0]
    c57a:	687b      	ldr	r3, [r7, #4]
    c57c:	2b01      	cmp	r3, #1
    c57e:	d10d      	bne.n	c59c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c580:	683a      	ldr	r2, [r7, #0]
    c582:	4b08      	ldr	r3, [pc, #32]	(c5a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c584:	429a      	cmp	r2, r3
    c586:	d109      	bne.n	c59c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c588:	4b07      	ldr	r3, [pc, #28]	(c5a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c58a:	1c18      	adds	r0, r3, #0
    c58c:	f7fd e9a4 	blx	98d8 <_init+0x134>
    c590:	4906      	ldr	r1, [pc, #24]	(c5ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    c592:	4b05      	ldr	r3, [pc, #20]	(c5a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c594:	4a06      	ldr	r2, [pc, #24]	(c5b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    c596:	1c18      	adds	r0, r3, #0
    c598:	f7fd ea9a 	blx	9ad0 <_init+0x32c>
    c59c:	46bd      	mov	sp, r7
    c59e:	b002      	add	sp, #8
    c5a0:	bd80      	pop	{r7, pc}
    c5a2:	46c0      	nop			(mov r8, r8)
    c5a4:	0000ffff 	.word	0x0000ffff
    c5a8:	000167e0 	.word	0x000167e0
    c5ac:	00009938 	.word	0x00009938
    c5b0:	00016780 	.word	0x00016780

0000c5b4 <_GLOBAL__I_MainLoop>:
    c5b4:	b580      	push	{r7, lr}
    c5b6:	af00      	add	r7, sp, #0
    c5b8:	4b03      	ldr	r3, [pc, #12]	(c5c8 <_GLOBAL__I_MainLoop+0x14>)
    c5ba:	2001      	movs	r0, #1
    c5bc:	1c19      	adds	r1, r3, #0
    c5be:	f7ff ffd7 	bl	c570 <_Z41__static_initialization_and_destruction_0ii>
    c5c2:	46bd      	mov	sp, r7
    c5c4:	bd80      	pop	{r7, pc}
    c5c6:	46c0      	nop			(mov r8, r8)
    c5c8:	0000ffff 	.word	0x0000ffff

0000c5cc <_ZL15TimeoutCallbackPv>:

	delete Log;
	delete Writer;
}

gboolean TimeoutCallback(gpointer data)
    c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ce:	b08b      	sub	sp, #44
    c5d0:	af02      	add	r7, sp, #8
    c5d2:	6078      	str	r0, [r7, #4]
{
	FfWriterEngine *PWriter = (FfWriterEngine *) data;
    c5d4:	687b      	ldr	r3, [r7, #4]
    c5d6:	617b      	str	r3, [r7, #20]

	PWriter->TimerCounter++;
    c5d8:	697b      	ldr	r3, [r7, #20]
    c5da:	681b      	ldr	r3, [r3, #0]
    c5dc:	1c5a      	adds	r2, r3, #1
    c5de:	697b      	ldr	r3, [r7, #20]
    c5e0:	601a      	str	r2, [r3, #0]
	PWriter->AppendMemoryData();
    c5e2:	697b      	ldr	r3, [r7, #20]
    c5e4:	1c18      	adds	r0, r3, #0
    c5e6:	f7fd fd25 	bl	a034 <_ZN14FfWriterEngine16AppendMemoryDataEv>

	if (PWriter->TimerCounter >= REC_TIMEOUT)
    c5ea:	697b      	ldr	r3, [r7, #20]
    c5ec:	681b      	ldr	r3, [r3, #0]
    c5ee:	2b1d      	cmp	r3, #29
    c5f0:	d94f      	bls.n	c692 <_ZL15TimeoutCallbackPv+0xc6>
	{
		uint64_t mem = PWriter->GetMemoryConsumption();
    c5f2:	697b      	ldr	r3, [r7, #20]
    c5f4:	1c18      	adds	r0, r3, #0
    c5f6:	f7fd fc03 	bl	9e00 <_ZN14FfWriterEngine20GetMemoryConsumptionEv>
    c5fa:	1c03      	adds	r3, r0, #0
    c5fc:	61bb      	str	r3, [r7, #24]
    c5fe:	17db      	asrs	r3, r3, #31
    c600:	61fb      	str	r3, [r7, #28]
		sprintf(str, "DEBUG: Timeout callback. Memory: %lld. Delta: %lld\n", mem, mem - Memory);
    c602:	4b26      	ldr	r3, [pc, #152]	(c69c <_ZL15TimeoutCallbackPv+0xd0>)
    c604:	685c      	ldr	r4, [r3, #4]
    c606:	681b      	ldr	r3, [r3, #0]
    c608:	1c19      	adds	r1, r3, #0
    c60a:	1c22      	adds	r2, r4, #0
    c60c:	69bb      	ldr	r3, [r7, #24]
    c60e:	69fc      	ldr	r4, [r7, #28]
    c610:	1a5b      	subs	r3, r3, r1
    c612:	4194      	sbcs	r4, r2
    c614:	4a22      	ldr	r2, [pc, #136]	(c6a0 <_ZL15TimeoutCallbackPv+0xd4>)
    c616:	4923      	ldr	r1, [pc, #140]	(c6a4 <_ZL15TimeoutCallbackPv+0xd8>)
    c618:	69bd      	ldr	r5, [r7, #24]
    c61a:	69fe      	ldr	r6, [r7, #28]
    c61c:	9300      	str	r3, [sp, #0]
    c61e:	9401      	str	r4, [sp, #4]
    c620:	1c10      	adds	r0, r2, #0
    c622:	1c2a      	adds	r2, r5, #0
    c624:	1c33      	adds	r3, r6, #0
    c626:	f7fd eade 	blx	9be4 <_init+0x440>
		AppendLog(str, "MAIN");
    c62a:	1c3b      	adds	r3, r7, #0
    c62c:	3313      	adds	r3, #19
    c62e:	1c18      	adds	r0, r3, #0
    c630:	f7fd eaa8 	blx	9b84 <_init+0x3e0>
    c634:	1c3b      	adds	r3, r7, #0
    c636:	330c      	adds	r3, #12
    c638:	4a19      	ldr	r2, [pc, #100]	(c6a0 <_ZL15TimeoutCallbackPv+0xd4>)
    c63a:	1c3c      	adds	r4, r7, #0
    c63c:	3413      	adds	r4, #19
    c63e:	1c18      	adds	r0, r3, #0
    c640:	1c11      	adds	r1, r2, #0
    c642:	1c22      	adds	r2, r4, #0
    c644:	f7fd e9f6 	blx	9a34 <_init+0x290>
    c648:	1c3b      	adds	r3, r7, #0
    c64a:	3308      	adds	r3, #8
    c64c:	1c3a      	adds	r2, r7, #0
    c64e:	320c      	adds	r2, #12
    c650:	4c15      	ldr	r4, [pc, #84]	(c6a8 <_ZL15TimeoutCallbackPv+0xdc>)
    c652:	1c18      	adds	r0, r3, #0
    c654:	1c11      	adds	r1, r2, #0
    c656:	1c22      	adds	r2, r4, #0
    c658:	f7ff fdf0 	bl	c23c <_Z9AppendLogSsPKc>
    c65c:	1c3b      	adds	r3, r7, #0
    c65e:	3308      	adds	r3, #8
    c660:	1c18      	adds	r0, r3, #0
    c662:	f7fd e97c 	blx	995c <_init+0x1b8>
    c666:	1c3b      	adds	r3, r7, #0
    c668:	330c      	adds	r3, #12
    c66a:	1c18      	adds	r0, r3, #0
    c66c:	f7fd e976 	blx	995c <_init+0x1b8>
    c670:	1c3b      	adds	r3, r7, #0
    c672:	3313      	adds	r3, #19
    c674:	1c18      	adds	r0, r3, #0
    c676:	f7fd ea20 	blx	9ab8 <_init+0x314>
		Memory = mem;
    c67a:	69bb      	ldr	r3, [r7, #24]
    c67c:	69fc      	ldr	r4, [r7, #28]
    c67e:	4a07      	ldr	r2, [pc, #28]	(c69c <_ZL15TimeoutCallbackPv+0xd0>)
    c680:	6013      	str	r3, [r2, #0]
    c682:	6054      	str	r4, [r2, #4]
		PWriter->TimerCounter = 0;
    c684:	697a      	ldr	r2, [r7, #20]
    c686:	2300      	movs	r3, #0
    c688:	6013      	str	r3, [r2, #0]
		PWriter->Continue();
    c68a:	697b      	ldr	r3, [r7, #20]
    c68c:	1c18      	adds	r0, r3, #0
    c68e:	f7fd ff8f 	bl	a5b0 <_ZN14FfWriterEngine8ContinueEv>
	}
	return true;
    c692:	2301      	movs	r3, #1
}
    c694:	1c18      	adds	r0, r3, #0
    c696:	46bd      	mov	sp, r7
    c698:	b009      	add	sp, #36
    c69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c69c:	000167d8 	.word	0x000167d8
    c6a0:	000167e8 	.word	0x000167e8
    c6a4:	0000dd38 	.word	0x0000dd38
    c6a8:	0000dd6c 	.word	0x0000dd6c

0000c6ac <main>:
#include "include/main.h"
#include "include/ff_writer_engine.h"
#include "include/vars.h"

int main()
    c6ac:	b5b0      	push	{r4, r5, r7, lr}
    c6ae:	b088      	sub	sp, #32
    c6b0:	af02      	add	r7, sp, #8
{
	FfWriterEngine *Writer = new FfWriterEngine();
    c6b2:	2010      	movs	r0, #16
    c6b4:	f7fd e9dc 	blx	9a70 <_init+0x2cc>
    c6b8:	1c03      	adds	r3, r0, #0
    c6ba:	1c1c      	adds	r4, r3, #0
    c6bc:	1c20      	adds	r0, r4, #0
    c6be:	f7fe f847 	bl	a750 <_ZN14FfWriterEngineC1Ev>
    c6c2:	617c      	str	r4, [r7, #20]
	Log = new Logging("ff_test_mem.log", LOG_LEVEL);
    c6c4:	1c3b      	adds	r3, r7, #0
    c6c6:	3313      	adds	r3, #19
    c6c8:	1c18      	adds	r0, r3, #0
    c6ca:	f7fd ea5c 	blx	9b84 <_init+0x3e0>
    c6ce:	1c3b      	adds	r3, r7, #0
    c6d0:	330c      	adds	r3, #12
    c6d2:	4a2e      	ldr	r2, [pc, #184]	(c78c <main+0xe0>)
    c6d4:	1c3c      	adds	r4, r7, #0
    c6d6:	3413      	adds	r4, #19
    c6d8:	1c18      	adds	r0, r3, #0
    c6da:	1c11      	adds	r1, r2, #0
    c6dc:	1c22      	adds	r2, r4, #0
    c6de:	f7fd e9aa 	blx	9a34 <_init+0x290>
    c6e2:	1c3d      	adds	r5, r7, #0
    c6e4:	350c      	adds	r5, #12
    c6e6:	2018      	movs	r0, #24
    c6e8:	f7fd e9c2 	blx	9a70 <_init+0x2cc>
    c6ec:	1c03      	adds	r3, r0, #0
    c6ee:	1c1c      	adds	r4, r3, #0
    c6f0:	1c20      	adds	r0, r4, #0
    c6f2:	1c29      	adds	r1, r5, #0
    c6f4:	2207      	movs	r2, #7
    c6f6:	f000 fcf1 	bl	d0dc <_ZN9arlogging7LoggingC1ESsi>
    c6fa:	4b25      	ldr	r3, [pc, #148]	(c790 <main+0xe4>)
    c6fc:	601c      	str	r4, [r3, #0]
    c6fe:	1c3b      	adds	r3, r7, #0
    c700:	330c      	adds	r3, #12
    c702:	1c18      	adds	r0, r3, #0
    c704:	f7fd e92a 	blx	995c <_init+0x1b8>
    c708:	1c3b      	adds	r3, r7, #0
    c70a:	3313      	adds	r3, #19
    c70c:	1c18      	adds	r0, r3, #0
    c70e:	f7fd e9d4 	blx	9ab8 <_init+0x314>
	MainLoop = g_main_loop_new(NULL, FALSE);
    c712:	2000      	movs	r0, #0
    c714:	2100      	movs	r1, #0
    c716:	f7fd e90a 	blx	992c <_init+0x188>
    c71a:	1c02      	adds	r2, r0, #0
    c71c:	4b1d      	ldr	r3, [pc, #116]	(c794 <main+0xe8>)
    c71e:	601a      	str	r2, [r3, #0]
	Writer->FirstStartRec();
    c720:	697b      	ldr	r3, [r7, #20]
    c722:	1c18      	adds	r0, r3, #0
    c724:	f7fd fe06 	bl	a334 <_ZN14FfWriterEngine13FirstStartRecEv>
	g_timeout_add_seconds_full(1000, 1, TimeoutCallback, (gpointer) Writer, NULL);
    c728:	22fa      	movs	r2, #250
    c72a:	0092      	lsls	r2, r2, #2
    c72c:	4c1a      	ldr	r4, [pc, #104]	(c798 <main+0xec>)
    c72e:	697d      	ldr	r5, [r7, #20]
    c730:	2300      	movs	r3, #0
    c732:	9300      	str	r3, [sp, #0]
    c734:	1c10      	adds	r0, r2, #0
    c736:	2101      	movs	r1, #1
    c738:	1c22      	adds	r2, r4, #0
    c73a:	1c2b      	adds	r3, r5, #0
    c73c:	f7fd ea0a 	blx	9b54 <_init+0x3b0>
	Memory = Writer->GetMemoryConsumption();
    c740:	697b      	ldr	r3, [r7, #20]
    c742:	1c18      	adds	r0, r3, #0
    c744:	f7fd fb5c 	bl	9e00 <_ZN14FfWriterEngine20GetMemoryConsumptionEv>
    c748:	1c02      	adds	r2, r0, #0
    c74a:	17d1      	asrs	r1, r2, #31
    c74c:	1c13      	adds	r3, r2, #0
    c74e:	1c0c      	adds	r4, r1, #0
    c750:	4a12      	ldr	r2, [pc, #72]	(c79c <main+0xf0>)
    c752:	6013      	str	r3, [r2, #0]
    c754:	6054      	str	r4, [r2, #4]
	g_main_loop_run(MainLoop);
    c756:	4b0f      	ldr	r3, [pc, #60]	(c794 <main+0xe8>)
    c758:	681b      	ldr	r3, [r3, #0]
    c75a:	1c18      	adds	r0, r3, #0
    c75c:	f7fd ea24 	blx	9ba8 <_init+0x404>

	delete Log;
    c760:	4b0b      	ldr	r3, [pc, #44]	(c790 <main+0xe4>)
    c762:	681b      	ldr	r3, [r3, #0]
    c764:	607b      	str	r3, [r7, #4]
    c766:	687b      	ldr	r3, [r7, #4]
    c768:	2b00      	cmp	r3, #0
    c76a:	d005      	beq.n	c778 <main+0xcc>
    c76c:	6878      	ldr	r0, [r7, #4]
    c76e:	f000 fbe5 	bl	cf3c <_ZN9arlogging7LoggingD1Ev>
    c772:	6878      	ldr	r0, [r7, #4]
    c774:	f7fd e898 	blx	98a8 <_init+0x104>
	delete Writer;
    c778:	697b      	ldr	r3, [r7, #20]
    c77a:	1c18      	adds	r0, r3, #0
    c77c:	f7fd e894 	blx	98a8 <_init+0x104>
    c780:	2300      	movs	r3, #0
}
    c782:	1c18      	adds	r0, r3, #0
    c784:	46bd      	mov	sp, r7
    c786:	b006      	add	sp, #24
    c788:	bdb0      	pop	{r4, r5, r7, pc}
    c78a:	46c0      	nop			(mov r8, r8)
    c78c:	0000dd74 	.word	0x0000dd74
    c790:	00016fec 	.word	0x00016fec
    c794:	000167d0 	.word	0x000167d0
    c798:	0000c5cd 	.word	0x0000c5cd
    c79c:	000167d8 	.word	0x000167d8

0000c7a0 <_Z41__static_initialization_and_destruction_0ii>:
#endif

char str[2048];
int cfdn;
Logging *Log;
size_t Count = 0;
    c7a0:	b580      	push	{r7, lr}
    c7a2:	b082      	sub	sp, #8
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	6078      	str	r0, [r7, #4]
    c7a8:	6039      	str	r1, [r7, #0]
    c7aa:	687b      	ldr	r3, [r7, #4]
    c7ac:	2b01      	cmp	r3, #1
    c7ae:	d10d      	bne.n	c7cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c7b0:	683a      	ldr	r2, [r7, #0]
    c7b2:	4b08      	ldr	r3, [pc, #32]	(c7d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c7b4:	429a      	cmp	r2, r3
    c7b6:	d109      	bne.n	c7cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c7b8:	4b07      	ldr	r3, [pc, #28]	(c7d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c7ba:	1c18      	adds	r0, r3, #0
    c7bc:	f7fd e88c 	blx	98d8 <_init+0x134>
    c7c0:	4906      	ldr	r1, [pc, #24]	(c7dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    c7c2:	4b05      	ldr	r3, [pc, #20]	(c7d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c7c4:	4a06      	ldr	r2, [pc, #24]	(c7e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    c7c6:	1c18      	adds	r0, r3, #0
    c7c8:	f7fd e982 	blx	9ad0 <_init+0x32c>
    c7cc:	46bd      	mov	sp, r7
    c7ce:	b002      	add	sp, #8
    c7d0:	bd80      	pop	{r7, pc}
    c7d2:	46c0      	nop			(mov r8, r8)
    c7d4:	0000ffff 	.word	0x0000ffff
    c7d8:	00016ff4 	.word	0x00016ff4
    c7dc:	00009938 	.word	0x00009938
    c7e0:	00016780 	.word	0x00016780

0000c7e4 <_GLOBAL__I_str>:
    c7e4:	b580      	push	{r7, lr}
    c7e6:	af00      	add	r7, sp, #0
    c7e8:	4b03      	ldr	r3, [pc, #12]	(c7f8 <_GLOBAL__I_str+0x14>)
    c7ea:	2001      	movs	r0, #1
    c7ec:	1c19      	adds	r1, r3, #0
    c7ee:	f7ff ffd7 	bl	c7a0 <_Z41__static_initialization_and_destruction_0ii>
    c7f2:	46bd      	mov	sp, r7
    c7f4:	bd80      	pop	{r7, pc}
    c7f6:	46c0      	nop			(mov r8, r8)
    c7f8:	0000ffff 	.word	0x0000ffff

0000c7fc <_Z41__static_initialization_and_destruction_0ii>:
          LogFileStream.close();
        }

      return LogText;
    }
}
    c7fc:	b580      	push	{r7, lr}
    c7fe:	b082      	sub	sp, #8
    c800:	af00      	add	r7, sp, #0
    c802:	6078      	str	r0, [r7, #4]
    c804:	6039      	str	r1, [r7, #0]
    c806:	687b      	ldr	r3, [r7, #4]
    c808:	2b01      	cmp	r3, #1
    c80a:	d10d      	bne.n	c828 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c80c:	683a      	ldr	r2, [r7, #0]
    c80e:	4b08      	ldr	r3, [pc, #32]	(c830 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c810:	429a      	cmp	r2, r3
    c812:	d109      	bne.n	c828 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c814:	4b07      	ldr	r3, [pc, #28]	(c834 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c816:	1c18      	adds	r0, r3, #0
    c818:	f7fd e85e 	blx	98d8 <_init+0x134>
    c81c:	4906      	ldr	r1, [pc, #24]	(c838 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    c81e:	4b05      	ldr	r3, [pc, #20]	(c834 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c820:	4a06      	ldr	r2, [pc, #24]	(c83c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    c822:	1c18      	adds	r0, r3, #0
    c824:	f7fd e954 	blx	9ad0 <_init+0x32c>
    c828:	46bd      	mov	sp, r7
    c82a:	b002      	add	sp, #8
    c82c:	bd80      	pop	{r7, pc}
    c82e:	46c0      	nop			(mov r8, r8)
    c830:	0000ffff 	.word	0x0000ffff
    c834:	00016ff8 	.word	0x00016ff8
    c838:	00009938 	.word	0x00009938
    c83c:	00016780 	.word	0x00016780

0000c840 <_GLOBAL__I__ZN9arlogging7LoggingC2ESs>:
    c840:	b580      	push	{r7, lr}
    c842:	af00      	add	r7, sp, #0
    c844:	4b03      	ldr	r3, [pc, #12]	(c854 <_GLOBAL__I__ZN9arlogging7LoggingC2ESs+0x14>)
    c846:	2001      	movs	r0, #1
    c848:	1c19      	adds	r1, r3, #0
    c84a:	f7ff ffd7 	bl	c7fc <_Z41__static_initialization_and_destruction_0ii>
    c84e:	46bd      	mov	sp, r7
    c850:	bd80      	pop	{r7, pc}
    c852:	46c0      	nop			(mov r8, r8)
    c854:	0000ffff 	.word	0x0000ffff

0000c858 <_ZN9arlogging7Logging4InitESsi>:
    Logging::~Logging()
    {
    	free(LogPath);
    }

    void Logging::Init(string FileName, int log_level)
    c858:	b5b0      	push	{r4, r5, r7, lr}
    c85a:	b086      	sub	sp, #24
    c85c:	af00      	add	r7, sp, #0
    c85e:	60f8      	str	r0, [r7, #12]
    c860:	60b9      	str	r1, [r7, #8]
    c862:	607a      	str	r2, [r7, #4]
    {
    	LLevel = log_level;
    c864:	68fa      	ldr	r2, [r7, #12]
    c866:	687b      	ldr	r3, [r7, #4]
    c868:	6053      	str	r3, [r2, #4]
    	LogName = FileName;
    c86a:	68fb      	ldr	r3, [r7, #12]
    c86c:	3310      	adds	r3, #16
    c86e:	68ba      	ldr	r2, [r7, #8]
    c870:	1c18      	adds	r0, r3, #0
    c872:	1c11      	adds	r1, r2, #0
    c874:	f7fd e99e 	blx	9bb4 <_init+0x410>
    	FullLogName = FullLogName + "/Logs/" + LogName;
    c878:	68fb      	ldr	r3, [r7, #12]
    c87a:	1c1d      	adds	r5, r3, #0
    c87c:	3514      	adds	r5, #20
    c87e:	68fb      	ldr	r3, [r7, #12]
    c880:	1c19      	adds	r1, r3, #0
    c882:	3114      	adds	r1, #20
    c884:	1c3b      	adds	r3, r7, #0
    c886:	3314      	adds	r3, #20
    c888:	4a11      	ldr	r2, [pc, #68]	(c8d0 <_ZN9arlogging7Logging4InitESsi+0x78>)
    c88a:	1c18      	adds	r0, r3, #0
    c88c:	f000 fe1e 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    c890:	68fb      	ldr	r3, [r7, #12]
    c892:	1c1c      	adds	r4, r3, #0
    c894:	3410      	adds	r4, #16
    c896:	1c3b      	adds	r3, r7, #0
    c898:	3310      	adds	r3, #16
    c89a:	1c3a      	adds	r2, r7, #0
    c89c:	3214      	adds	r2, #20
    c89e:	1c18      	adds	r0, r3, #0
    c8a0:	1c11      	adds	r1, r2, #0
    c8a2:	1c22      	adds	r2, r4, #0
    c8a4:	f7ff fe4c 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    c8a8:	1c3b      	adds	r3, r7, #0
    c8aa:	3310      	adds	r3, #16
    c8ac:	1c28      	adds	r0, r5, #0
    c8ae:	1c19      	adds	r1, r3, #0
    c8b0:	f7fd e980 	blx	9bb4 <_init+0x410>
    c8b4:	1c3b      	adds	r3, r7, #0
    c8b6:	3310      	adds	r3, #16
    c8b8:	1c18      	adds	r0, r3, #0
    c8ba:	f7fd e850 	blx	995c <_init+0x1b8>
    c8be:	1c3b      	adds	r3, r7, #0
    c8c0:	3314      	adds	r3, #20
    c8c2:	1c18      	adds	r0, r3, #0
    c8c4:	f7fd e84a 	blx	995c <_init+0x1b8>
    }
    c8c8:	46bd      	mov	sp, r7
    c8ca:	b006      	add	sp, #24
    c8cc:	bdb0      	pop	{r4, r5, r7, pc}
    c8ce:	46c0      	nop			(mov r8, r8)
    c8d0:	0000dd84 	.word	0x0000dd84

0000c8d4 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj>:

    char * Logging::GetCurrDateTimeFixedLength(char *OutString, size_t length)
    c8d4:	b590      	push	{r4, r7, lr}
    c8d6:	b093      	sub	sp, #76
    c8d8:	af00      	add	r7, sp, #0
    c8da:	60f8      	str	r0, [r7, #12]
    c8dc:	60b9      	str	r1, [r7, #8]
    c8de:	607a      	str	r2, [r7, #4]
    {
        time_t t;
        struct tm tm;
        struct timeval td;

        bzero(OutString, length);
    c8e0:	68bb      	ldr	r3, [r7, #8]
    c8e2:	687a      	ldr	r2, [r7, #4]
    c8e4:	1c18      	adds	r0, r3, #0
    c8e6:	1c11      	adds	r1, r2, #0
    c8e8:	f7fd e922 	blx	9b30 <_init+0x38c>
        t = time(NULL);
    c8ec:	2000      	movs	r0, #0
    c8ee:	f7fd e8d2 	blx	9a94 <_init+0x2f0>
    c8f2:	1c03      	adds	r3, r0, #0
    c8f4:	647b      	str	r3, [r7, #68]
        localtime_r(&t, &tm);
    c8f6:	1c3b      	adds	r3, r7, #0
    c8f8:	3344      	adds	r3, #68
    c8fa:	1c3a      	adds	r2, r7, #0
    c8fc:	3210      	adds	r2, #16
    c8fe:	1c18      	adds	r0, r3, #0
    c900:	1c11      	adds	r1, r2, #0
    c902:	f7fc ef8a 	blx	9818 <_init+0x74>
        gettimeofday(&td, 0);
    c906:	1c3b      	adds	r3, r7, #0
    c908:	333c      	adds	r3, #60
    c90a:	1c18      	adds	r0, r3, #0
    c90c:	2100      	movs	r1, #0
    c90e:	f7fd e83e 	blx	998c <_init+0x1e8>
        sprintf(OutString + strftime(OutString, DT_BUF_SIZE, "%d.%m.%Y %T", &tm), ".%.3d", (int) (td.tv_usec / 1000));
    c912:	68bb      	ldr	r3, [r7, #8]
    c914:	4a0f      	ldr	r2, [pc, #60]	(c954 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj+0x80>)
    c916:	1c3c      	adds	r4, r7, #0
    c918:	3410      	adds	r4, #16
    c91a:	1c18      	adds	r0, r3, #0
    c91c:	21fe      	movs	r1, #254
    c91e:	1c23      	adds	r3, r4, #0
    c920:	f7fd e8f4 	blx	9b0c <_init+0x368>
    c924:	1c02      	adds	r2, r0, #0
    c926:	68bb      	ldr	r3, [r7, #8]
    c928:	189c      	adds	r4, r3, r2
    c92a:	1c3b      	adds	r3, r7, #0
    c92c:	333c      	adds	r3, #60
    c92e:	685a      	ldr	r2, [r3, #4]
    c930:	23fa      	movs	r3, #250
    c932:	009b      	lsls	r3, r3, #2
    c934:	1c10      	adds	r0, r2, #0
    c936:	1c19      	adds	r1, r3, #0
    c938:	f7fd e906 	blx	9b48 <_init+0x3a4>
    c93c:	1c03      	adds	r3, r0, #0
    c93e:	1c1a      	adds	r2, r3, #0
    c940:	4b05      	ldr	r3, [pc, #20]	(c958 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj+0x84>)
    c942:	1c20      	adds	r0, r4, #0
    c944:	1c19      	adds	r1, r3, #0
    c946:	f7fd e94e 	blx	9be4 <_init+0x440>

        return OutString;
    c94a:	68bb      	ldr	r3, [r7, #8]
    }
    c94c:	1c18      	adds	r0, r3, #0
    c94e:	46bd      	mov	sp, r7
    c950:	b013      	add	sp, #76
    c952:	bd90      	pop	{r4, r7, pc}
    c954:	0000dd8c 	.word	0x0000dd8c
    c958:	0000dd98 	.word	0x0000dd98

0000c95c <_ZN9arlogging7Logging9AppendLogESsi>:
        LogText = LogText + " " + txt;
        LogFileStream.write(LogText.c_str(), LogText.length());
        LogFileStream.close();
    }

    string Logging::AppendLog(string Text, int log_level)
    c95c:	b590      	push	{r4, r7, lr}
    c95e:	4c69      	ldr	r4, [pc, #420]	(cb04 <_ZN9arlogging7Logging9AppendLogESsi+0x1a8>)
    c960:	44a5      	add	sp, r4
    c962:	af00      	add	r7, sp, #0
    c964:	6038      	str	r0, [r7, #0]
    c966:	60f9      	str	r1, [r7, #12]
    c968:	60ba      	str	r2, [r7, #8]
    c96a:	607b      	str	r3, [r7, #4]
    {
      ofstream LogFileStream;
    c96c:	1c3b      	adds	r3, r7, #0
    c96e:	3310      	adds	r3, #16
    c970:	1c18      	adds	r0, r3, #0
    c972:	f7fd e8e4 	blx	9b3c <_init+0x398>
      string LogText;
    c976:	2189      	movs	r1, #137
    c978:	0089      	lsls	r1, r1, #2
    c97a:	187b      	adds	r3, r7, r1
    c97c:	1c18      	adds	r0, r3, #0
    c97e:	f7fc ef2e 	blx	97dc <_init+0x38>
      char OutString[DT_BUF_SIZE];
      txt = Text;
    c982:	68fb      	ldr	r3, [r7, #12]
    c984:	3308      	adds	r3, #8
    c986:	68ba      	ldr	r2, [r7, #8]
    c988:	1c18      	adds	r0, r3, #0
    c98a:	1c11      	adds	r1, r2, #0
    c98c:	f7fd e912 	blx	9bb4 <_init+0x410>

      LogText.assign(GetCurrDateTimeFixedLength(OutString, DT_BUF_SIZE));
    c990:	68fb      	ldr	r3, [r7, #12]
    c992:	2193      	movs	r1, #147
    c994:	0049      	lsls	r1, r1, #1
    c996:	187a      	adds	r2, r7, r1
    c998:	1c18      	adds	r0, r3, #0
    c99a:	1c11      	adds	r1, r2, #0
    c99c:	22fe      	movs	r2, #254
    c99e:	f7ff ff99 	bl	c8d4 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj>
    c9a2:	1c02      	adds	r2, r0, #0
    c9a4:	2189      	movs	r1, #137
    c9a6:	0089      	lsls	r1, r1, #2
    c9a8:	187b      	adds	r3, r7, r1
    c9aa:	1c18      	adds	r0, r3, #0
    c9ac:	1c11      	adds	r1, r2, #0
    c9ae:	f7fc ef6a 	blx	9884 <_init+0xe0>
      LogText = "> " + LogText + " " + txt;
    c9b2:	228c      	movs	r2, #140
    c9b4:	0092      	lsls	r2, r2, #2
    c9b6:	18bb      	adds	r3, r7, r2
    c9b8:	4a53      	ldr	r2, [pc, #332]	(cb08 <_ZN9arlogging7Logging9AppendLogESsi+0x1ac>)
    c9ba:	2189      	movs	r1, #137
    c9bc:	0089      	lsls	r1, r1, #2
    c9be:	187c      	adds	r4, r7, r1
    c9c0:	1c18      	adds	r0, r3, #0
    c9c2:	1c11      	adds	r1, r2, #0
    c9c4:	1c22      	adds	r2, r4, #0
    c9c6:	f000 fda9 	bl	d51c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>
    c9ca:	228b      	movs	r2, #139
    c9cc:	0092      	lsls	r2, r2, #2
    c9ce:	18bb      	adds	r3, r7, r2
    c9d0:	218c      	movs	r1, #140
    c9d2:	0089      	lsls	r1, r1, #2
    c9d4:	187a      	adds	r2, r7, r1
    c9d6:	4c4d      	ldr	r4, [pc, #308]	(cb0c <_ZN9arlogging7Logging9AppendLogESsi+0x1b0>)
    c9d8:	1c18      	adds	r0, r3, #0
    c9da:	1c11      	adds	r1, r2, #0
    c9dc:	1c22      	adds	r2, r4, #0
    c9de:	f000 fd75 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    c9e2:	68fb      	ldr	r3, [r7, #12]
    c9e4:	1c1c      	adds	r4, r3, #0
    c9e6:	3408      	adds	r4, #8
    c9e8:	228a      	movs	r2, #138
    c9ea:	0092      	lsls	r2, r2, #2
    c9ec:	18bb      	adds	r3, r7, r2
    c9ee:	218b      	movs	r1, #139
    c9f0:	0089      	lsls	r1, r1, #2
    c9f2:	187a      	adds	r2, r7, r1
    c9f4:	1c18      	adds	r0, r3, #0
    c9f6:	1c11      	adds	r1, r2, #0
    c9f8:	1c22      	adds	r2, r4, #0
    c9fa:	f7ff fda1 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    c9fe:	2289      	movs	r2, #137
    ca00:	0092      	lsls	r2, r2, #2
    ca02:	18bb      	adds	r3, r7, r2
    ca04:	218a      	movs	r1, #138
    ca06:	0089      	lsls	r1, r1, #2
    ca08:	187a      	adds	r2, r7, r1
    ca0a:	1c18      	adds	r0, r3, #0
    ca0c:	1c11      	adds	r1, r2, #0
    ca0e:	f7fd e8d2 	blx	9bb4 <_init+0x410>
    ca12:	228a      	movs	r2, #138
    ca14:	0092      	lsls	r2, r2, #2
    ca16:	18bb      	adds	r3, r7, r2
    ca18:	1c18      	adds	r0, r3, #0
    ca1a:	f7fc efa0 	blx	995c <_init+0x1b8>
    ca1e:	218b      	movs	r1, #139
    ca20:	0089      	lsls	r1, r1, #2
    ca22:	187b      	adds	r3, r7, r1
    ca24:	1c18      	adds	r0, r3, #0
    ca26:	f7fc ef9a 	blx	995c <_init+0x1b8>
    ca2a:	228c      	movs	r2, #140
    ca2c:	0092      	lsls	r2, r2, #2
    ca2e:	18bb      	adds	r3, r7, r2
    ca30:	1c18      	adds	r0, r3, #0
    ca32:	f7fc ef94 	blx	995c <_init+0x1b8>
      if (log_level <= LLevel)
    ca36:	68fb      	ldr	r3, [r7, #12]
    ca38:	685a      	ldr	r2, [r3, #4]
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	429a      	cmp	r2, r3
    ca3e:	db47      	blt.n	cad0 <_ZN9arlogging7Logging9AppendLogESsi+0x174>
        {
          LogFileStream.open(FullLogName.c_str(), ios::app);
    ca40:	68fb      	ldr	r3, [r7, #12]
    ca42:	3314      	adds	r3, #20
    ca44:	1c18      	adds	r0, r3, #0
    ca46:	f7fc ef2a 	blx	989c <_init+0xf8>
    ca4a:	1c02      	adds	r2, r0, #0
    ca4c:	1c3b      	adds	r3, r7, #0
    ca4e:	3310      	adds	r3, #16
    ca50:	1c18      	adds	r0, r3, #0
    ca52:	1c11      	adds	r1, r2, #0
    ca54:	2201      	movs	r2, #1
    ca56:	f7fd e82a 	blx	9aac <_init+0x308>
          if (!LogFileStream.is_open())
    ca5a:	1c3b      	adds	r3, r7, #0
    ca5c:	3310      	adds	r3, #16
    ca5e:	1c18      	adds	r0, r3, #0
    ca60:	f7fd e842 	blx	9ae8 <_init+0x344>
    ca64:	1c03      	adds	r3, r0, #0
    ca66:	469c      	mov	ip, r3
    ca68:	4662      	mov	r2, ip
    ca6a:	2301      	movs	r3, #1
    ca6c:	4053      	eors	r3, r2
    ca6e:	061b      	lsls	r3, r3, #24
    ca70:	0e1b      	lsrs	r3, r3, #24
    ca72:	2b00      	cmp	r3, #0
    ca74:	d012      	beq.n	ca9c <_ZN9arlogging7Logging9AppendLogESsi+0x140>
            {
              return "";
    ca76:	683c      	ldr	r4, [r7, #0]
    ca78:	4925      	ldr	r1, [pc, #148]	(cb10 <_ZN9arlogging7Logging9AppendLogESsi+0x1b4>)
    ca7a:	187b      	adds	r3, r7, r1
    ca7c:	1c18      	adds	r0, r3, #0
    ca7e:	f7fd e882 	blx	9b84 <_init+0x3e0>
    ca82:	4b24      	ldr	r3, [pc, #144]	(cb14 <_ZN9arlogging7Logging9AppendLogESsi+0x1b8>)
    ca84:	4922      	ldr	r1, [pc, #136]	(cb10 <_ZN9arlogging7Logging9AppendLogESsi+0x1b4>)
    ca86:	187a      	adds	r2, r7, r1
    ca88:	1c20      	adds	r0, r4, #0
    ca8a:	1c19      	adds	r1, r3, #0
    ca8c:	f7fc efd2 	blx	9a34 <_init+0x290>
    ca90:	4a1f      	ldr	r2, [pc, #124]	(cb10 <_ZN9arlogging7Logging9AppendLogESsi+0x1b4>)
    ca92:	18bb      	adds	r3, r7, r2
    ca94:	1c18      	adds	r0, r3, #0
    ca96:	f7fd e810 	blx	9ab8 <_init+0x314>
    ca9a:	e021      	b.n	cae0 <_ZN9arlogging7Logging9AppendLogESsi+0x184>
            }
          LogFileStream.write(LogText.c_str(), LogText.length());
    ca9c:	2189      	movs	r1, #137
    ca9e:	0089      	lsls	r1, r1, #2
    caa0:	187b      	adds	r3, r7, r1
    caa2:	1c18      	adds	r0, r3, #0
    caa4:	f7fc eefa 	blx	989c <_init+0xf8>
    caa8:	1c04      	adds	r4, r0, #0
    caaa:	2289      	movs	r2, #137
    caac:	0092      	lsls	r2, r2, #2
    caae:	18bb      	adds	r3, r7, r2
    cab0:	1c18      	adds	r0, r3, #0
    cab2:	f7fc ef30 	blx	9914 <_init+0x170>
    cab6:	1c03      	adds	r3, r0, #0
    cab8:	1c1a      	adds	r2, r3, #0
    caba:	1c3b      	adds	r3, r7, #0
    cabc:	3310      	adds	r3, #16
    cabe:	1c18      	adds	r0, r3, #0
    cac0:	1c21      	adds	r1, r4, #0
    cac2:	f7fc eeb6 	blx	9830 <_init+0x8c>
          LogFileStream.close();
    cac6:	1c3b      	adds	r3, r7, #0
    cac8:	3310      	adds	r3, #16
    caca:	1c18      	adds	r0, r3, #0
    cacc:	f7fc efca 	blx	9a64 <_init+0x2c0>
        }

      return LogText;
    cad0:	683b      	ldr	r3, [r7, #0]
    cad2:	2189      	movs	r1, #137
    cad4:	0089      	lsls	r1, r1, #2
    cad6:	187a      	adds	r2, r7, r1
    cad8:	1c18      	adds	r0, r3, #0
    cada:	1c11      	adds	r1, r2, #0
    cadc:	f7fc ef0e 	blx	98fc <_init+0x158>
    cae0:	2289      	movs	r2, #137
    cae2:	0092      	lsls	r2, r2, #2
    cae4:	18bb      	adds	r3, r7, r2
    cae6:	1c18      	adds	r0, r3, #0
    cae8:	f7fc ef38 	blx	995c <_init+0x1b8>
    caec:	1c3b      	adds	r3, r7, #0
    caee:	3310      	adds	r3, #16
    caf0:	1c18      	adds	r0, r3, #0
    caf2:	f7fc efac 	blx	9a4c <_init+0x2a8>
    }
    caf6:	6838      	ldr	r0, [r7, #0]
    caf8:	6838      	ldr	r0, [r7, #0]
    cafa:	46bd      	mov	sp, r7
    cafc:	238f      	movs	r3, #143
    cafe:	009b      	lsls	r3, r3, #2
    cb00:	449d      	add	sp, r3
    cb02:	bd90      	pop	{r4, r7, pc}
    cb04:	fffffdc4 	.word	0xfffffdc4
    cb08:	0000dda0 	.word	0x0000dda0
    cb0c:	0000dda4 	.word	0x0000dda4
    cb10:	00000237 	.word	0x00000237
    cb14:	0000dda8 	.word	0x0000dda8

0000cb18 <_ZN9arlogging7Logging10AppendDataESs>:
      LogText = "> " + LogText + " " + txt;
      LogFileStream.write(LogText.c_str(), LogText.length());
      LogFileStream.close();
    }

    void Logging::AppendData(string Text)
    cb18:	b590      	push	{r4, r7, lr}
    cb1a:	4c50      	ldr	r4, [pc, #320]	(cc5c <_ZN9arlogging7Logging10AppendDataESs+0x144>)
    cb1c:	44a5      	add	sp, r4
    cb1e:	af00      	add	r7, sp, #0
    cb20:	60f8      	str	r0, [r7, #12]
    cb22:	60b9      	str	r1, [r7, #8]
    {
        ofstream LogFileStream;
    cb24:	1c3b      	adds	r3, r7, #0
    cb26:	3310      	adds	r3, #16
    cb28:	1c18      	adds	r0, r3, #0
    cb2a:	f7fd e808 	blx	9b3c <_init+0x398>
        string LogText;
    cb2e:	2189      	movs	r1, #137
    cb30:	0089      	lsls	r1, r1, #2
    cb32:	187b      	adds	r3, r7, r1
    cb34:	1c18      	adds	r0, r3, #0
    cb36:	f7fc ee52 	blx	97dc <_init+0x38>
        char OutString[DT_BUF_SIZE];
        txt = Text;
    cb3a:	68fb      	ldr	r3, [r7, #12]
    cb3c:	3308      	adds	r3, #8
    cb3e:	68ba      	ldr	r2, [r7, #8]
    cb40:	1c18      	adds	r0, r3, #0
    cb42:	1c11      	adds	r1, r2, #0
    cb44:	f7fd e836 	blx	9bb4 <_init+0x410>

        LogFileStream.open(FullLogName.c_str(), ios::app);
    cb48:	68fb      	ldr	r3, [r7, #12]
    cb4a:	3314      	adds	r3, #20
    cb4c:	1c18      	adds	r0, r3, #0
    cb4e:	f7fc eea6 	blx	989c <_init+0xf8>
    cb52:	1c02      	adds	r2, r0, #0
    cb54:	1c3b      	adds	r3, r7, #0
    cb56:	3310      	adds	r3, #16
    cb58:	1c18      	adds	r0, r3, #0
    cb5a:	1c11      	adds	r1, r2, #0
    cb5c:	2201      	movs	r2, #1
    cb5e:	f7fc efa6 	blx	9aac <_init+0x308>
        if (!LogFileStream.is_open())
    cb62:	1c3b      	adds	r3, r7, #0
    cb64:	3310      	adds	r3, #16
    cb66:	1c18      	adds	r0, r3, #0
    cb68:	f7fc efbe 	blx	9ae8 <_init+0x344>
    cb6c:	1c03      	adds	r3, r0, #0
    cb6e:	469c      	mov	ip, r3
    cb70:	4662      	mov	r2, ip
    cb72:	2301      	movs	r3, #1
    cb74:	4053      	eors	r3, r2
    cb76:	061b      	lsls	r3, r3, #24
    cb78:	0e1b      	lsrs	r3, r3, #24
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d001      	beq.n	cb82 <_ZN9arlogging7Logging10AppendDataESs+0x6a>
    cb7e:	2200      	movs	r2, #0
    cb80:	e05b      	b.n	cc3a <_ZN9arlogging7Logging10AppendDataESs+0x122>
          {
            return;
          }
        LogText.assign(GetCurrDateTimeFixedLength(OutString, DT_BUF_SIZE));
    cb82:	68fb      	ldr	r3, [r7, #12]
    cb84:	2193      	movs	r1, #147
    cb86:	0049      	lsls	r1, r1, #1
    cb88:	187a      	adds	r2, r7, r1
    cb8a:	1c18      	adds	r0, r3, #0
    cb8c:	1c11      	adds	r1, r2, #0
    cb8e:	22fe      	movs	r2, #254
    cb90:	f7ff fea0 	bl	c8d4 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj>
    cb94:	1c02      	adds	r2, r0, #0
    cb96:	2189      	movs	r1, #137
    cb98:	0089      	lsls	r1, r1, #2
    cb9a:	187b      	adds	r3, r7, r1
    cb9c:	1c18      	adds	r0, r3, #0
    cb9e:	1c11      	adds	r1, r2, #0
    cba0:	f7fc ee70 	blx	9884 <_init+0xe0>
        LogText = LogText + " " + txt;
    cba4:	228b      	movs	r2, #139
    cba6:	0092      	lsls	r2, r2, #2
    cba8:	18bb      	adds	r3, r7, r2
    cbaa:	2189      	movs	r1, #137
    cbac:	0089      	lsls	r1, r1, #2
    cbae:	187a      	adds	r2, r7, r1
    cbb0:	4c2b      	ldr	r4, [pc, #172]	(cc60 <_ZN9arlogging7Logging10AppendDataESs+0x148>)
    cbb2:	1c18      	adds	r0, r3, #0
    cbb4:	1c11      	adds	r1, r2, #0
    cbb6:	1c22      	adds	r2, r4, #0
    cbb8:	f000 fc88 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    cbbc:	68fb      	ldr	r3, [r7, #12]
    cbbe:	1c1c      	adds	r4, r3, #0
    cbc0:	3408      	adds	r4, #8
    cbc2:	228a      	movs	r2, #138
    cbc4:	0092      	lsls	r2, r2, #2
    cbc6:	18bb      	adds	r3, r7, r2
    cbc8:	218b      	movs	r1, #139
    cbca:	0089      	lsls	r1, r1, #2
    cbcc:	187a      	adds	r2, r7, r1
    cbce:	1c18      	adds	r0, r3, #0
    cbd0:	1c11      	adds	r1, r2, #0
    cbd2:	1c22      	adds	r2, r4, #0
    cbd4:	f7ff fcb4 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    cbd8:	2289      	movs	r2, #137
    cbda:	0092      	lsls	r2, r2, #2
    cbdc:	18bb      	adds	r3, r7, r2
    cbde:	218a      	movs	r1, #138
    cbe0:	0089      	lsls	r1, r1, #2
    cbe2:	187a      	adds	r2, r7, r1
    cbe4:	1c18      	adds	r0, r3, #0
    cbe6:	1c11      	adds	r1, r2, #0
    cbe8:	f7fc efe4 	blx	9bb4 <_init+0x410>
    cbec:	228a      	movs	r2, #138
    cbee:	0092      	lsls	r2, r2, #2
    cbf0:	18bb      	adds	r3, r7, r2
    cbf2:	1c18      	adds	r0, r3, #0
    cbf4:	f7fc eeb2 	blx	995c <_init+0x1b8>
    cbf8:	218b      	movs	r1, #139
    cbfa:	0089      	lsls	r1, r1, #2
    cbfc:	187b      	adds	r3, r7, r1
    cbfe:	1c18      	adds	r0, r3, #0
    cc00:	f7fc eeac 	blx	995c <_init+0x1b8>
        LogFileStream.write(LogText.c_str(), LogText.length());
    cc04:	2289      	movs	r2, #137
    cc06:	0092      	lsls	r2, r2, #2
    cc08:	18bb      	adds	r3, r7, r2
    cc0a:	1c18      	adds	r0, r3, #0
    cc0c:	f7fc ee46 	blx	989c <_init+0xf8>
    cc10:	1c04      	adds	r4, r0, #0
    cc12:	2189      	movs	r1, #137
    cc14:	0089      	lsls	r1, r1, #2
    cc16:	187b      	adds	r3, r7, r1
    cc18:	1c18      	adds	r0, r3, #0
    cc1a:	f7fc ee7c 	blx	9914 <_init+0x170>
    cc1e:	1c03      	adds	r3, r0, #0
    cc20:	1c1a      	adds	r2, r3, #0
    cc22:	1c3b      	adds	r3, r7, #0
    cc24:	3310      	adds	r3, #16
    cc26:	1c18      	adds	r0, r3, #0
    cc28:	1c21      	adds	r1, r4, #0
    cc2a:	f7fc ee02 	blx	9830 <_init+0x8c>
        LogFileStream.close();
    cc2e:	1c3b      	adds	r3, r7, #0
    cc30:	3310      	adds	r3, #16
    cc32:	1c18      	adds	r0, r3, #0
    cc34:	f7fc ef16 	blx	9a64 <_init+0x2c0>
    cc38:	2201      	movs	r2, #1
    cc3a:	2189      	movs	r1, #137
    cc3c:	0089      	lsls	r1, r1, #2
    cc3e:	187b      	adds	r3, r7, r1
    cc40:	1c18      	adds	r0, r3, #0
    cc42:	f7fc ee8c 	blx	995c <_init+0x1b8>
    cc46:	1c3b      	adds	r3, r7, #0
    cc48:	3310      	adds	r3, #16
    cc4a:	1c18      	adds	r0, r3, #0
    cc4c:	f7fc eefe 	blx	9a4c <_init+0x2a8>
    }
    cc50:	46bd      	mov	sp, r7
    cc52:	238d      	movs	r3, #141
    cc54:	009b      	lsls	r3, r3, #2
    cc56:	449d      	add	sp, r3
    cc58:	bd90      	pop	{r4, r7, pc}
    cc5a:	46c0      	nop			(mov r8, r8)
    cc5c:	fffffdcc 	.word	0xfffffdcc
    cc60:	0000dda4 	.word	0x0000dda4

0000cc64 <_ZN9arlogging7Logging9AppendLogESs>:
      LogText = "> " + LogText + " " + txt;
      LogFileStream.write(LogText.c_str(), LogText.length());
      LogFileStream.close();
    }

    void Logging::AppendLog(string Text)
    cc64:	b590      	push	{r4, r7, lr}
    cc66:	4c59      	ldr	r4, [pc, #356]	(cdcc <_ZN9arlogging7Logging9AppendLogESs+0x168>)
    cc68:	44a5      	add	sp, r4
    cc6a:	af00      	add	r7, sp, #0
    cc6c:	60f8      	str	r0, [r7, #12]
    cc6e:	60b9      	str	r1, [r7, #8]
    {
      ofstream LogFileStream;
    cc70:	1c3b      	adds	r3, r7, #0
    cc72:	3314      	adds	r3, #20
    cc74:	1c18      	adds	r0, r3, #0
    cc76:	f7fc ef62 	blx	9b3c <_init+0x398>
      string LogText;
    cc7a:	218a      	movs	r1, #138
    cc7c:	0089      	lsls	r1, r1, #2
    cc7e:	187b      	adds	r3, r7, r1
    cc80:	1c18      	adds	r0, r3, #0
    cc82:	f7fc edac 	blx	97dc <_init+0x38>
      char OutString[DT_BUF_SIZE];
      txt = Text;
    cc86:	68fb      	ldr	r3, [r7, #12]
    cc88:	3308      	adds	r3, #8
    cc8a:	68ba      	ldr	r2, [r7, #8]
    cc8c:	1c18      	adds	r0, r3, #0
    cc8e:	1c11      	adds	r1, r2, #0
    cc90:	f7fc ef90 	blx	9bb4 <_init+0x410>

      LogFileStream.open(FullLogName.c_str(), ios::app);
    cc94:	68fb      	ldr	r3, [r7, #12]
    cc96:	3314      	adds	r3, #20
    cc98:	1c18      	adds	r0, r3, #0
    cc9a:	f7fc ee00 	blx	989c <_init+0xf8>
    cc9e:	1c02      	adds	r2, r0, #0
    cca0:	1c3b      	adds	r3, r7, #0
    cca2:	3314      	adds	r3, #20
    cca4:	1c18      	adds	r0, r3, #0
    cca6:	1c11      	adds	r1, r2, #0
    cca8:	2201      	movs	r2, #1
    ccaa:	f7fc ef00 	blx	9aac <_init+0x308>
      if (!LogFileStream.is_open())
    ccae:	1c3b      	adds	r3, r7, #0
    ccb0:	3314      	adds	r3, #20
    ccb2:	1c18      	adds	r0, r3, #0
    ccb4:	f7fc ef18 	blx	9ae8 <_init+0x344>
    ccb8:	1c03      	adds	r3, r0, #0
    ccba:	469c      	mov	ip, r3
    ccbc:	4662      	mov	r2, ip
    ccbe:	2301      	movs	r3, #1
    ccc0:	4053      	eors	r3, r2
    ccc2:	061b      	lsls	r3, r3, #24
    ccc4:	0e1b      	lsrs	r3, r3, #24
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d001      	beq.n	ccce <_ZN9arlogging7Logging9AppendLogESs+0x6a>
    ccca:	2200      	movs	r2, #0
    cccc:	e06d      	b.n	cdaa <_ZN9arlogging7Logging9AppendLogESs+0x146>
        {
          return;
        }
      LogText.assign(GetCurrDateTimeFixedLength(OutString, DT_BUF_SIZE));
    ccce:	68fb      	ldr	r3, [r7, #12]
    ccd0:	2195      	movs	r1, #149
    ccd2:	0049      	lsls	r1, r1, #1
    ccd4:	187a      	adds	r2, r7, r1
    ccd6:	1c18      	adds	r0, r3, #0
    ccd8:	1c11      	adds	r1, r2, #0
    ccda:	22fe      	movs	r2, #254
    ccdc:	f7ff fdfa 	bl	c8d4 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj>
    cce0:	1c02      	adds	r2, r0, #0
    cce2:	218a      	movs	r1, #138
    cce4:	0089      	lsls	r1, r1, #2
    cce6:	187b      	adds	r3, r7, r1
    cce8:	1c18      	adds	r0, r3, #0
    ccea:	1c11      	adds	r1, r2, #0
    ccec:	f7fc edca 	blx	9884 <_init+0xe0>
      LogText = "> " + LogText + " " + txt;
    ccf0:	228d      	movs	r2, #141
    ccf2:	0092      	lsls	r2, r2, #2
    ccf4:	18bb      	adds	r3, r7, r2
    ccf6:	4a36      	ldr	r2, [pc, #216]	(cdd0 <_ZN9arlogging7Logging9AppendLogESs+0x16c>)
    ccf8:	218a      	movs	r1, #138
    ccfa:	0089      	lsls	r1, r1, #2
    ccfc:	187c      	adds	r4, r7, r1
    ccfe:	1c18      	adds	r0, r3, #0
    cd00:	1c11      	adds	r1, r2, #0
    cd02:	1c22      	adds	r2, r4, #0
    cd04:	f000 fc0a 	bl	d51c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>
    cd08:	228c      	movs	r2, #140
    cd0a:	0092      	lsls	r2, r2, #2
    cd0c:	18bb      	adds	r3, r7, r2
    cd0e:	218d      	movs	r1, #141
    cd10:	0089      	lsls	r1, r1, #2
    cd12:	187a      	adds	r2, r7, r1
    cd14:	4c2f      	ldr	r4, [pc, #188]	(cdd4 <_ZN9arlogging7Logging9AppendLogESs+0x170>)
    cd16:	1c18      	adds	r0, r3, #0
    cd18:	1c11      	adds	r1, r2, #0
    cd1a:	1c22      	adds	r2, r4, #0
    cd1c:	f000 fbd6 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    cd20:	68fb      	ldr	r3, [r7, #12]
    cd22:	1c1c      	adds	r4, r3, #0
    cd24:	3408      	adds	r4, #8
    cd26:	228b      	movs	r2, #139
    cd28:	0092      	lsls	r2, r2, #2
    cd2a:	18bb      	adds	r3, r7, r2
    cd2c:	218c      	movs	r1, #140
    cd2e:	0089      	lsls	r1, r1, #2
    cd30:	187a      	adds	r2, r7, r1
    cd32:	1c18      	adds	r0, r3, #0
    cd34:	1c11      	adds	r1, r2, #0
    cd36:	1c22      	adds	r2, r4, #0
    cd38:	f7ff fc02 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    cd3c:	228a      	movs	r2, #138
    cd3e:	0092      	lsls	r2, r2, #2
    cd40:	18bb      	adds	r3, r7, r2
    cd42:	218b      	movs	r1, #139
    cd44:	0089      	lsls	r1, r1, #2
    cd46:	187a      	adds	r2, r7, r1
    cd48:	1c18      	adds	r0, r3, #0
    cd4a:	1c11      	adds	r1, r2, #0
    cd4c:	f7fc ef32 	blx	9bb4 <_init+0x410>
    cd50:	228b      	movs	r2, #139
    cd52:	0092      	lsls	r2, r2, #2
    cd54:	18bb      	adds	r3, r7, r2
    cd56:	1c18      	adds	r0, r3, #0
    cd58:	f7fc ee00 	blx	995c <_init+0x1b8>
    cd5c:	218c      	movs	r1, #140
    cd5e:	0089      	lsls	r1, r1, #2
    cd60:	187b      	adds	r3, r7, r1
    cd62:	1c18      	adds	r0, r3, #0
    cd64:	f7fc edfa 	blx	995c <_init+0x1b8>
    cd68:	228d      	movs	r2, #141
    cd6a:	0092      	lsls	r2, r2, #2
    cd6c:	18bb      	adds	r3, r7, r2
    cd6e:	1c18      	adds	r0, r3, #0
    cd70:	f7fc edf4 	blx	995c <_init+0x1b8>
      LogFileStream.write(LogText.c_str(), LogText.length());
    cd74:	218a      	movs	r1, #138
    cd76:	0089      	lsls	r1, r1, #2
    cd78:	187b      	adds	r3, r7, r1
    cd7a:	1c18      	adds	r0, r3, #0
    cd7c:	f7fc ed8e 	blx	989c <_init+0xf8>
    cd80:	1c04      	adds	r4, r0, #0
    cd82:	228a      	movs	r2, #138
    cd84:	0092      	lsls	r2, r2, #2
    cd86:	18bb      	adds	r3, r7, r2
    cd88:	1c18      	adds	r0, r3, #0
    cd8a:	f7fc edc4 	blx	9914 <_init+0x170>
    cd8e:	1c03      	adds	r3, r0, #0
    cd90:	1c1a      	adds	r2, r3, #0
    cd92:	1c3b      	adds	r3, r7, #0
    cd94:	3314      	adds	r3, #20
    cd96:	1c18      	adds	r0, r3, #0
    cd98:	1c21      	adds	r1, r4, #0
    cd9a:	f7fc ed4a 	blx	9830 <_init+0x8c>
      LogFileStream.close();
    cd9e:	1c3b      	adds	r3, r7, #0
    cda0:	3314      	adds	r3, #20
    cda2:	1c18      	adds	r0, r3, #0
    cda4:	f7fc ee5e 	blx	9a64 <_init+0x2c0>
    cda8:	2301      	movs	r3, #1
    cdaa:	218a      	movs	r1, #138
    cdac:	0089      	lsls	r1, r1, #2
    cdae:	187b      	adds	r3, r7, r1
    cdb0:	1c18      	adds	r0, r3, #0
    cdb2:	f7fc edd4 	blx	995c <_init+0x1b8>
    cdb6:	1c3b      	adds	r3, r7, #0
    cdb8:	3314      	adds	r3, #20
    cdba:	1c18      	adds	r0, r3, #0
    cdbc:	f7fc ee46 	blx	9a4c <_init+0x2a8>
    }
    cdc0:	46bd      	mov	sp, r7
    cdc2:	238f      	movs	r3, #143
    cdc4:	009b      	lsls	r3, r3, #2
    cdc6:	449d      	add	sp, r3
    cdc8:	bd90      	pop	{r4, r7, pc}
    cdca:	46c0      	nop			(mov r8, r8)
    cdcc:	fffffdc4 	.word	0xfffffdc4
    cdd0:	0000dda0 	.word	0x0000dda0
    cdd4:	0000dda4 	.word	0x0000dda4

0000cdd8 <_ZN9arlogging7Logging9AppendLogEv>:
        sprintf(OutString + strftime(OutString, DT_BUF_SIZE, "%d.%m.%Y %T", &tm), ".%.3d", (int) (td.tv_usec / 1000));

        return OutString;
    }

    void Logging::AppendLog()
    cdd8:	b590      	push	{r4, r7, lr}
    cdda:	4c55      	ldr	r4, [pc, #340]	(cf30 <_ZN9arlogging7Logging9AppendLogEv+0x158>)
    cddc:	44a5      	add	sp, r4
    cdde:	af00      	add	r7, sp, #0
    cde0:	6078      	str	r0, [r7, #4]
    {
      ofstream LogFileStream;
    cde2:	1c3b      	adds	r3, r7, #0
    cde4:	330c      	adds	r3, #12
    cde6:	1c18      	adds	r0, r3, #0
    cde8:	f7fc eea8 	blx	9b3c <_init+0x398>
      string LogText;
    cdec:	2188      	movs	r1, #136
    cdee:	0089      	lsls	r1, r1, #2
    cdf0:	187b      	adds	r3, r7, r1
    cdf2:	1c18      	adds	r0, r3, #0
    cdf4:	f7fc ecf2 	blx	97dc <_init+0x38>
      char OutString[DT_BUF_SIZE];

      LogFileStream.open(FullLogName.c_str(), ios::app);
    cdf8:	687b      	ldr	r3, [r7, #4]
    cdfa:	3314      	adds	r3, #20
    cdfc:	1c18      	adds	r0, r3, #0
    cdfe:	f7fc ed4e 	blx	989c <_init+0xf8>
    ce02:	1c02      	adds	r2, r0, #0
    ce04:	1c3b      	adds	r3, r7, #0
    ce06:	330c      	adds	r3, #12
    ce08:	1c18      	adds	r0, r3, #0
    ce0a:	1c11      	adds	r1, r2, #0
    ce0c:	2201      	movs	r2, #1
    ce0e:	f7fc ee4e 	blx	9aac <_init+0x308>
      if (!LogFileStream.is_open())
    ce12:	1c3b      	adds	r3, r7, #0
    ce14:	330c      	adds	r3, #12
    ce16:	1c18      	adds	r0, r3, #0
    ce18:	f7fc ee66 	blx	9ae8 <_init+0x344>
    ce1c:	1c03      	adds	r3, r0, #0
    ce1e:	469c      	mov	ip, r3
    ce20:	4662      	mov	r2, ip
    ce22:	2301      	movs	r3, #1
    ce24:	4053      	eors	r3, r2
    ce26:	061b      	lsls	r3, r3, #24
    ce28:	0e1b      	lsrs	r3, r3, #24
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d001      	beq.n	ce32 <_ZN9arlogging7Logging9AppendLogEv+0x5a>
    ce2e:	2200      	movs	r2, #0
    ce30:	e06d      	b.n	cf0e <_ZN9arlogging7Logging9AppendLogEv+0x136>
        {
          return;
        }
      LogText.assign(GetCurrDateTimeFixedLength(OutString, DT_BUF_SIZE));
    ce32:	687b      	ldr	r3, [r7, #4]
    ce34:	2191      	movs	r1, #145
    ce36:	0049      	lsls	r1, r1, #1
    ce38:	187a      	adds	r2, r7, r1
    ce3a:	1c18      	adds	r0, r3, #0
    ce3c:	1c11      	adds	r1, r2, #0
    ce3e:	22fe      	movs	r2, #254
    ce40:	f7ff fd48 	bl	c8d4 <_ZN9arlogging7Logging26GetCurrDateTimeFixedLengthEPcj>
    ce44:	1c02      	adds	r2, r0, #0
    ce46:	2188      	movs	r1, #136
    ce48:	0089      	lsls	r1, r1, #2
    ce4a:	187b      	adds	r3, r7, r1
    ce4c:	1c18      	adds	r0, r3, #0
    ce4e:	1c11      	adds	r1, r2, #0
    ce50:	f7fc ed18 	blx	9884 <_init+0xe0>
      LogText = "> " + LogText + " " + txt;
    ce54:	228b      	movs	r2, #139
    ce56:	0092      	lsls	r2, r2, #2
    ce58:	18bb      	adds	r3, r7, r2
    ce5a:	4a36      	ldr	r2, [pc, #216]	(cf34 <_ZN9arlogging7Logging9AppendLogEv+0x15c>)
    ce5c:	2188      	movs	r1, #136
    ce5e:	0089      	lsls	r1, r1, #2
    ce60:	187c      	adds	r4, r7, r1
    ce62:	1c18      	adds	r0, r3, #0
    ce64:	1c11      	adds	r1, r2, #0
    ce66:	1c22      	adds	r2, r4, #0
    ce68:	f000 fb58 	bl	d51c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>
    ce6c:	228a      	movs	r2, #138
    ce6e:	0092      	lsls	r2, r2, #2
    ce70:	18bb      	adds	r3, r7, r2
    ce72:	218b      	movs	r1, #139
    ce74:	0089      	lsls	r1, r1, #2
    ce76:	187a      	adds	r2, r7, r1
    ce78:	4c2f      	ldr	r4, [pc, #188]	(cf38 <_ZN9arlogging7Logging9AppendLogEv+0x160>)
    ce7a:	1c18      	adds	r0, r3, #0
    ce7c:	1c11      	adds	r1, r2, #0
    ce7e:	1c22      	adds	r2, r4, #0
    ce80:	f000 fb24 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    ce84:	687b      	ldr	r3, [r7, #4]
    ce86:	1c1c      	adds	r4, r3, #0
    ce88:	3408      	adds	r4, #8
    ce8a:	2289      	movs	r2, #137
    ce8c:	0092      	lsls	r2, r2, #2
    ce8e:	18bb      	adds	r3, r7, r2
    ce90:	218a      	movs	r1, #138
    ce92:	0089      	lsls	r1, r1, #2
    ce94:	187a      	adds	r2, r7, r1
    ce96:	1c18      	adds	r0, r3, #0
    ce98:	1c11      	adds	r1, r2, #0
    ce9a:	1c22      	adds	r2, r4, #0
    ce9c:	f7ff fb50 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    cea0:	2288      	movs	r2, #136
    cea2:	0092      	lsls	r2, r2, #2
    cea4:	18bb      	adds	r3, r7, r2
    cea6:	2189      	movs	r1, #137
    cea8:	0089      	lsls	r1, r1, #2
    ceaa:	187a      	adds	r2, r7, r1
    ceac:	1c18      	adds	r0, r3, #0
    ceae:	1c11      	adds	r1, r2, #0
    ceb0:	f7fc ee80 	blx	9bb4 <_init+0x410>
    ceb4:	2289      	movs	r2, #137
    ceb6:	0092      	lsls	r2, r2, #2
    ceb8:	18bb      	adds	r3, r7, r2
    ceba:	1c18      	adds	r0, r3, #0
    cebc:	f7fc ed4e 	blx	995c <_init+0x1b8>
    cec0:	218a      	movs	r1, #138
    cec2:	0089      	lsls	r1, r1, #2
    cec4:	187b      	adds	r3, r7, r1
    cec6:	1c18      	adds	r0, r3, #0
    cec8:	f7fc ed48 	blx	995c <_init+0x1b8>
    cecc:	228b      	movs	r2, #139
    cece:	0092      	lsls	r2, r2, #2
    ced0:	18bb      	adds	r3, r7, r2
    ced2:	1c18      	adds	r0, r3, #0
    ced4:	f7fc ed42 	blx	995c <_init+0x1b8>
      LogFileStream.write(LogText.c_str(), LogText.length());
    ced8:	2188      	movs	r1, #136
    ceda:	0089      	lsls	r1, r1, #2
    cedc:	187b      	adds	r3, r7, r1
    cede:	1c18      	adds	r0, r3, #0
    cee0:	f7fc ecdc 	blx	989c <_init+0xf8>
    cee4:	1c04      	adds	r4, r0, #0
    cee6:	2288      	movs	r2, #136
    cee8:	0092      	lsls	r2, r2, #2
    ceea:	18bb      	adds	r3, r7, r2
    ceec:	1c18      	adds	r0, r3, #0
    ceee:	f7fc ed12 	blx	9914 <_init+0x170>
    cef2:	1c03      	adds	r3, r0, #0
    cef4:	1c1a      	adds	r2, r3, #0
    cef6:	1c3b      	adds	r3, r7, #0
    cef8:	330c      	adds	r3, #12
    cefa:	1c18      	adds	r0, r3, #0
    cefc:	1c21      	adds	r1, r4, #0
    cefe:	f7fc ec98 	blx	9830 <_init+0x8c>
      LogFileStream.close();
    cf02:	1c3b      	adds	r3, r7, #0
    cf04:	330c      	adds	r3, #12
    cf06:	1c18      	adds	r0, r3, #0
    cf08:	f7fc edac 	blx	9a64 <_init+0x2c0>
    cf0c:	2301      	movs	r3, #1
    cf0e:	2188      	movs	r1, #136
    cf10:	0089      	lsls	r1, r1, #2
    cf12:	187b      	adds	r3, r7, r1
    cf14:	1c18      	adds	r0, r3, #0
    cf16:	f7fc ed22 	blx	995c <_init+0x1b8>
    cf1a:	1c3b      	adds	r3, r7, #0
    cf1c:	330c      	adds	r3, #12
    cf1e:	1c18      	adds	r0, r3, #0
    cf20:	f7fc ed94 	blx	9a4c <_init+0x2a8>
    }
    cf24:	46bd      	mov	sp, r7
    cf26:	238d      	movs	r3, #141
    cf28:	009b      	lsls	r3, r3, #2
    cf2a:	449d      	add	sp, r3
    cf2c:	bd90      	pop	{r4, r7, pc}
    cf2e:	46c0      	nop			(mov r8, r8)
    cf30:	fffffdcc 	.word	0xfffffdcc
    cf34:	0000dda0 	.word	0x0000dda0
    cf38:	0000dda4 	.word	0x0000dda4

0000cf3c <_ZN9arlogging7LoggingD1Ev>:
    	mkdir("Logs", 0777);
    	FullLogName = string(LogPath);
    	//FullLogName = FullLogName + "/Logs/" + LogName;
    }

    Logging::~Logging()
    cf3c:	b580      	push	{r7, lr}
    cf3e:	b082      	sub	sp, #8
    cf40:	af00      	add	r7, sp, #0
    cf42:	6078      	str	r0, [r7, #4]
    {
    	free(LogPath);
    cf44:	687b      	ldr	r3, [r7, #4]
    cf46:	681b      	ldr	r3, [r3, #0]
    cf48:	1c18      	adds	r0, r3, #0
    cf4a:	f7fc ed0e 	blx	9968 <_init+0x1c4>
    }
    cf4e:	687b      	ldr	r3, [r7, #4]
    cf50:	3314      	adds	r3, #20
    cf52:	1c18      	adds	r0, r3, #0
    cf54:	f7fc ed02 	blx	995c <_init+0x1b8>
    cf58:	687b      	ldr	r3, [r7, #4]
    cf5a:	3310      	adds	r3, #16
    cf5c:	1c18      	adds	r0, r3, #0
    cf5e:	f7fc ecfe 	blx	995c <_init+0x1b8>
    cf62:	687b      	ldr	r3, [r7, #4]
    cf64:	3308      	adds	r3, #8
    cf66:	1c18      	adds	r0, r3, #0
    cf68:	f7fc ecf8 	blx	995c <_init+0x1b8>
    cf6c:	687b      	ldr	r3, [r7, #4]
    cf6e:	1c18      	adds	r0, r3, #0
    cf70:	46bd      	mov	sp, r7
    cf72:	b002      	add	sp, #8
    cf74:	bd80      	pop	{r7, pc}
    cf76:	46c0      	nop			(mov r8, r8)

0000cf78 <_ZN9arlogging7LoggingD2Ev>:
    	mkdir("Logs", 0777);
    	FullLogName = string(LogPath);
    	//FullLogName = FullLogName + "/Logs/" + LogName;
    }

    Logging::~Logging()
    cf78:	b580      	push	{r7, lr}
    cf7a:	b082      	sub	sp, #8
    cf7c:	af00      	add	r7, sp, #0
    cf7e:	6078      	str	r0, [r7, #4]
    {
    	free(LogPath);
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	681b      	ldr	r3, [r3, #0]
    cf84:	1c18      	adds	r0, r3, #0
    cf86:	f7fc ecf0 	blx	9968 <_init+0x1c4>
    }
    cf8a:	687b      	ldr	r3, [r7, #4]
    cf8c:	3314      	adds	r3, #20
    cf8e:	1c18      	adds	r0, r3, #0
    cf90:	f7fc ece4 	blx	995c <_init+0x1b8>
    cf94:	687b      	ldr	r3, [r7, #4]
    cf96:	3310      	adds	r3, #16
    cf98:	1c18      	adds	r0, r3, #0
    cf9a:	f7fc ece0 	blx	995c <_init+0x1b8>
    cf9e:	687b      	ldr	r3, [r7, #4]
    cfa0:	3308      	adds	r3, #8
    cfa2:	1c18      	adds	r0, r3, #0
    cfa4:	f7fc ecda 	blx	995c <_init+0x1b8>
    cfa8:	687b      	ldr	r3, [r7, #4]
    cfaa:	1c18      	adds	r0, r3, #0
    cfac:	46bd      	mov	sp, r7
    cfae:	b002      	add	sp, #8
    cfb0:	bd80      	pop	{r7, pc}
    cfb2:	46c0      	nop			(mov r8, r8)

0000cfb4 <_ZN9arlogging7LoggingC1Ev>:
          mkdir("Logs", 0777);
          FullLogName = string(LogPath);
          FullLogName = FullLogName + "/Logs/" + LogName;
        }

    Logging::Logging()
    cfb4:	b5b0      	push	{r4, r5, r7, lr}
    cfb6:	b084      	sub	sp, #16
    cfb8:	af00      	add	r7, sp, #0
    cfba:	6078      	str	r0, [r7, #4]
    cfbc:	687b      	ldr	r3, [r7, #4]
    cfbe:	3308      	adds	r3, #8
    cfc0:	1c18      	adds	r0, r3, #0
    cfc2:	f7fc ec0c 	blx	97dc <_init+0x38>
    cfc6:	687b      	ldr	r3, [r7, #4]
    cfc8:	3310      	adds	r3, #16
    cfca:	1c18      	adds	r0, r3, #0
    cfcc:	f7fc ec06 	blx	97dc <_init+0x38>
    cfd0:	687b      	ldr	r3, [r7, #4]
    cfd2:	3314      	adds	r3, #20
    cfd4:	1c18      	adds	r0, r3, #0
    cfd6:	f7fc ec02 	blx	97dc <_init+0x38>
    {
    	//LLevel = log_level;

    	//LogPath = new char[PATH_MAX];
    	LogPath = get_current_dir_name();
    cfda:	f7fc ec84 	blx	98e4 <_init+0x140>
    cfde:	1c02      	adds	r2, r0, #0
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	601a      	str	r2, [r3, #0]
    	//LogName = FileName;
    	mkdir("Logs", 0777);
    cfe4:	4b16      	ldr	r3, [pc, #88]	(d040 <_ZN9arlogging7LoggingC1Ev+0x8c>)
    cfe6:	4a17      	ldr	r2, [pc, #92]	(d044 <_ZN9arlogging7LoggingC1Ev+0x90>)
    cfe8:	1c18      	adds	r0, r3, #0
    cfea:	1c11      	adds	r1, r2, #0
    cfec:	f7fc ec08 	blx	9800 <_init+0x5c>
    	FullLogName = string(LogPath);
    cff0:	687b      	ldr	r3, [r7, #4]
    cff2:	1c1d      	adds	r5, r3, #0
    cff4:	3514      	adds	r5, #20
    cff6:	687b      	ldr	r3, [r7, #4]
    cff8:	681c      	ldr	r4, [r3, #0]
    cffa:	1c3b      	adds	r3, r7, #0
    cffc:	330f      	adds	r3, #15
    cffe:	1c18      	adds	r0, r3, #0
    d000:	f7fc edc0 	blx	9b84 <_init+0x3e0>
    d004:	1c3b      	adds	r3, r7, #0
    d006:	3308      	adds	r3, #8
    d008:	1c3a      	adds	r2, r7, #0
    d00a:	320f      	adds	r2, #15
    d00c:	1c18      	adds	r0, r3, #0
    d00e:	1c21      	adds	r1, r4, #0
    d010:	f7fc ed10 	blx	9a34 <_init+0x290>
    d014:	1c3b      	adds	r3, r7, #0
    d016:	3308      	adds	r3, #8
    d018:	1c28      	adds	r0, r5, #0
    d01a:	1c19      	adds	r1, r3, #0
    d01c:	f7fc edca 	blx	9bb4 <_init+0x410>
    d020:	1c3b      	adds	r3, r7, #0
    d022:	3308      	adds	r3, #8
    d024:	1c18      	adds	r0, r3, #0
    d026:	f7fc ec9a 	blx	995c <_init+0x1b8>
    d02a:	1c3b      	adds	r3, r7, #0
    d02c:	330f      	adds	r3, #15
    d02e:	1c18      	adds	r0, r3, #0
    d030:	f7fc ed42 	blx	9ab8 <_init+0x314>
    	//FullLogName = FullLogName + "/Logs/" + LogName;
    }
    d034:	687b      	ldr	r3, [r7, #4]
    d036:	1c18      	adds	r0, r3, #0
    d038:	46bd      	mov	sp, r7
    d03a:	b004      	add	sp, #16
    d03c:	bdb0      	pop	{r4, r5, r7, pc}
    d03e:	46c0      	nop			(mov r8, r8)
    d040:	0000ddac 	.word	0x0000ddac
    d044:	000001ff 	.word	0x000001ff

0000d048 <_ZN9arlogging7LoggingC2Ev>:
          mkdir("Logs", 0777);
          FullLogName = string(LogPath);
          FullLogName = FullLogName + "/Logs/" + LogName;
        }

    Logging::Logging()
    d048:	b5b0      	push	{r4, r5, r7, lr}
    d04a:	b084      	sub	sp, #16
    d04c:	af00      	add	r7, sp, #0
    d04e:	6078      	str	r0, [r7, #4]
    d050:	687b      	ldr	r3, [r7, #4]
    d052:	3308      	adds	r3, #8
    d054:	1c18      	adds	r0, r3, #0
    d056:	f7fc ebc2 	blx	97dc <_init+0x38>
    d05a:	687b      	ldr	r3, [r7, #4]
    d05c:	3310      	adds	r3, #16
    d05e:	1c18      	adds	r0, r3, #0
    d060:	f7fc ebbc 	blx	97dc <_init+0x38>
    d064:	687b      	ldr	r3, [r7, #4]
    d066:	3314      	adds	r3, #20
    d068:	1c18      	adds	r0, r3, #0
    d06a:	f7fc ebb8 	blx	97dc <_init+0x38>
    {
    	//LLevel = log_level;

    	//LogPath = new char[PATH_MAX];
    	LogPath = get_current_dir_name();
    d06e:	f7fc ec3a 	blx	98e4 <_init+0x140>
    d072:	1c02      	adds	r2, r0, #0
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	601a      	str	r2, [r3, #0]
    	//LogName = FileName;
    	mkdir("Logs", 0777);
    d078:	4b16      	ldr	r3, [pc, #88]	(d0d4 <_ZN9arlogging7LoggingC2Ev+0x8c>)
    d07a:	4a17      	ldr	r2, [pc, #92]	(d0d8 <_ZN9arlogging7LoggingC2Ev+0x90>)
    d07c:	1c18      	adds	r0, r3, #0
    d07e:	1c11      	adds	r1, r2, #0
    d080:	f7fc ebbe 	blx	9800 <_init+0x5c>
    	FullLogName = string(LogPath);
    d084:	687b      	ldr	r3, [r7, #4]
    d086:	1c1d      	adds	r5, r3, #0
    d088:	3514      	adds	r5, #20
    d08a:	687b      	ldr	r3, [r7, #4]
    d08c:	681c      	ldr	r4, [r3, #0]
    d08e:	1c3b      	adds	r3, r7, #0
    d090:	330f      	adds	r3, #15
    d092:	1c18      	adds	r0, r3, #0
    d094:	f7fc ed76 	blx	9b84 <_init+0x3e0>
    d098:	1c3b      	adds	r3, r7, #0
    d09a:	3308      	adds	r3, #8
    d09c:	1c3a      	adds	r2, r7, #0
    d09e:	320f      	adds	r2, #15
    d0a0:	1c18      	adds	r0, r3, #0
    d0a2:	1c21      	adds	r1, r4, #0
    d0a4:	f7fc ecc6 	blx	9a34 <_init+0x290>
    d0a8:	1c3b      	adds	r3, r7, #0
    d0aa:	3308      	adds	r3, #8
    d0ac:	1c28      	adds	r0, r5, #0
    d0ae:	1c19      	adds	r1, r3, #0
    d0b0:	f7fc ed80 	blx	9bb4 <_init+0x410>
    d0b4:	1c3b      	adds	r3, r7, #0
    d0b6:	3308      	adds	r3, #8
    d0b8:	1c18      	adds	r0, r3, #0
    d0ba:	f7fc ec50 	blx	995c <_init+0x1b8>
    d0be:	1c3b      	adds	r3, r7, #0
    d0c0:	330f      	adds	r3, #15
    d0c2:	1c18      	adds	r0, r3, #0
    d0c4:	f7fc ecf8 	blx	9ab8 <_init+0x314>
    	//FullLogName = FullLogName + "/Logs/" + LogName;
    }
    d0c8:	687b      	ldr	r3, [r7, #4]
    d0ca:	1c18      	adds	r0, r3, #0
    d0cc:	46bd      	mov	sp, r7
    d0ce:	b004      	add	sp, #16
    d0d0:	bdb0      	pop	{r4, r5, r7, pc}
    d0d2:	46c0      	nop			(mov r8, r8)
    d0d4:	0000ddac 	.word	0x0000ddac
    d0d8:	000001ff 	.word	0x000001ff

0000d0dc <_ZN9arlogging7LoggingC1ESsi>:
      mkdir("Logs", 0777);
      FullLogName = string(LogPath);
      FullLogName = FullLogName + "/Logs/" + LogName;
    }

    Logging::Logging(string FileName, int log_level)
    d0dc:	b5b0      	push	{r4, r5, r7, lr}
    d0de:	b088      	sub	sp, #32
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	60f8      	str	r0, [r7, #12]
    d0e4:	60b9      	str	r1, [r7, #8]
    d0e6:	607a      	str	r2, [r7, #4]
    d0e8:	68fb      	ldr	r3, [r7, #12]
    d0ea:	3308      	adds	r3, #8
    d0ec:	1c18      	adds	r0, r3, #0
    d0ee:	f7fc eb76 	blx	97dc <_init+0x38>
    d0f2:	68fb      	ldr	r3, [r7, #12]
    d0f4:	3310      	adds	r3, #16
    d0f6:	1c18      	adds	r0, r3, #0
    d0f8:	f7fc eb70 	blx	97dc <_init+0x38>
    d0fc:	68fb      	ldr	r3, [r7, #12]
    d0fe:	3314      	adds	r3, #20
    d100:	1c18      	adds	r0, r3, #0
    d102:	f7fc eb6c 	blx	97dc <_init+0x38>
        {
          LLevel = log_level;
    d106:	68fa      	ldr	r2, [r7, #12]
    d108:	687b      	ldr	r3, [r7, #4]
    d10a:	6053      	str	r3, [r2, #4]

          //LogPath = new char[PATH_MAX];
          LogPath = get_current_dir_name();
    d10c:	f7fc ebea 	blx	98e4 <_init+0x140>
    d110:	1c02      	adds	r2, r0, #0
    d112:	68fb      	ldr	r3, [r7, #12]
    d114:	601a      	str	r2, [r3, #0]

          LogName = FileName;
    d116:	68fb      	ldr	r3, [r7, #12]
    d118:	3310      	adds	r3, #16
    d11a:	68ba      	ldr	r2, [r7, #8]
    d11c:	1c18      	adds	r0, r3, #0
    d11e:	1c11      	adds	r1, r2, #0
    d120:	f7fc ed48 	blx	9bb4 <_init+0x410>
          mkdir("Logs", 0777);
    d124:	4b2a      	ldr	r3, [pc, #168]	(d1d0 <_ZN9arlogging7LoggingC1ESsi+0xf4>)
    d126:	4a2b      	ldr	r2, [pc, #172]	(d1d4 <_ZN9arlogging7LoggingC1ESsi+0xf8>)
    d128:	1c18      	adds	r0, r3, #0
    d12a:	1c11      	adds	r1, r2, #0
    d12c:	f7fc eb68 	blx	9800 <_init+0x5c>
          FullLogName = string(LogPath);
    d130:	68fb      	ldr	r3, [r7, #12]
    d132:	1c1d      	adds	r5, r3, #0
    d134:	3514      	adds	r5, #20
    d136:	68fb      	ldr	r3, [r7, #12]
    d138:	681c      	ldr	r4, [r3, #0]
    d13a:	1c3b      	adds	r3, r7, #0
    d13c:	3317      	adds	r3, #23
    d13e:	1c18      	adds	r0, r3, #0
    d140:	f7fc ed20 	blx	9b84 <_init+0x3e0>
    d144:	1c3b      	adds	r3, r7, #0
    d146:	3310      	adds	r3, #16
    d148:	1c3a      	adds	r2, r7, #0
    d14a:	3217      	adds	r2, #23
    d14c:	1c18      	adds	r0, r3, #0
    d14e:	1c21      	adds	r1, r4, #0
    d150:	f7fc ec70 	blx	9a34 <_init+0x290>
    d154:	1c3b      	adds	r3, r7, #0
    d156:	3310      	adds	r3, #16
    d158:	1c28      	adds	r0, r5, #0
    d15a:	1c19      	adds	r1, r3, #0
    d15c:	f7fc ed2a 	blx	9bb4 <_init+0x410>
    d160:	1c3b      	adds	r3, r7, #0
    d162:	3310      	adds	r3, #16
    d164:	1c18      	adds	r0, r3, #0
    d166:	f7fc ebfa 	blx	995c <_init+0x1b8>
    d16a:	1c3b      	adds	r3, r7, #0
    d16c:	3317      	adds	r3, #23
    d16e:	1c18      	adds	r0, r3, #0
    d170:	f7fc eca2 	blx	9ab8 <_init+0x314>
          FullLogName = FullLogName + "/Logs/" + LogName;
    d174:	68fb      	ldr	r3, [r7, #12]
    d176:	1c1d      	adds	r5, r3, #0
    d178:	3514      	adds	r5, #20
    d17a:	68fb      	ldr	r3, [r7, #12]
    d17c:	1c19      	adds	r1, r3, #0
    d17e:	3114      	adds	r1, #20
    d180:	1c3b      	adds	r3, r7, #0
    d182:	331c      	adds	r3, #28
    d184:	4a14      	ldr	r2, [pc, #80]	(d1d8 <_ZN9arlogging7LoggingC1ESsi+0xfc>)
    d186:	1c18      	adds	r0, r3, #0
    d188:	f000 f9a0 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    d18c:	68fb      	ldr	r3, [r7, #12]
    d18e:	1c1c      	adds	r4, r3, #0
    d190:	3410      	adds	r4, #16
    d192:	1c3b      	adds	r3, r7, #0
    d194:	3318      	adds	r3, #24
    d196:	1c3a      	adds	r2, r7, #0
    d198:	321c      	adds	r2, #28
    d19a:	1c18      	adds	r0, r3, #0
    d19c:	1c11      	adds	r1, r2, #0
    d19e:	1c22      	adds	r2, r4, #0
    d1a0:	f7ff f9ce 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    d1a4:	1c3b      	adds	r3, r7, #0
    d1a6:	3318      	adds	r3, #24
    d1a8:	1c28      	adds	r0, r5, #0
    d1aa:	1c19      	adds	r1, r3, #0
    d1ac:	f7fc ed02 	blx	9bb4 <_init+0x410>
    d1b0:	1c3b      	adds	r3, r7, #0
    d1b2:	3318      	adds	r3, #24
    d1b4:	1c18      	adds	r0, r3, #0
    d1b6:	f7fc ebd2 	blx	995c <_init+0x1b8>
    d1ba:	1c3b      	adds	r3, r7, #0
    d1bc:	331c      	adds	r3, #28
    d1be:	1c18      	adds	r0, r3, #0
    d1c0:	f7fc ebcc 	blx	995c <_init+0x1b8>
        }
    d1c4:	68fb      	ldr	r3, [r7, #12]
    d1c6:	1c18      	adds	r0, r3, #0
    d1c8:	46bd      	mov	sp, r7
    d1ca:	b008      	add	sp, #32
    d1cc:	bdb0      	pop	{r4, r5, r7, pc}
    d1ce:	46c0      	nop			(mov r8, r8)
    d1d0:	0000ddac 	.word	0x0000ddac
    d1d4:	000001ff 	.word	0x000001ff
    d1d8:	0000dd84 	.word	0x0000dd84

0000d1dc <_ZN9arlogging7LoggingC2ESsi>:
      mkdir("Logs", 0777);
      FullLogName = string(LogPath);
      FullLogName = FullLogName + "/Logs/" + LogName;
    }

    Logging::Logging(string FileName, int log_level)
    d1dc:	b5b0      	push	{r4, r5, r7, lr}
    d1de:	b088      	sub	sp, #32
    d1e0:	af00      	add	r7, sp, #0
    d1e2:	60f8      	str	r0, [r7, #12]
    d1e4:	60b9      	str	r1, [r7, #8]
    d1e6:	607a      	str	r2, [r7, #4]
    d1e8:	68fb      	ldr	r3, [r7, #12]
    d1ea:	3308      	adds	r3, #8
    d1ec:	1c18      	adds	r0, r3, #0
    d1ee:	f7fc eaf6 	blx	97dc <_init+0x38>
    d1f2:	68fb      	ldr	r3, [r7, #12]
    d1f4:	3310      	adds	r3, #16
    d1f6:	1c18      	adds	r0, r3, #0
    d1f8:	f7fc eaf0 	blx	97dc <_init+0x38>
    d1fc:	68fb      	ldr	r3, [r7, #12]
    d1fe:	3314      	adds	r3, #20
    d200:	1c18      	adds	r0, r3, #0
    d202:	f7fc eaec 	blx	97dc <_init+0x38>
        {
          LLevel = log_level;
    d206:	68fa      	ldr	r2, [r7, #12]
    d208:	687b      	ldr	r3, [r7, #4]
    d20a:	6053      	str	r3, [r2, #4]

          //LogPath = new char[PATH_MAX];
          LogPath = get_current_dir_name();
    d20c:	f7fc eb6a 	blx	98e4 <_init+0x140>
    d210:	1c02      	adds	r2, r0, #0
    d212:	68fb      	ldr	r3, [r7, #12]
    d214:	601a      	str	r2, [r3, #0]

          LogName = FileName;
    d216:	68fb      	ldr	r3, [r7, #12]
    d218:	3310      	adds	r3, #16
    d21a:	68ba      	ldr	r2, [r7, #8]
    d21c:	1c18      	adds	r0, r3, #0
    d21e:	1c11      	adds	r1, r2, #0
    d220:	f7fc ecc8 	blx	9bb4 <_init+0x410>
          mkdir("Logs", 0777);
    d224:	4b2a      	ldr	r3, [pc, #168]	(d2d0 <_ZN9arlogging7LoggingC2ESsi+0xf4>)
    d226:	4a2b      	ldr	r2, [pc, #172]	(d2d4 <_ZN9arlogging7LoggingC2ESsi+0xf8>)
    d228:	1c18      	adds	r0, r3, #0
    d22a:	1c11      	adds	r1, r2, #0
    d22c:	f7fc eae8 	blx	9800 <_init+0x5c>
          FullLogName = string(LogPath);
    d230:	68fb      	ldr	r3, [r7, #12]
    d232:	1c1d      	adds	r5, r3, #0
    d234:	3514      	adds	r5, #20
    d236:	68fb      	ldr	r3, [r7, #12]
    d238:	681c      	ldr	r4, [r3, #0]
    d23a:	1c3b      	adds	r3, r7, #0
    d23c:	3317      	adds	r3, #23
    d23e:	1c18      	adds	r0, r3, #0
    d240:	f7fc eca0 	blx	9b84 <_init+0x3e0>
    d244:	1c3b      	adds	r3, r7, #0
    d246:	3310      	adds	r3, #16
    d248:	1c3a      	adds	r2, r7, #0
    d24a:	3217      	adds	r2, #23
    d24c:	1c18      	adds	r0, r3, #0
    d24e:	1c21      	adds	r1, r4, #0
    d250:	f7fc ebf0 	blx	9a34 <_init+0x290>
    d254:	1c3b      	adds	r3, r7, #0
    d256:	3310      	adds	r3, #16
    d258:	1c28      	adds	r0, r5, #0
    d25a:	1c19      	adds	r1, r3, #0
    d25c:	f7fc ecaa 	blx	9bb4 <_init+0x410>
    d260:	1c3b      	adds	r3, r7, #0
    d262:	3310      	adds	r3, #16
    d264:	1c18      	adds	r0, r3, #0
    d266:	f7fc eb7a 	blx	995c <_init+0x1b8>
    d26a:	1c3b      	adds	r3, r7, #0
    d26c:	3317      	adds	r3, #23
    d26e:	1c18      	adds	r0, r3, #0
    d270:	f7fc ec22 	blx	9ab8 <_init+0x314>
          FullLogName = FullLogName + "/Logs/" + LogName;
    d274:	68fb      	ldr	r3, [r7, #12]
    d276:	1c1d      	adds	r5, r3, #0
    d278:	3514      	adds	r5, #20
    d27a:	68fb      	ldr	r3, [r7, #12]
    d27c:	1c19      	adds	r1, r3, #0
    d27e:	3114      	adds	r1, #20
    d280:	1c3b      	adds	r3, r7, #0
    d282:	331c      	adds	r3, #28
    d284:	4a14      	ldr	r2, [pc, #80]	(d2d8 <_ZN9arlogging7LoggingC2ESsi+0xfc>)
    d286:	1c18      	adds	r0, r3, #0
    d288:	f000 f920 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    d28c:	68fb      	ldr	r3, [r7, #12]
    d28e:	1c1c      	adds	r4, r3, #0
    d290:	3410      	adds	r4, #16
    d292:	1c3b      	adds	r3, r7, #0
    d294:	3318      	adds	r3, #24
    d296:	1c3a      	adds	r2, r7, #0
    d298:	321c      	adds	r2, #28
    d29a:	1c18      	adds	r0, r3, #0
    d29c:	1c11      	adds	r1, r2, #0
    d29e:	1c22      	adds	r2, r4, #0
    d2a0:	f7ff f94e 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    d2a4:	1c3b      	adds	r3, r7, #0
    d2a6:	3318      	adds	r3, #24
    d2a8:	1c28      	adds	r0, r5, #0
    d2aa:	1c19      	adds	r1, r3, #0
    d2ac:	f7fc ec82 	blx	9bb4 <_init+0x410>
    d2b0:	1c3b      	adds	r3, r7, #0
    d2b2:	3318      	adds	r3, #24
    d2b4:	1c18      	adds	r0, r3, #0
    d2b6:	f7fc eb52 	blx	995c <_init+0x1b8>
    d2ba:	1c3b      	adds	r3, r7, #0
    d2bc:	331c      	adds	r3, #28
    d2be:	1c18      	adds	r0, r3, #0
    d2c0:	f7fc eb4c 	blx	995c <_init+0x1b8>
        }
    d2c4:	68fb      	ldr	r3, [r7, #12]
    d2c6:	1c18      	adds	r0, r3, #0
    d2c8:	46bd      	mov	sp, r7
    d2ca:	b008      	add	sp, #32
    d2cc:	bdb0      	pop	{r4, r5, r7, pc}
    d2ce:	46c0      	nop			(mov r8, r8)
    d2d0:	0000ddac 	.word	0x0000ddac
    d2d4:	000001ff 	.word	0x000001ff
    d2d8:	0000dd84 	.word	0x0000dd84

0000d2dc <_ZN9arlogging7LoggingC1ESs>:



namespace arlogging
{
    Logging::Logging(string FileName)
    d2dc:	b5b0      	push	{r4, r5, r7, lr}
    d2de:	b086      	sub	sp, #24
    d2e0:	af00      	add	r7, sp, #0
    d2e2:	6078      	str	r0, [r7, #4]
    d2e4:	6039      	str	r1, [r7, #0]
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	3308      	adds	r3, #8
    d2ea:	1c18      	adds	r0, r3, #0
    d2ec:	f7fc ea76 	blx	97dc <_init+0x38>
    d2f0:	687b      	ldr	r3, [r7, #4]
    d2f2:	3310      	adds	r3, #16
    d2f4:	1c18      	adds	r0, r3, #0
    d2f6:	f7fc ea72 	blx	97dc <_init+0x38>
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	3314      	adds	r3, #20
    d2fe:	1c18      	adds	r0, r3, #0
    d300:	f7fc ea6c 	blx	97dc <_init+0x38>
    {
      //LogPath = new char[PATH_MAX];
      LogPath = get_current_dir_name();
    d304:	f7fc eaee 	blx	98e4 <_init+0x140>
    d308:	1c02      	adds	r2, r0, #0
    d30a:	687b      	ldr	r3, [r7, #4]
    d30c:	601a      	str	r2, [r3, #0]
      LogName = FileName;
    d30e:	687b      	ldr	r3, [r7, #4]
    d310:	3310      	adds	r3, #16
    d312:	683a      	ldr	r2, [r7, #0]
    d314:	1c18      	adds	r0, r3, #0
    d316:	1c11      	adds	r1, r2, #0
    d318:	f7fc ec4c 	blx	9bb4 <_init+0x410>
      mkdir("Logs", 0777);
    d31c:	4b2a      	ldr	r3, [pc, #168]	(d3c8 <_ZN9arlogging7LoggingC1ESs+0xec>)
    d31e:	4a2b      	ldr	r2, [pc, #172]	(d3cc <_ZN9arlogging7LoggingC1ESs+0xf0>)
    d320:	1c18      	adds	r0, r3, #0
    d322:	1c11      	adds	r1, r2, #0
    d324:	f7fc ea6c 	blx	9800 <_init+0x5c>
      FullLogName = string(LogPath);
    d328:	687b      	ldr	r3, [r7, #4]
    d32a:	1c1d      	adds	r5, r3, #0
    d32c:	3514      	adds	r5, #20
    d32e:	687b      	ldr	r3, [r7, #4]
    d330:	681c      	ldr	r4, [r3, #0]
    d332:	1c3b      	adds	r3, r7, #0
    d334:	330f      	adds	r3, #15
    d336:	1c18      	adds	r0, r3, #0
    d338:	f7fc ec24 	blx	9b84 <_init+0x3e0>
    d33c:	1c3b      	adds	r3, r7, #0
    d33e:	3308      	adds	r3, #8
    d340:	1c3a      	adds	r2, r7, #0
    d342:	320f      	adds	r2, #15
    d344:	1c18      	adds	r0, r3, #0
    d346:	1c21      	adds	r1, r4, #0
    d348:	f7fc eb74 	blx	9a34 <_init+0x290>
    d34c:	1c3b      	adds	r3, r7, #0
    d34e:	3308      	adds	r3, #8
    d350:	1c28      	adds	r0, r5, #0
    d352:	1c19      	adds	r1, r3, #0
    d354:	f7fc ec2e 	blx	9bb4 <_init+0x410>
    d358:	1c3b      	adds	r3, r7, #0
    d35a:	3308      	adds	r3, #8
    d35c:	1c18      	adds	r0, r3, #0
    d35e:	f7fc eafe 	blx	995c <_init+0x1b8>
    d362:	1c3b      	adds	r3, r7, #0
    d364:	330f      	adds	r3, #15
    d366:	1c18      	adds	r0, r3, #0
    d368:	f7fc eba6 	blx	9ab8 <_init+0x314>
      FullLogName = FullLogName + "/Logs/" + LogName;
    d36c:	687b      	ldr	r3, [r7, #4]
    d36e:	1c1d      	adds	r5, r3, #0
    d370:	3514      	adds	r5, #20
    d372:	687b      	ldr	r3, [r7, #4]
    d374:	1c19      	adds	r1, r3, #0
    d376:	3114      	adds	r1, #20
    d378:	1c3b      	adds	r3, r7, #0
    d37a:	3314      	adds	r3, #20
    d37c:	4a14      	ldr	r2, [pc, #80]	(d3d0 <_ZN9arlogging7LoggingC1ESs+0xf4>)
    d37e:	1c18      	adds	r0, r3, #0
    d380:	f000 f8a4 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    d384:	687b      	ldr	r3, [r7, #4]
    d386:	1c1c      	adds	r4, r3, #0
    d388:	3410      	adds	r4, #16
    d38a:	1c3b      	adds	r3, r7, #0
    d38c:	3310      	adds	r3, #16
    d38e:	1c3a      	adds	r2, r7, #0
    d390:	3214      	adds	r2, #20
    d392:	1c18      	adds	r0, r3, #0
    d394:	1c11      	adds	r1, r2, #0
    d396:	1c22      	adds	r2, r4, #0
    d398:	f7ff f8d2 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    d39c:	1c3b      	adds	r3, r7, #0
    d39e:	3310      	adds	r3, #16
    d3a0:	1c28      	adds	r0, r5, #0
    d3a2:	1c19      	adds	r1, r3, #0
    d3a4:	f7fc ec06 	blx	9bb4 <_init+0x410>
    d3a8:	1c3b      	adds	r3, r7, #0
    d3aa:	3310      	adds	r3, #16
    d3ac:	1c18      	adds	r0, r3, #0
    d3ae:	f7fc ead6 	blx	995c <_init+0x1b8>
    d3b2:	1c3b      	adds	r3, r7, #0
    d3b4:	3314      	adds	r3, #20
    d3b6:	1c18      	adds	r0, r3, #0
    d3b8:	f7fc ead0 	blx	995c <_init+0x1b8>
    }
    d3bc:	687b      	ldr	r3, [r7, #4]
    d3be:	1c18      	adds	r0, r3, #0
    d3c0:	46bd      	mov	sp, r7
    d3c2:	b006      	add	sp, #24
    d3c4:	bdb0      	pop	{r4, r5, r7, pc}
    d3c6:	46c0      	nop			(mov r8, r8)
    d3c8:	0000ddac 	.word	0x0000ddac
    d3cc:	000001ff 	.word	0x000001ff
    d3d0:	0000dd84 	.word	0x0000dd84

0000d3d4 <_ZN9arlogging7LoggingC2ESs>:



namespace arlogging
{
    Logging::Logging(string FileName)
    d3d4:	b5b0      	push	{r4, r5, r7, lr}
    d3d6:	b086      	sub	sp, #24
    d3d8:	af00      	add	r7, sp, #0
    d3da:	6078      	str	r0, [r7, #4]
    d3dc:	6039      	str	r1, [r7, #0]
    d3de:	687b      	ldr	r3, [r7, #4]
    d3e0:	3308      	adds	r3, #8
    d3e2:	1c18      	adds	r0, r3, #0
    d3e4:	f7fc e9fa 	blx	97dc <_init+0x38>
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	3310      	adds	r3, #16
    d3ec:	1c18      	adds	r0, r3, #0
    d3ee:	f7fc e9f6 	blx	97dc <_init+0x38>
    d3f2:	687b      	ldr	r3, [r7, #4]
    d3f4:	3314      	adds	r3, #20
    d3f6:	1c18      	adds	r0, r3, #0
    d3f8:	f7fc e9f0 	blx	97dc <_init+0x38>
    {
      //LogPath = new char[PATH_MAX];
      LogPath = get_current_dir_name();
    d3fc:	f7fc ea72 	blx	98e4 <_init+0x140>
    d400:	1c02      	adds	r2, r0, #0
    d402:	687b      	ldr	r3, [r7, #4]
    d404:	601a      	str	r2, [r3, #0]
      LogName = FileName;
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	3310      	adds	r3, #16
    d40a:	683a      	ldr	r2, [r7, #0]
    d40c:	1c18      	adds	r0, r3, #0
    d40e:	1c11      	adds	r1, r2, #0
    d410:	f7fc ebd0 	blx	9bb4 <_init+0x410>
      mkdir("Logs", 0777);
    d414:	4b2a      	ldr	r3, [pc, #168]	(d4c0 <_ZN9arlogging7LoggingC2ESs+0xec>)
    d416:	4a2b      	ldr	r2, [pc, #172]	(d4c4 <_ZN9arlogging7LoggingC2ESs+0xf0>)
    d418:	1c18      	adds	r0, r3, #0
    d41a:	1c11      	adds	r1, r2, #0
    d41c:	f7fc e9f0 	blx	9800 <_init+0x5c>
      FullLogName = string(LogPath);
    d420:	687b      	ldr	r3, [r7, #4]
    d422:	1c1d      	adds	r5, r3, #0
    d424:	3514      	adds	r5, #20
    d426:	687b      	ldr	r3, [r7, #4]
    d428:	681c      	ldr	r4, [r3, #0]
    d42a:	1c3b      	adds	r3, r7, #0
    d42c:	330f      	adds	r3, #15
    d42e:	1c18      	adds	r0, r3, #0
    d430:	f7fc eba8 	blx	9b84 <_init+0x3e0>
    d434:	1c3b      	adds	r3, r7, #0
    d436:	3308      	adds	r3, #8
    d438:	1c3a      	adds	r2, r7, #0
    d43a:	320f      	adds	r2, #15
    d43c:	1c18      	adds	r0, r3, #0
    d43e:	1c21      	adds	r1, r4, #0
    d440:	f7fc eaf8 	blx	9a34 <_init+0x290>
    d444:	1c3b      	adds	r3, r7, #0
    d446:	3308      	adds	r3, #8
    d448:	1c28      	adds	r0, r5, #0
    d44a:	1c19      	adds	r1, r3, #0
    d44c:	f7fc ebb2 	blx	9bb4 <_init+0x410>
    d450:	1c3b      	adds	r3, r7, #0
    d452:	3308      	adds	r3, #8
    d454:	1c18      	adds	r0, r3, #0
    d456:	f7fc ea82 	blx	995c <_init+0x1b8>
    d45a:	1c3b      	adds	r3, r7, #0
    d45c:	330f      	adds	r3, #15
    d45e:	1c18      	adds	r0, r3, #0
    d460:	f7fc eb2a 	blx	9ab8 <_init+0x314>
      FullLogName = FullLogName + "/Logs/" + LogName;
    d464:	687b      	ldr	r3, [r7, #4]
    d466:	1c1d      	adds	r5, r3, #0
    d468:	3514      	adds	r5, #20
    d46a:	687b      	ldr	r3, [r7, #4]
    d46c:	1c19      	adds	r1, r3, #0
    d46e:	3114      	adds	r1, #20
    d470:	1c3b      	adds	r3, r7, #0
    d472:	3314      	adds	r3, #20
    d474:	4a14      	ldr	r2, [pc, #80]	(d4c8 <_ZN9arlogging7LoggingC2ESs+0xf4>)
    d476:	1c18      	adds	r0, r3, #0
    d478:	f000 f828 	bl	d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>
    d47c:	687b      	ldr	r3, [r7, #4]
    d47e:	1c1c      	adds	r4, r3, #0
    d480:	3410      	adds	r4, #16
    d482:	1c3b      	adds	r3, r7, #0
    d484:	3310      	adds	r3, #16
    d486:	1c3a      	adds	r2, r7, #0
    d488:	3214      	adds	r2, #20
    d48a:	1c18      	adds	r0, r3, #0
    d48c:	1c11      	adds	r1, r2, #0
    d48e:	1c22      	adds	r2, r4, #0
    d490:	f7ff f856 	bl	c540 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>
    d494:	1c3b      	adds	r3, r7, #0
    d496:	3310      	adds	r3, #16
    d498:	1c28      	adds	r0, r5, #0
    d49a:	1c19      	adds	r1, r3, #0
    d49c:	f7fc eb8a 	blx	9bb4 <_init+0x410>
    d4a0:	1c3b      	adds	r3, r7, #0
    d4a2:	3310      	adds	r3, #16
    d4a4:	1c18      	adds	r0, r3, #0
    d4a6:	f7fc ea5a 	blx	995c <_init+0x1b8>
    d4aa:	1c3b      	adds	r3, r7, #0
    d4ac:	3314      	adds	r3, #20
    d4ae:	1c18      	adds	r0, r3, #0
    d4b0:	f7fc ea54 	blx	995c <_init+0x1b8>
    }
    d4b4:	687b      	ldr	r3, [r7, #4]
    d4b6:	1c18      	adds	r0, r3, #0
    d4b8:	46bd      	mov	sp, r7
    d4ba:	b006      	add	sp, #24
    d4bc:	bdb0      	pop	{r4, r5, r7, pc}
    d4be:	46c0      	nop			(mov r8, r8)
    d4c0:	0000ddac 	.word	0x0000ddac
    d4c4:	000001ff 	.word	0x000001ff
    d4c8:	0000dd84 	.word	0x0000dd84

0000d4cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_>:
   *  @return  New string with @a lhs followed by @a rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	     const _CharT* __rhs)
    d4cc:	b590      	push	{r4, r7, lr}
    d4ce:	b085      	sub	sp, #20
    d4d0:	af00      	add	r7, sp, #0
    d4d2:	1c04      	adds	r4, r0, #0
    d4d4:	6079      	str	r1, [r7, #4]
    d4d6:	603a      	str	r2, [r7, #0]
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
    d4d8:	1c23      	adds	r3, r4, #0
    d4da:	687a      	ldr	r2, [r7, #4]
    d4dc:	1c18      	adds	r0, r3, #0
    d4de:	1c11      	adds	r1, r2, #0
    d4e0:	f7fc ea0c 	blx	98fc <_init+0x158>
      __str.append(__rhs);
    d4e4:	1c23      	adds	r3, r4, #0
    d4e6:	683a      	ldr	r2, [r7, #0]
    d4e8:	1c18      	adds	r0, r3, #0
    d4ea:	1c11      	adds	r1, r2, #0
    d4ec:	f7fc eaf6 	blx	9adc <_init+0x338>
      return __str;
    }
    d4f0:	1c20      	adds	r0, r4, #0
    d4f2:	1c20      	adds	r0, r4, #0
    d4f4:	46bd      	mov	sp, r7
    d4f6:	b005      	add	sp, #20
    d4f8:	bd90      	pop	{r4, r7, pc}
    d4fa:	46c0      	nop			(mov r8, r8)

0000d4fc <_ZNSt11char_traitsIcE6lengthEPKc>:
      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
    d4fc:	b580      	push	{r7, lr}
    d4fe:	b082      	sub	sp, #8
    d500:	af00      	add	r7, sp, #0
    d502:	6078      	str	r0, [r7, #4]
      { return __builtin_strlen(__s); }
    d504:	687b      	ldr	r3, [r7, #4]
    d506:	1c18      	adds	r0, r3, #0
    d508:	f7fc ea70 	blx	99ec <_init+0x248>
    d50c:	1c03      	adds	r3, r0, #0
    d50e:	469c      	mov	ip, r3
    d510:	4663      	mov	r3, ip
    d512:	1c18      	adds	r0, r3, #0
    d514:	46bd      	mov	sp, r7
    d516:	b002      	add	sp, #8
    d518:	bd80      	pop	{r7, pc}
    d51a:	46c0      	nop			(mov r8, r8)

0000d51c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
    }
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    d51c:	b5b0      	push	{r4, r5, r7, lr}
    d51e:	b084      	sub	sp, #16
    d520:	af00      	add	r7, sp, #0
    d522:	1c05      	adds	r5, r0, #0
    d524:	6079      	str	r1, [r7, #4]
    d526:	603a      	str	r2, [r7, #0]
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
    d528:	687b      	ldr	r3, [r7, #4]
    d52a:	1c18      	adds	r0, r3, #0
    d52c:	f7ff ffe6 	bl	d4fc <_ZNSt11char_traitsIcE6lengthEPKc>
    d530:	1c03      	adds	r3, r0, #0
    d532:	60fb      	str	r3, [r7, #12]
      __string_type __str;
    d534:	1c2b      	adds	r3, r5, #0
    d536:	1c18      	adds	r0, r3, #0
    d538:	f7fc e950 	blx	97dc <_init+0x38>
      __str.reserve(__len + __rhs.size());
    d53c:	1c2c      	adds	r4, r5, #0
    d53e:	683b      	ldr	r3, [r7, #0]
    d540:	1c18      	adds	r0, r3, #0
    d542:	f7fc e9c4 	blx	98cc <_init+0x128>
    d546:	1c02      	adds	r2, r0, #0
    d548:	68fb      	ldr	r3, [r7, #12]
    d54a:	18d3      	adds	r3, r2, r3
    d54c:	1c20      	adds	r0, r4, #0
    d54e:	1c19      	adds	r1, r3, #0
    d550:	f7fc eb4e 	blx	9bf0 <_init+0x44c>
      __str.append(__lhs, __len);
    d554:	1c2b      	adds	r3, r5, #0
    d556:	687a      	ldr	r2, [r7, #4]
    d558:	68fc      	ldr	r4, [r7, #12]
    d55a:	1c18      	adds	r0, r3, #0
    d55c:	1c11      	adds	r1, r2, #0
    d55e:	1c22      	adds	r2, r4, #0
    d560:	f7fc eafe 	blx	9b60 <_init+0x3bc>
      __str.append(__rhs);
    d564:	1c2b      	adds	r3, r5, #0
    d566:	683a      	ldr	r2, [r7, #0]
    d568:	1c18      	adds	r0, r3, #0
    d56a:	1c11      	adds	r1, r2, #0
    d56c:	f7fc eb28 	blx	9bc0 <_init+0x41c>
      return __str;
    }
    d570:	1c28      	adds	r0, r5, #0
    d572:	1c28      	adds	r0, r5, #0
    d574:	46bd      	mov	sp, r7
    d576:	b004      	add	sp, #16
    d578:	bdb0      	pop	{r4, r5, r7, pc}
    d57a:	46c0      	nop			(mov r8, r8)

0000d57c <__libc_csu_fini>:
    d57c:	e12fff1e 	bx	lr

0000d580 <__libc_csu_init>:
    d580:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d584:	e1a08001 	mov	r8, r1
    d588:	e1a07002 	mov	r7, r2
    d58c:	e1a0a000 	mov	sl, r0
    d590:	ebfff083 	bl	97a4 <_init>
    d594:	e59f1044 	ldr	r1, [pc, #68]	; d5e0 <__libc_csu_init+0x60>
    d598:	e59f3044 	ldr	r3, [pc, #68]	; d5e4 <__libc_csu_init+0x64>
    d59c:	e59f2044 	ldr	r2, [pc, #68]	; d5e8 <__libc_csu_init+0x68>
    d5a0:	e0613003 	rsb	r3, r1, r3
    d5a4:	e08f2002 	add	r2, pc, r2
    d5a8:	e1b05143 	asrs	r5, r3, #2
    d5ac:	e0822001 	add	r2, r2, r1
    d5b0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    d5b4:	e1a06002 	mov	r6, r2
    d5b8:	e3a04000 	mov	r4, #0	; 0x0
    d5bc:	e1a0000a 	mov	r0, sl
    d5c0:	e1a01008 	mov	r1, r8
    d5c4:	e1a02007 	mov	r2, r7
    d5c8:	e1a0e00f 	mov	lr, pc
    d5cc:	e796f104 	ldr	pc, [r6, r4, lsl #2]
    d5d0:	e2844001 	add	r4, r4, #1	; 0x1
    d5d4:	e1540005 	cmp	r4, r5
    d5d8:	3afffff7 	bcc	d5bc <__libc_csu_init+0x3c>
    d5dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d5e0:	fffffeac 	.word	0xfffffeac
    d5e4:	fffffec8 	.word	0xfffffec8
    d5e8:	00009058 	.word	0x00009058

Disassembly of section .fini:

0000d5ec <_fini>:
    d5ec:	e92d4010 	push	{r4, lr}
    d5f0:	e8bd8010 	pop	{r4, pc}
